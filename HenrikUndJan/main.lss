
main.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000053c  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c9  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e4  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00002e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000605  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000988  00000000  00000000  00003809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00004191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	9f c1       	rjmp	.+830    	; 0x344 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	bd c1       	rjmp	.+890    	; 0x384 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	02 c1       	rjmp	.+516    	; 0x222 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	3f c2       	rjmp	.+1150   	; 0x4c4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	75 d0       	rcall	.+234    	; 0x140 <Init>
        switches &= 0b00111111;
		
		
		// lineData[LEFT]
		// lineData[RIGHT]
		left  = ((int)lineData[LEFT]+60)  / 6;
  56:	26 e0       	ldi	r18, 0x06	; 6
  58:	82 2e       	mov	r8, r18
  5a:	91 2c       	mov	r9, r1
	char b_pressed = 0;
    
	//for(int i=0;i<10;i++)
	while(1){
		
		uint16_t lineData[] = {0,0};
  5c:	1a 82       	std	Y+2, r1	; 0x02
  5e:	19 82       	std	Y+1, r1	; 0x01
  60:	1c 82       	std	Y+4, r1	; 0x04
  62:	1b 82       	std	Y+3, r1	; 0x03
		LineData(lineData);
  64:	ce 01       	movw	r24, r28
  66:	01 96       	adiw	r24, 0x01	; 1
  68:	c3 d0       	rcall	.+390    	; 0x1f0 <LineData>
		
		char switches = PollSwitch();
  6a:	43 d1       	rcall	.+646    	; 0x2f2 <PollSwitch>
  6c:	d8 2e       	mov	r13, r24
        switches &= 0b00111111;
		
		
		// lineData[LEFT]
		// lineData[RIGHT]
		left  = ((int)lineData[LEFT]+60)  / 6;
  6e:	89 81       	ldd	r24, Y+1	; 0x01
  70:	9a 81       	ldd	r25, Y+2	; 0x02
  72:	cc 96       	adiw	r24, 0x3c	; 60
  74:	b4 01       	movw	r22, r8
  76:	13 d2       	rcall	.+1062   	; 0x49e <__divmodhi4>
  78:	7b 01       	movw	r14, r22
		right = ((int)lineData[RIGHT]	) / 6;	
  7a:	8b 81       	ldd	r24, Y+3	; 0x03
  7c:	9c 81       	ldd	r25, Y+4	; 0x04
  7e:	b4 01       	movw	r22, r8
  80:	0e d2       	rcall	.+1052   	; 0x49e <__divmodhi4>
  82:	8b 01       	movw	r16, r22
			
		
		if (left>255){
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	e2 16       	cp	r14, r18
  88:	f1 04       	cpc	r15, r1
  8a:	11 f0       	breq	.+4      	; 0x90 <main+0x48>
  8c:	0c f0       	brlt	.+2      	; 0x90 <main+0x48>
  8e:	4a c0       	rjmp	.+148    	; 0x124 <main+0xdc>
			left=254;
		}
			
		if (right>255){
  90:	6f 3f       	cpi	r22, 0xFF	; 255
  92:	71 05       	cpc	r23, r1
  94:	19 f0       	breq	.+6      	; 0x9c <main+0x54>
  96:	14 f0       	brlt	.+4      	; 0x9c <main+0x54>
			right=254;
  98:	0e ef       	ldi	r16, 0xFE	; 254
  9a:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if(left > right){
  9c:	0e 15       	cp	r16, r14
  9e:	1f 05       	cpc	r17, r15
  a0:	1c f4       	brge	.+6      	; 0xa8 <main+0x60>
			BackLED(OFF,ON);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	73 d0       	rcall	.+230    	; 0x18e <BackLED>
		}
		if(right > left){
  a8:	e0 16       	cp	r14, r16
  aa:	f1 06       	cpc	r15, r17
  ac:	1c f4       	brge	.+6      	; 0xb4 <main+0x6c>
			BackLED(ON,OFF);
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	6d d0       	rcall	.+218    	; 0x18e <BackLED>
		}
		if(right == left){
  b4:	0e 15       	cp	r16, r14
  b6:	1f 05       	cpc	r17, r15
  b8:	19 f4       	brne	.+6      	; 0xc0 <main+0x78>
			BackLED(ON,ON);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	67 d0       	rcall	.+206    	; 0x18e <BackLED>
		}
		MotorDir(FWD,FWD);
  c0:	60 e2       	ldi	r22, 0x20	; 32
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	6f d0       	rcall	.+222    	; 0x1a4 <MotorDir>
		MotorSpeed(right,left);
  c6:	6e 2d       	mov	r22, r14
  c8:	80 2f       	mov	r24, r16
  ca:	78 d0       	rcall	.+240    	; 0x1bc <MotorSpeed>
  cc:	08 e7       	ldi	r16, 0x78	; 120
  ce:	10 e0       	ldi	r17, 0x00	; 0
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	6c d1       	rcall	.+728    	; 0x3ac <sleep>
  d4:	01 50       	subi	r16, 0x01	; 1
  d6:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x88>
		msleep(120);
		
		a_pressed = ( switches & SWITCH(1) );
        b_pressed = ( switches & SWITCH(3) );
		
		if (a_pressed | b_pressed > 0) {
  da:	d3 fa       	bst	r13, 3
  dc:	aa 24       	eor	r10, r10
  de:	a0 f8       	bld	r10, 0
  e0:	b1 2c       	mov	r11, r1
		}
		MotorDir(FWD,FWD);
		MotorSpeed(right,left);
		msleep(120);
		
		a_pressed = ( switches & SWITCH(1) );
  e2:	8d 2d       	mov	r24, r13
  e4:	82 70       	andi	r24, 0x02	; 2
        b_pressed = ( switches & SWITCH(3) );
		
		if (a_pressed | b_pressed > 0) {
  e6:	95 01       	movw	r18, r10
  e8:	28 2b       	or	r18, r24
  ea:	c9 01       	movw	r24, r18
  ec:	89 2b       	or	r24, r25
  ee:	09 f4       	brne	.+2      	; 0xf2 <main+0xaa>
  f0:	b5 cf       	rjmp	.-150    	; 0x5c <main+0x14>
            BackLED(OFF,ON);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	4b d0       	rcall	.+150    	; 0x18e <BackLED>
        sleep(36);
  f8:	84 e2       	ldi	r24, 0x24	; 36
  fa:	58 d1       	rcall	.+688    	; 0x3ac <sleep>
            msleep(1);
            BackLED(ON,OFF);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	46 d0       	rcall	.+140    	; 0x18e <BackLED>
			MotorDir(RWD,RWD);
 102:	60 e1       	ldi	r22, 0x10	; 16
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	4e d0       	rcall	.+156    	; 0x1a4 <MotorDir>
			MotorSpeed(120,120);
 108:	68 e7       	ldi	r22, 0x78	; 120
 10a:	88 e7       	ldi	r24, 0x78	; 120
 10c:	57 d0       	rcall	.+174    	; 0x1bc <MotorSpeed>
 10e:	02 e3       	ldi	r16, 0x32	; 50
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	84 e2       	ldi	r24, 0x24	; 36
 114:	4b d1       	rcall	.+662    	; 0x3ac <sleep>
 116:	01 50       	subi	r16, 0x01	; 1
 118:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0xca>
			msleep(50);
			MotorDir(BREAK,BREAK);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	41 d0       	rcall	.+130    	; 0x1a4 <MotorDir>
		
			
			//~ }	
	
			
		}
 122:	9c cf       	rjmp	.-200    	; 0x5c <main+0x14>
		
		if (left>255){
			left=254;
		}
			
		if (right>255){
 124:	6f 3f       	cpi	r22, 0xFF	; 255
 126:	71 05       	cpc	r23, r1
 128:	09 f0       	breq	.+2      	; 0x12c <main+0xe4>
 12a:	24 f4       	brge	.+8      	; 0x134 <main+0xec>
		left  = ((int)lineData[LEFT]+60)  / 6;
		right = ((int)lineData[RIGHT]	) / 6;	
			
		
		if (left>255){
			left=254;
 12c:	9e ef       	ldi	r25, 0xFE	; 254
 12e:	e9 2e       	mov	r14, r25
 130:	f1 2c       	mov	r15, r1
 132:	b4 cf       	rjmp	.-152    	; 0x9c <main+0x54>
		}
			
		if (right>255){
			right=254;
 134:	0e ef       	ldi	r16, 0xFE	; 254
 136:	10 e0       	ldi	r17, 0x00	; 0
		left  = ((int)lineData[LEFT]+60)  / 6;
		right = ((int)lineData[RIGHT]	) / 6;	
			
		
		if (left>255){
			left=254;
 138:	8e ef       	ldi	r24, 0xFE	; 254
 13a:	e8 2e       	mov	r14, r24
 13c:	f1 2c       	mov	r15, r1
 13e:	bd cf       	rjmp	.-134    	; 0xba <main+0x72>

00000140 <Init>:
 140:	13 d1       	rcall	.+550    	; 0x368 <Timer2Init>
 142:	43 d0       	rcall	.+134    	; 0x1ca <MotorInit>
 144:	18 d0       	rcall	.+48     	; 0x176 <LEDInit>
 146:	47 d1       	rcall	.+654    	; 0x3d6 <ADCInit>
 148:	c1 d0       	rcall	.+386    	; 0x2cc <SwitchInit>
 14a:	78 94       	sei
 14c:	08 95       	ret

0000014e <StatusLED>:
 14e:	c0 98       	cbi	0x18, 0	; 24
 150:	92 98       	cbi	0x12, 2	; 18
 152:	80 fd       	sbrc	r24, 0
 154:	c0 9a       	sbi	0x18, 0	; 24
 156:	81 fd       	sbrc	r24, 1
 158:	92 9a       	sbi	0x12, 2	; 18
 15a:	08 95       	ret

0000015c <BackLEDFast>:
 15c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 15e:	f8 94       	cli
 160:	88 23       	and	r24, r24
 162:	19 f0       	breq	.+6      	; 0x16a <BackLEDFast+0xe>
 164:	97 98       	cbi	0x12, 7	; 18
 166:	a1 9a       	sbi	0x14, 1	; 20
 168:	a0 9a       	sbi	0x14, 0	; 20
 16a:	95 b3       	in	r25, 0x15	; 21
 16c:	9c 7f       	andi	r25, 0xFC	; 252
 16e:	98 2b       	or	r25, r24
 170:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 172:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 174:	08 95       	ret

00000176 <LEDInit>:
 176:	b8 9a       	sbi	0x17, 0	; 23
 178:	81 b3       	in	r24, 0x11	; 17
 17a:	84 6c       	ori	r24, 0xC4	; 196
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	96 98       	cbi	0x12, 6	; 18
 180:	97 98       	cbi	0x12, 7	; 18
 182:	a1 9a       	sbi	0x14, 1	; 20
 184:	a0 9a       	sbi	0x14, 0	; 20
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	e9 df       	rcall	.-46     	; 0x15c <BackLEDFast>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	e0 cf       	rjmp	.-64     	; 0x14e <StatusLED>

0000018e <BackLED>:
 18e:	88 23       	and	r24, r24
 190:	11 f0       	breq	.+4      	; 0x196 <BackLED+0x8>
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	01 c0       	rjmp	.+2      	; 0x198 <BackLED+0xa>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	61 11       	cpse	r22, r1
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <BackLED+0x12>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	89 2b       	or	r24, r25
 1a2:	dc cf       	rjmp	.-72     	; 0x15c <BackLEDFast>

000001a4 <MotorDir>:
 1a4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1a6:	f8 94       	cli
 1a8:	92 b3       	in	r25, 0x12	; 18
 1aa:	9f 7c       	andi	r25, 0xCF	; 207
 1ac:	89 2b       	or	r24, r25
 1ae:	82 bb       	out	0x12, r24	; 18
 1b0:	88 b3       	in	r24, 0x18	; 24
 1b2:	8f 7c       	andi	r24, 0xCF	; 207
 1b4:	68 2b       	or	r22, r24
 1b6:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1b8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1ba:	08 95       	ret

000001bc <MotorSpeed>:
 1bc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1be:	f8 94       	cli
 1c0:	1b bc       	out	0x2b, r1	; 43
 1c2:	8a bd       	out	0x2a, r24	; 42
 1c4:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1c6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 1c8:	08 95       	ret

000001ca <MotorInit>:
 1ca:	87 b3       	in	r24, 0x17	; 23
 1cc:	86 63       	ori	r24, 0x36	; 54
 1ce:	87 bb       	out	0x17, r24	; 23
 1d0:	81 b3       	in	r24, 0x11	; 17
 1d2:	80 63       	ori	r24, 0x30	; 48
 1d4:	81 bb       	out	0x11, r24	; 17
 1d6:	81 ea       	ldi	r24, 0xA1	; 161
 1d8:	8f bd       	out	0x2f, r24	; 47
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	8e bd       	out	0x2e, r24	; 46
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	83 7c       	andi	r24, 0xC3	; 195
 1e2:	89 bf       	out	0x39, r24	; 57
 1e4:	60 e2       	ldi	r22, 0x20	; 32
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	dd df       	rcall	.-70     	; 0x1a4 <MotorDir>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	e6 cf       	rjmp	.-52     	; 0x1bc <MotorSpeed>

000001f0 <LineData>:
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
 1f8:	f4 d0       	rcall	.+488    	; 0x3e2 <__ADCBlockEnter>
 1fa:	18 2f       	mov	r17, r24
 1fc:	83 e4       	ldi	r24, 0x43	; 67
 1fe:	19 d1       	rcall	.+562    	; 0x432 <ADCSelectChannel>
 200:	21 d1       	rcall	.+578    	; 0x444 <ADCMeasure>
 202:	24 b1       	in	r18, 0x04	; 4
 204:	35 b1       	in	r19, 0x05	; 5
 206:	39 83       	std	Y+1, r19	; 0x01
 208:	28 83       	st	Y, r18
 20a:	82 e4       	ldi	r24, 0x42	; 66
 20c:	12 d1       	rcall	.+548    	; 0x432 <ADCSelectChannel>
 20e:	1a d1       	rcall	.+564    	; 0x444 <ADCMeasure>
 210:	24 b1       	in	r18, 0x04	; 4
 212:	35 b1       	in	r19, 0x05	; 5
 214:	3b 83       	std	Y+3, r19	; 0x03
 216:	2a 83       	std	Y+2, r18	; 0x02
 218:	81 2f       	mov	r24, r17
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	f2 c0       	rjmp	.+484    	; 0x406 <__ADCBlockLeave>

00000222 <__vector_14>:
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
 244:	87 b1       	in	r24, 0x07	; 7
 246:	78 94       	sei
 248:	81 36       	cpi	r24, 0x61	; 97
 24a:	19 f0       	breq	.+6      	; 0x252 <__vector_14+0x30>
 24c:	83 36       	cpi	r24, 0x63	; 99
 24e:	a1 f0       	breq	.+40     	; 0x278 <__vector_14+0x56>
 250:	27 c0       	rjmp	.+78     	; 0x2a0 <__vector_14+0x7e>
 252:	80 91 63 00 	lds	r24, 0x0063
 256:	82 fd       	sbrc	r24, 2
 258:	02 c0       	rjmp	.+4      	; 0x25e <__vector_14+0x3c>
 25a:	80 e6       	ldi	r24, 0x60	; 96
 25c:	01 c0       	rjmp	.+2      	; 0x260 <__vector_14+0x3e>
 25e:	82 e6       	ldi	r24, 0x62	; 98
 260:	f8 94       	cli
 262:	95 b1       	in	r25, 0x05	; 5
 264:	90 93 65 00 	sts	0x0065, r25
 268:	90 91 60 00 	lds	r25, 0x0060
 26c:	90 93 64 00 	sts	0x0064, r25
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	90 93 68 00 	sts	0x0068, r25
 276:	12 c0       	rjmp	.+36     	; 0x29c <__vector_14+0x7a>
 278:	80 91 63 00 	lds	r24, 0x0063
 27c:	80 ff       	sbrs	r24, 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_14+0x62>
 280:	80 e6       	ldi	r24, 0x60	; 96
 282:	01 c0       	rjmp	.+2      	; 0x286 <__vector_14+0x64>
 284:	82 e6       	ldi	r24, 0x62	; 98
 286:	f8 94       	cli
 288:	95 b1       	in	r25, 0x05	; 5
 28a:	90 93 67 00 	sts	0x0067, r25
 28e:	90 91 60 00 	lds	r25, 0x0060
 292:	90 93 66 00 	sts	0x0066, r25
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	90 93 62 00 	sts	0x0062, r25
 29c:	78 94       	sei
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <__vector_14+0x86>
 2a0:	95 b1       	in	r25, 0x05	; 5
 2a2:	90 93 60 00 	sts	0x0060, r25
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	d1 d0       	rcall	.+418    	; 0x44c <ADCInterruptEnable>
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <SwitchInit>:
 2cc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2ce:	f8 94       	cli
 2d0:	8b b7       	in	r24, 0x3b	; 59
 2d2:	8f 77       	andi	r24, 0x7F	; 127
 2d4:	8b bf       	out	0x3b, r24	; 59
 2d6:	85 b7       	in	r24, 0x35	; 53
 2d8:	87 7f       	andi	r24, 0xF7	; 247
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2de:	9f bf       	out	0x3f, r25	; 63
 2e0:	a4 98       	cbi	0x14, 4	; 20
 2e2:	85 b3       	in	r24, 0x15	; 21
 2e4:	80 71       	andi	r24, 0x10	; 16
 2e6:	85 bb       	out	0x15, r24	; 21
 2e8:	8b 98       	cbi	0x11, 3	; 17
 2ea:	93 98       	cbi	0x12, 3	; 18
 2ec:	10 92 69 00 	sts	0x0069, r1
 2f0:	08 95       	ret

000002f2 <PollSwitch>:
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	93 9a       	sbi	0x12, 3	; 18
 2fc:	8b 9a       	sbi	0x11, 3	; 17
 2fe:	71 d0       	rcall	.+226    	; 0x3e2 <__ADCBlockEnter>
 300:	08 2f       	mov	r16, r24
 302:	84 e4       	ldi	r24, 0x44	; 68
 304:	96 d0       	rcall	.+300    	; 0x432 <ADCSelectChannel>
 306:	14 e0       	ldi	r17, 0x04	; 4
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	9b d0       	rcall	.+310    	; 0x444 <ADCMeasure>
 30e:	24 b1       	in	r18, 0x04	; 4
 310:	35 b1       	in	r19, 0x05	; 5
 312:	c2 0f       	add	r28, r18
 314:	d3 1f       	adc	r29, r19
 316:	11 50       	subi	r17, 0x01	; 1
 318:	c9 f7       	brne	.-14     	; 0x30c <PollSwitch+0x1a>
 31a:	80 2f       	mov	r24, r16
 31c:	74 d0       	rcall	.+232    	; 0x406 <__ADCBlockLeave>
 31e:	8b 98       	cbi	0x11, 3	; 17
 320:	93 98       	cbi	0x12, 3	; 18
 322:	be 01       	movw	r22, r28
 324:	76 95       	lsr	r23
 326:	67 95       	ror	r22
 328:	76 95       	lsr	r23
 32a:	67 95       	ror	r22
 32c:	cb 01       	movw	r24, r22
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	98 50       	subi	r25, 0x08	; 8
 334:	a0 d0       	rcall	.+320    	; 0x476 <__udivmodhi4>
 336:	82 ec       	ldi	r24, 0xC2	; 194
 338:	86 0f       	add	r24, r22
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <__vector_2>:
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 69 00 	sts	0x0069, r24
 356:	8b b7       	in	r24, 0x3b	; 59
 358:	8f 77       	andi	r24, 0x7F	; 127
 35a:	8b bf       	out	0x3b, r24	; 59
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <Timer2Init>:
 368:	12 bc       	out	0x22, r1	; 34
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	85 bd       	out	0x25, r24	; 37
 36e:	89 b7       	in	r24, 0x39	; 57
 370:	80 64       	ori	r24, 0x40	; 64
 372:	89 bf       	out	0x39, r24	; 57
 374:	81 e9       	ldi	r24, 0x91	; 145
 376:	83 bd       	out	0x23, r24	; 35
 378:	85 b5       	in	r24, 0x25	; 37
 37a:	87 78       	andi	r24, 0x87	; 135
 37c:	85 bd       	out	0x25, r24	; 37
 37e:	bb 9a       	sbi	0x17, 3	; 23
 380:	c3 98       	cbi	0x18, 3	; 24
 382:	08 95       	ret

00000384 <__vector_4>:
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	8f 93       	push	r24
 390:	84 b5       	in	r24, 0x24	; 36
 392:	8b 5d       	subi	r24, 0xDB	; 219
 394:	84 bd       	out	0x24, r24	; 36
 396:	80 91 6a 00 	lds	r24, 0x006A
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 6a 00 	sts	0x006A, r24
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <sleep>:
 3ac:	f8 94       	cli
 3ae:	95 b7       	in	r25, 0x35	; 53
 3b0:	9f 70       	andi	r25, 0x0F	; 15
 3b2:	90 68       	ori	r25, 0x80	; 128
 3b4:	95 bf       	out	0x35, r25	; 53
 3b6:	78 94       	sei
 3b8:	90 91 6a 00 	lds	r25, 0x006A
 3bc:	89 0f       	add	r24, r25
 3be:	90 91 6a 00 	lds	r25, 0x006A
 3c2:	98 17       	cp	r25, r24
 3c4:	11 f0       	breq	.+4      	; 0x3ca <sleep+0x1e>
 3c6:	88 95       	sleep
 3c8:	fa cf       	rjmp	.-12     	; 0x3be <sleep+0x12>
 3ca:	f8 94       	cli
 3cc:	85 b7       	in	r24, 0x35	; 53
 3ce:	8f 77       	andi	r24, 0x7F	; 127
 3d0:	85 bf       	out	0x35, r24	; 53
 3d2:	78 94       	sei
 3d4:	08 95       	ret

000003d6 <ADCInit>:
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	80 93 61 00 	sts	0x0061, r24
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	86 b9       	out	0x06, r24	; 6
 3e0:	08 95       	ret

000003e2 <__ADCBlockEnter>:
 3e2:	2f b7       	in	r18, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	87 b1       	in	r24, 0x07	; 7
 3e8:	96 b1       	in	r25, 0x06	; 6
 3ea:	39 2f       	mov	r19, r25
 3ec:	38 78       	andi	r19, 0x88	; 136
 3ee:	31 f0       	breq	.+12     	; 0x3fc <__ADCBlockEnter+0x1a>
 3f0:	93 ff       	sbrs	r25, 3
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__ADCBlockEnter+0x1c>
 3f4:	80 93 61 00 	sts	0x0061, r24
 3f8:	86 e8       	ldi	r24, 0x86	; 134
 3fa:	86 b9       	out	0x06, r24	; 6
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	2f bf       	out	0x3f, r18	; 63
 400:	36 99       	sbic	0x06, 6	; 6
 402:	fe cf       	rjmp	.-4      	; 0x400 <__ADCBlockEnter+0x1e>
 404:	08 95       	ret

00000406 <__ADCBlockLeave>:
 406:	3f b7       	in	r19, 0x3f	; 63
 408:	f8 94       	cli
 40a:	8f 3f       	cpi	r24, 0xFF	; 255
 40c:	31 f4       	brne	.+12     	; 0x41a <__ADCBlockLeave+0x14>
 40e:	80 91 61 00 	lds	r24, 0x0061
 412:	8f 3f       	cpi	r24, 0xFF	; 255
 414:	51 f0       	breq	.+20     	; 0x42a <__ADCBlockLeave+0x24>
 416:	2e ed       	ldi	r18, 0xDE	; 222
 418:	01 c0       	rjmp	.+2      	; 0x41c <__ADCBlockLeave+0x16>
 41a:	26 ed       	ldi	r18, 0xD6	; 214
 41c:	97 b1       	in	r25, 0x07	; 7
 41e:	98 27       	eor	r25, r24
 420:	90 7c       	andi	r25, 0xC0	; 192
 422:	09 f0       	breq	.+2      	; 0x426 <__ADCBlockLeave+0x20>
 424:	16 b8       	out	0x06, r1	; 6
 426:	87 b9       	out	0x07, r24	; 7
 428:	01 c0       	rjmp	.+2      	; 0x42c <__ADCBlockLeave+0x26>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	26 b9       	out	0x06, r18	; 6
 42e:	3f bf       	out	0x3f, r19	; 63
 430:	08 95       	ret

00000432 <ADCSelectChannel>:
 432:	97 b1       	in	r25, 0x07	; 7
 434:	98 27       	eor	r25, r24
 436:	90 7c       	andi	r25, 0xC0	; 192
 438:	09 f0       	breq	.+2      	; 0x43c <ADCSelectChannel+0xa>
 43a:	16 b8       	out	0x06, r1	; 6
 43c:	96 e8       	ldi	r25, 0x86	; 134
 43e:	96 b9       	out	0x06, r25	; 6
 440:	87 b9       	out	0x07, r24	; 7
 442:	08 95       	ret

00000444 <ADCMeasure>:
 444:	36 9a       	sbi	0x06, 6	; 6
 446:	36 99       	sbic	0x06, 6	; 6
 448:	fe cf       	rjmp	.-4      	; 0x446 <ADCMeasure+0x2>
 44a:	08 95       	ret

0000044c <ADCInterruptEnable>:
 44c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 44e:	f8 94       	cli
 450:	96 b1       	in	r25, 0x06	; 6
 452:	97 ff       	sbrs	r25, 7
 454:	02 c0       	rjmp	.+4      	; 0x45a <ADCInterruptEnable+0xe>
 456:	93 ff       	sbrs	r25, 3
 458:	0a c0       	rjmp	.+20     	; 0x46e <__stack+0xf>
 45a:	97 b1       	in	r25, 0x07	; 7
 45c:	98 27       	eor	r25, r24
 45e:	90 7c       	andi	r25, 0xC0	; 192
 460:	09 f0       	breq	.+2      	; 0x464 <__stack+0x5>
 462:	16 b8       	out	0x06, r1	; 6
 464:	36 99       	sbic	0x06, 6	; 6
 466:	16 b8       	out	0x06, r1	; 6
 468:	87 b9       	out	0x07, r24	; 7
 46a:	9e ed       	ldi	r25, 0xDE	; 222
 46c:	96 b9       	out	0x06, r25	; 6
 46e:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 472:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 474:	08 95       	ret

00000476 <__udivmodhi4>:
 476:	aa 1b       	sub	r26, r26
 478:	bb 1b       	sub	r27, r27
 47a:	51 e1       	ldi	r21, 0x11	; 17
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__udivmodhi4_ep>

0000047e <__udivmodhi4_loop>:
 47e:	aa 1f       	adc	r26, r26
 480:	bb 1f       	adc	r27, r27
 482:	a6 17       	cp	r26, r22
 484:	b7 07       	cpc	r27, r23
 486:	10 f0       	brcs	.+4      	; 0x48c <__udivmodhi4_ep>
 488:	a6 1b       	sub	r26, r22
 48a:	b7 0b       	sbc	r27, r23

0000048c <__udivmodhi4_ep>:
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	5a 95       	dec	r21
 492:	a9 f7       	brne	.-22     	; 0x47e <__udivmodhi4_loop>
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	bc 01       	movw	r22, r24
 49a:	cd 01       	movw	r24, r26
 49c:	08 95       	ret

0000049e <__divmodhi4>:
 49e:	97 fb       	bst	r25, 7
 4a0:	07 2e       	mov	r0, r23
 4a2:	16 f4       	brtc	.+4      	; 0x4a8 <__divmodhi4+0xa>
 4a4:	00 94       	com	r0
 4a6:	06 d0       	rcall	.+12     	; 0x4b4 <__divmodhi4_neg1>
 4a8:	77 fd       	sbrc	r23, 7
 4aa:	08 d0       	rcall	.+16     	; 0x4bc <__divmodhi4_neg2>
 4ac:	e4 df       	rcall	.-56     	; 0x476 <__udivmodhi4>
 4ae:	07 fc       	sbrc	r0, 7
 4b0:	05 d0       	rcall	.+10     	; 0x4bc <__divmodhi4_neg2>
 4b2:	3e f4       	brtc	.+14     	; 0x4c2 <__divmodhi4_exit>

000004b4 <__divmodhi4_neg1>:
 4b4:	90 95       	com	r25
 4b6:	81 95       	neg	r24
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	08 95       	ret

000004bc <__divmodhi4_neg2>:
 4bc:	70 95       	com	r23
 4be:	61 95       	neg	r22
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255

000004c2 <__divmodhi4_exit>:
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
