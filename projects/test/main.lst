   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        ****  * Beschreibt hier was euer Programm macht!
   3:main.c        ****  */
   4:main.c        **** #include <asuro/asuro.h>
   5:main.c        **** 
   6:main.c        **** void main(void) {
  16               		.loc 1 6 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  96	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  97	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               		 ; SP -= 4	 ;  101	*addhi3_sp	[length = 2]
  27 0004 00D0      		rcall .
  28 0006 00D0      		rcall .
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 8
  31 0008 CDB7      		in r28,__SP_L__	 ;  102	*movhi/8	[length = 2]
  32 000a DEB7      		in r29,__SP_H__
  33               	.LCFI3:
  34               		.cfi_def_cfa_register 28
  35               	/* prologue: function */
  36               	/* frame size = 4 */
  37               	/* stack size = 6 */
  38               	.L__stack_usage = 6
  39               	.LVL0:
   7:main.c        **** 	int white[] = {0, 0};
   8:main.c        **** 	int black[] = {0, 0};
   9:main.c        **** 	uint16_t data[]  = {0, 0};
  40               		.loc 1 9 0
  41 000c 1A82      		std Y+2,__zero_reg__	 ;  9	*movhi/4	[length = 2]
  42 000e 1982      		std Y+1,__zero_reg__
  43 0010 1C82      		std Y+4,__zero_reg__	 ;  10	*movhi/4	[length = 2]
  44 0012 1B82      		std Y+3,__zero_reg__
  10:main.c        **** 
  11:main.c        ****     Init();
  45               		.loc 1 11 0
  46 0014 00D0      		rcall Init	 ;  11	call_insn/2	[length = 1]
  47               	.LVL1:
  12:main.c        ****     
  13:main.c        ****     MotorDir(FWD,FWD);
  48               		.loc 1 13 0
  49 0016 60E2      		ldi r22,lo8(32)	 ;  12	movqi_insn/2	[length = 1]
  50 0018 80E2      		ldi r24,lo8(32)	 ;  13	movqi_insn/2	[length = 1]
  51 001a 00D0      		rcall MotorDir	 ;  14	call_insn/2	[length = 1]
  52               	.LVL2:
  14:main.c        ****     MotorSpeed(80,80);
  53               		.loc 1 14 0
  54 001c 60E5      		ldi r22,lo8(80)	 ;  15	movqi_insn/2	[length = 1]
  55 001e 80E5      		ldi r24,lo8(80)	 ;  16	movqi_insn/2	[length = 1]
  56 0020 00D0      		rcall MotorSpeed	 ;  17	call_insn/2	[length = 1]
  57               	.LVL3:
  15:main.c        ****     
  16:main.c        ****     char switches = PollSwitch();
  58               		.loc 1 16 0
  59 0022 00D0      		rcall PollSwitch	 ;  18	call_value_insn/2	[length = 1]
  60               	.LVL4:
  17:main.c        **** 	int start_white = 0;
  18:main.c        **** 	int start_black = 0;
  19:main.c        **** 		
  20:main.c        **** 	switches &= 0b00111111;
  21:main.c        **** 		
  22:main.c        **** 	LineData(data);
  61               		.loc 1 22 0
  62 0024 CE01      		movw r24,r28	 ;  92	*movhi/1	[length = 1]
  63 0026 0196      		adiw r24,1	 ;  23	*addhi3/3	[length = 1]
  64 0028 00D0      		rcall LineData	 ;  24	call_insn/2	[length = 1]
  65               	.LVL5:
  23:main.c        **** 	if(!start_white) {
  24:main.c        **** 	if (switches = 32) {
  25:main.c        **** 		LineData(data);
  66               		.loc 1 25 0
  67 002a CE01      		movw r24,r28	 ;  93	*movhi/1	[length = 1]
  68 002c 0196      		adiw r24,1	 ;  26	*addhi3/3	[length = 1]
  69 002e 00D0      		rcall LineData	 ;  27	call_insn/2	[length = 1]
  70               	.LVL6:
  26:main.c        **** 		white[RIGHT] = data[RIGHT];
  27:main.c        **** 		white[LEFT] = data[LEFT];
  28:main.c        **** 		start_white = 1;
  29:main.c        **** 	 }
  30:main.c        **** }
  31:main.c        **** 	if(!start_black) {
  32:main.c        **** 	if(switches = 16) {
  33:main.c        **** 		LineData(data);
  71               		.loc 1 33 0
  72 0030 CE01      		movw r24,r28	 ;  94	*movhi/1	[length = 1]
  73 0032 0196      		adiw r24,1	 ;  35	*addhi3/3	[length = 1]
  74 0034 00D0      		rcall LineData	 ;  36	call_insn/2	[length = 1]
  75               	.LVL7:
  76               	.L5:
  34:main.c        **** 		black[RIGHT] = data[RIGHT];
  35:main.c        **** 		black[LEFT] = black[LEFT];
  36:main.c        **** 		start_black = 1;
  37:main.c        **** 	}
  38:main.c        **** }
  39:main.c        ****     if(switches = 8) {
  40:main.c        **** 		MotorDir(FWD,FWD);
  77               		.loc 1 40 0
  78 0036 60E2      		ldi r22,lo8(32)	 ;  42	movqi_insn/2	[length = 1]
  79 0038 80E2      		ldi r24,lo8(32)	 ;  43	movqi_insn/2	[length = 1]
  80 003a 00D0      		rcall MotorDir	 ;  44	call_insn/2	[length = 1]
  81               	.LVL8:
  41:main.c        **** 		MotorSpeed(85,85);
  82               		.loc 1 41 0
  83 003c 65E5      		ldi r22,lo8(85)	 ;  45	movqi_insn/2	[length = 1]
  84 003e 85E5      		ldi r24,lo8(85)	 ;  46	movqi_insn/2	[length = 1]
  85 0040 00D0      		rcall MotorSpeed	 ;  47	call_insn/2	[length = 1]
  86               	.LVL9:
  87               	.L2:
  42:main.c        **** 	}
  43:main.c        ****        
  44:main.c        ****     
  45:main.c        ****     while (1) {
  46:main.c        **** 		LineData(data);
  88               		.loc 1 46 0
  89 0042 CE01      		movw r24,r28	 ;  95	*movhi/1	[length = 1]
  90 0044 0196      		adiw r24,1	 ;  53	*addhi3/3	[length = 1]
  91 0046 00D0      		rcall LineData	 ;  54	call_insn/2	[length = 1]
  92               	.LVL10:
  47:main.c        **** 	
  48:main.c        **** 		if(data[RIGHT] == start_white) {
  93               		.loc 1 48 0
  94 0048 8B81      		ldd r24,Y+3	 ;  55	*movhi/3	[length = 2]
  95 004a 9C81      		ldd r25,Y+4
  96 004c 0197      		sbiw r24,1	 ;  56	*cmphi/6	[length = 1]
  97 004e 01F0      		breq .L5	 ;  57	branch	[length = 1]
  49:main.c        **** 		   MotorDir(FWD,FWD);
  50:main.c        **** 		   MotorSpeed(85,85);
  51:main.c        **** 		} else {
  52:main.c        **** 		   GoTurn(0,90,80); 
  98               		.loc 1 52 0
  99 0050 40E5      		ldi r20,lo8(80)	 ;  70	movqi_insn/2	[length = 1]
 100 0052 6AE5      		ldi r22,lo8(90)	 ;  71	*movhi/5	[length = 2]
 101 0054 70E0      		ldi r23,0
 102 0056 80E0      		ldi r24,0	 ;  72	*movhi/2	[length = 2]
 103 0058 90E0      		ldi r25,0
 104 005a 00D0      		rcall GoTurn	 ;  73	call_insn/2	[length = 1]
 105               	.LVL11:
 106 005c 00C0      		rjmp .L2	 ;  111	jump	[length = 1]
 107               		.cfi_endproc
 108               	.LFE2:
 110               		.text
 111               	.Letext0:
 112               		.file 2 "/usr/lib/avr/include/stdint.h"
 113               		.file 3 "../../libtinyasuro/inc/asuro/motor.h"
 114               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 115               		.file 5 "../../libtinyasuro/inc/asuro/asuro.h"
 116               		.file 6 "../../libtinyasuro/inc/asuro/switches.h"
 117               		.file 7 "../../libtinyasuro/inc/asuro/encoder.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccINq4WD.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccINq4WD.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccINq4WD.s:4      *ABS*:0000003f __SREG__
     /tmp/ccINq4WD.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccINq4WD.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccINq4WD.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
MotorDir
MotorSpeed
PollSwitch
LineData
GoTurn
