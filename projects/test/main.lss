
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000061a  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000006ae  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a3d  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d30  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a7  00000000  00000000  0000304d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000454  00000000  00000000  000039f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000762  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e4b  00000000  00000000  000045aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  000053f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	3c c2       	rjmp	.+1144   	; 0x47e <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	5a c2       	rjmp	.+1204   	; 0x4be <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	9f c1       	rjmp	.+830    	; 0x35c <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 37       	cpi	r26, 0x72	; 114
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	e8 c2       	rjmp	.+1488   	; 0x616 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
/**
 * Beschreibt hier was euer Programm macht!
 */
#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
  54:	1a 82       	std	Y+2, r1	; 0x02
  56:	19 82       	std	Y+1, r1	; 0x01
  58:	1c 82       	std	Y+4, r1	; 0x04
  5a:	1b 82       	std	Y+3, r1	; 0x03
	int turns = 0;

    Init();
  5c:	43 d0       	rcall	.+134    	; 0xe4 <Init>
    
    MotorDir(FWD,FWD);
  5e:	60 e2       	ldi	r22, 0x20	; 32
  60:	80 e2       	ldi	r24, 0x20	; 32
  62:	3d d1       	rcall	.+634    	; 0x2de <MotorDir>
    MotorSpeed(80,80);
  64:	60 e5       	ldi	r22, 0x50	; 80
  66:	80 e5       	ldi	r24, 0x50	; 80
  68:	46 d1       	rcall	.+652    	; 0x2f6 <MotorSpeed>
    
    char switches = PollSwitch();
  6a:	e0 d1       	rcall	.+960    	; 0x42c <PollSwitch>
		
	switches &= 0b00111111;
		
	LineData(data);
  6c:	ce 01       	movw	r24, r28
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	5c d1       	rcall	.+696    	; 0x32a <LineData>
	white[LEFT] = data[LEFT] - 200;
  72:	c9 80       	ldd	r12, Y+1	; 0x01
  74:	da 80       	ldd	r13, Y+2	; 0x02
  76:	88 ec       	ldi	r24, 0xC8	; 200
  78:	c8 1a       	sub	r12, r24
  7a:	d1 08       	sbc	r13, r1
	white[RIGHT] = data[RIGHT] - 200;
  7c:	ab 80       	ldd	r10, Y+3	; 0x03
  7e:	bc 80       	ldd	r11, Y+4	; 0x04
  80:	88 ec       	ldi	r24, 0xC8	; 200
  82:	a8 1a       	sub	r10, r24
  84:	b1 08       	sbc	r11, r1
#include <asuro/asuro.h>

void main(void) {
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
	int turns = 0;
  86:	00 e0       	ldi	r16, 0x00	; 0
  88:	10 e0       	ldi	r17, 0x00	; 0
	LineData(data);
	white[LEFT] = data[LEFT] - 200;
	white[RIGHT] = data[RIGHT] - 200;
	
	while(1) {
		LineData(data);
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	4d d1       	rcall	.+666    	; 0x32a <LineData>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	9a 81       	ldd	r25, Y+2	; 0x02
  94:	8c 15       	cp	r24, r12
  96:	9d 05       	cpc	r25, r13
  98:	c8 f4       	brcc	.+50     	; 0xcc <main+0x84>
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	9c 81       	ldd	r25, Y+4	; 0x04
  9e:	8a 15       	cp	r24, r10
  a0:	9b 05       	cpc	r25, r11
  a2:	a0 f4       	brcc	.+40     	; 0xcc <main+0x84>
			GoTurn(0,90,80);
  a4:	40 e5       	ldi	r20, 0x50	; 80
  a6:	6a e5       	ldi	r22, 0x5A	; 90
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	80 d0       	rcall	.+256    	; 0x1b0 <GoTurn>
			turns++;
			if(turns == 2) {
  b0:	01 30       	cpi	r16, 0x01	; 1
  b2:	11 05       	cpc	r17, r1
  b4:	49 f4       	brne	.+18     	; 0xc8 <main+0x80>
				turns = 0;
				GoTurn(0,180,80);
  b6:	40 e5       	ldi	r20, 0x50	; 80
  b8:	64 eb       	ldi	r22, 0xB4	; 180
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	77 d0       	rcall	.+238    	; 0x1b0 <GoTurn>
		LineData(data);
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
			GoTurn(0,90,80);
			turns++;
			if(turns == 2) {
				turns = 0;
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x84>
  c8:	01 e0       	ldi	r16, 0x01	; 1
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	e8 2e       	mov	r14, r24
  d0:	f1 2c       	mov	r15, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  d2:	84 e2       	ldi	r24, 0x24	; 36
  d4:	08 d2       	rcall	.+1040   	; 0x4e6 <sleep>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	e8 1a       	sub	r14, r24
  da:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  dc:	e1 14       	cp	r14, r1
  de:	f1 04       	cpc	r15, r1
  e0:	c1 f7       	brne	.-16     	; 0xd2 <main+0x8a>
  e2:	d3 cf       	rjmp	.-90     	; 0x8a <main+0x42>

000000e4 <Init>:
  e4:	de d1       	rcall	.+956    	; 0x4a2 <Timer2Init>
  e6:	0e d1       	rcall	.+540    	; 0x304 <MotorInit>
  e8:	ee d0       	rcall	.+476    	; 0x2c6 <LEDInit>
  ea:	1f d2       	rcall	.+1086   	; 0x52a <ADCInit>
  ec:	8c d1       	rcall	.+792    	; 0x406 <SwitchInit>
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <EncoderPoll>:
  f2:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  f4:	f8 94       	cli
  f6:	20 91 6f 00 	lds	r18, 0x006F
  fa:	10 92 6f 00 	sts	0x006F, r1
  fe:	80 91 6b 00 	lds	r24, 0x006B
 102:	90 91 6c 00 	lds	r25, 0x006C
 106:	e8 2f       	mov	r30, r24
 108:	79 2f       	mov	r23, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 10a:	3f bf       	out	0x3f, r19	; 63
 10c:	22 23       	and	r18, r18
 10e:	09 f4       	brne	.+2      	; 0x112 <EncoderPoll+0x20>
 110:	45 c0       	rjmp	.+138    	; 0x19c <EncoderPoll+0xaa>
 112:	40 91 60 00 	lds	r20, 0x0060
 116:	60 91 62 00 	lds	r22, 0x0062
 11a:	20 91 65 00 	lds	r18, 0x0065
 11e:	30 91 66 00 	lds	r19, 0x0066
 122:	50 91 61 00 	lds	r21, 0x0061
 126:	41 fd       	sbrc	r20, 1
 128:	08 c0       	rjmp	.+16     	; 0x13a <EncoderPoll+0x48>
 12a:	96 17       	cp	r25, r22
 12c:	88 f0       	brcs	.+34     	; 0x150 <EncoderPoll+0x5e>
 12e:	f9 2f       	mov	r31, r25
 130:	f6 1b       	sub	r31, r22
 132:	ff 31       	cpi	r31, 0x1F	; 31
 134:	60 f0       	brcs	.+24     	; 0x14e <EncoderPoll+0x5c>
 136:	42 60       	ori	r20, 0x02	; 2
 138:	07 c0       	rjmp	.+14     	; 0x148 <EncoderPoll+0x56>
 13a:	69 17       	cp	r22, r25
 13c:	48 f0       	brcs	.+18     	; 0x150 <EncoderPoll+0x5e>
 13e:	f6 2f       	mov	r31, r22
 140:	f9 1b       	sub	r31, r25
 142:	ff 31       	cpi	r31, 0x1F	; 31
 144:	20 f0       	brcs	.+8      	; 0x14e <EncoderPoll+0x5c>
 146:	4d 7f       	andi	r20, 0xFD	; 253
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	01 c0       	rjmp	.+2      	; 0x150 <EncoderPoll+0x5e>
 14e:	76 2f       	mov	r23, r22
 150:	30 93 66 00 	sts	0x0066, r19
 154:	20 93 65 00 	sts	0x0065, r18
 158:	20 91 67 00 	lds	r18, 0x0067
 15c:	30 91 68 00 	lds	r19, 0x0068
 160:	40 ff       	sbrs	r20, 0
 162:	08 c0       	rjmp	.+16     	; 0x174 <EncoderPoll+0x82>
 164:	5e 17       	cp	r21, r30
 166:	78 f0       	brcs	.+30     	; 0x186 <EncoderPoll+0x94>
 168:	65 2f       	mov	r22, r21
 16a:	68 1b       	sub	r22, r24
 16c:	6f 31       	cpi	r22, 0x1F	; 31
 16e:	60 f0       	brcs	.+24     	; 0x188 <EncoderPoll+0x96>
 170:	4e 7f       	andi	r20, 0xFE	; 254
 172:	07 c0       	rjmp	.+14     	; 0x182 <EncoderPoll+0x90>
 174:	e5 17       	cp	r30, r21
 176:	38 f0       	brcs	.+14     	; 0x186 <EncoderPoll+0x94>
 178:	68 2f       	mov	r22, r24
 17a:	65 1b       	sub	r22, r21
 17c:	6f 31       	cpi	r22, 0x1F	; 31
 17e:	20 f0       	brcs	.+8      	; 0x188 <EncoderPoll+0x96>
 180:	41 60       	ori	r20, 0x01	; 1
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	58 2f       	mov	r21, r24
 188:	70 93 62 00 	sts	0x0062, r23
 18c:	50 93 61 00 	sts	0x0061, r21
 190:	30 93 68 00 	sts	0x0068, r19
 194:	20 93 67 00 	sts	0x0067, r18
 198:	40 93 60 00 	sts	0x0060, r20
 19c:	08 95       	ret

0000019e <EncoderReset>:
 19e:	10 92 66 00 	sts	0x0066, r1
 1a2:	10 92 65 00 	sts	0x0065, r1
 1a6:	10 92 68 00 	sts	0x0068, r1
 1aa:	10 92 67 00 	sts	0x0067, r1
 1ae:	08 95       	ret

000001b0 <GoTurn>:
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	fc 01       	movw	r30, r24
 1c0:	8b 01       	movw	r16, r22
 1c2:	f4 2e       	mov	r15, r20
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	89 f0       	breq	.+34     	; 0x1ea <GoTurn+0x3a>
 1c8:	dc 01       	movw	r26, r24
 1ca:	97 ff       	sbrs	r25, 7
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <GoTurn+0x26>
 1ce:	aa 27       	eor	r26, r26
 1d0:	bb 27       	eor	r27, r27
 1d2:	a8 1b       	sub	r26, r24
 1d4:	b9 0b       	sbc	r27, r25
 1d6:	2c ef       	ldi	r18, 0xFC	; 252
 1d8:	3e e7       	ldi	r19, 0x7E	; 126
 1da:	0b d2       	rcall	.+1046   	; 0x5f2 <__usmulhisi3>
 1dc:	ec 01       	movw	r28, r24
 1de:	f7 ff       	sbrs	r31, 7
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <GoTurn+0x36>
 1e2:	60 e1       	ldi	r22, 0x10	; 16
 1e4:	10 c0       	rjmp	.+32     	; 0x206 <GoTurn+0x56>
 1e6:	60 e2       	ldi	r22, 0x20	; 32
 1e8:	11 c0       	rjmp	.+34     	; 0x20c <GoTurn+0x5c>
 1ea:	db 01       	movw	r26, r22
 1ec:	77 ff       	sbrs	r23, 7
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <GoTurn+0x48>
 1f0:	aa 27       	eor	r26, r26
 1f2:	bb 27       	eor	r27, r27
 1f4:	a6 1b       	sub	r26, r22
 1f6:	b7 0b       	sbc	r27, r23
 1f8:	2e ec       	ldi	r18, 0xCE	; 206
 1fa:	3b e6       	ldi	r19, 0x6B	; 107
 1fc:	fa d1       	rcall	.+1012   	; 0x5f2 <__usmulhisi3>
 1fe:	ec 01       	movw	r28, r24
 200:	17 ff       	sbrs	r17, 7
 202:	03 c0       	rjmp	.+6      	; 0x20a <GoTurn+0x5a>
 204:	60 e2       	ldi	r22, 0x20	; 32
 206:	80 e1       	ldi	r24, 0x10	; 16
 208:	02 c0       	rjmp	.+4      	; 0x20e <GoTurn+0x5e>
 20a:	60 e1       	ldi	r22, 0x10	; 16
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	67 d0       	rcall	.+206    	; 0x2de <MotorDir>
 210:	c6 df       	rcall	.-116    	; 0x19e <EncoderReset>
 212:	6f 2d       	mov	r22, r15
 214:	8f 2d       	mov	r24, r15
 216:	6f d0       	rcall	.+222    	; 0x2f6 <MotorSpeed>
 218:	df 2c       	mov	r13, r15
 21a:	ef 2c       	mov	r14, r15
 21c:	1c 16       	cp	r1, r28
 21e:	1d 06       	cpc	r1, r29
 220:	a4 f5       	brge	.+104    	; 0x28a <GoTurn+0xda>
 222:	00 91 65 00 	lds	r16, 0x0065
 226:	10 91 66 00 	lds	r17, 0x0066
 22a:	20 91 67 00 	lds	r18, 0x0067
 22e:	30 91 68 00 	lds	r19, 0x0068
 232:	f8 01       	movw	r30, r16
 234:	a9 01       	movw	r20, r18
 236:	c0 1b       	sub	r28, r16
 238:	d1 0b       	sbc	r29, r17
 23a:	20 17       	cp	r18, r16
 23c:	31 07       	cpc	r19, r17
 23e:	50 f4       	brcc	.+20     	; 0x254 <GoTurn+0xa4>
 240:	fe 14       	cp	r15, r14
 242:	18 f0       	brcs	.+6      	; 0x24a <GoTurn+0x9a>
 244:	84 ef       	ldi	r24, 0xF4	; 244
 246:	8d 15       	cp	r24, r13
 248:	18 f4       	brcc	.+6      	; 0x250 <GoTurn+0xa0>
 24a:	86 ef       	ldi	r24, 0xF6	; 246
 24c:	e8 0e       	add	r14, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <GoTurn+0xa4>
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	d8 0e       	add	r13, r24
 254:	e4 17       	cp	r30, r20
 256:	f5 07       	cpc	r31, r21
 258:	50 f4       	brcc	.+20     	; 0x26e <GoTurn+0xbe>
 25a:	fd 14       	cp	r15, r13
 25c:	18 f0       	brcs	.+6      	; 0x264 <GoTurn+0xb4>
 25e:	84 ef       	ldi	r24, 0xF4	; 244
 260:	8e 15       	cp	r24, r14
 262:	18 f4       	brcc	.+6      	; 0x26a <GoTurn+0xba>
 264:	86 ef       	ldi	r24, 0xF6	; 246
 266:	d8 0e       	add	r13, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <GoTurn+0xbe>
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	e8 0e       	add	r14, r24
 26e:	97 df       	rcall	.-210    	; 0x19e <EncoderReset>
 270:	6d 2d       	mov	r22, r13
 272:	8e 2d       	mov	r24, r14
 274:	40 d0       	rcall	.+128    	; 0x2f6 <MotorSpeed>
 276:	10 91 71 00 	lds	r17, 0x0071
 27a:	80 91 71 00 	lds	r24, 0x0071
 27e:	81 1b       	sub	r24, r17
 280:	84 32       	cpi	r24, 0x24	; 36
 282:	60 f6       	brcc	.-104    	; 0x21c <GoTurn+0x6c>
 284:	45 d1       	rcall	.+650    	; 0x510 <sleepUntilInterrupt>
 286:	35 df       	rcall	.-406    	; 0xf2 <EncoderPoll>
 288:	f8 cf       	rjmp	.-16     	; 0x27a <GoTurn+0xca>
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	2c c0       	rjmp	.+88     	; 0x2f6 <MotorSpeed>

0000029e <StatusLED>:
 29e:	c0 98       	cbi	0x18, 0	; 24
 2a0:	92 98       	cbi	0x12, 2	; 18
 2a2:	80 fd       	sbrc	r24, 0
 2a4:	c0 9a       	sbi	0x18, 0	; 24
 2a6:	81 fd       	sbrc	r24, 1
 2a8:	92 9a       	sbi	0x12, 2	; 18
 2aa:	08 95       	ret

000002ac <BackLEDFast>:
 2ac:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2ae:	f8 94       	cli
 2b0:	88 23       	and	r24, r24
 2b2:	19 f0       	breq	.+6      	; 0x2ba <BackLEDFast+0xe>
 2b4:	97 98       	cbi	0x12, 7	; 18
 2b6:	a1 9a       	sbi	0x14, 1	; 20
 2b8:	a0 9a       	sbi	0x14, 0	; 20
 2ba:	95 b3       	in	r25, 0x15	; 21
 2bc:	9c 7f       	andi	r25, 0xFC	; 252
 2be:	98 2b       	or	r25, r24
 2c0:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2c2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 2c4:	08 95       	ret

000002c6 <LEDInit>:
 2c6:	b8 9a       	sbi	0x17, 0	; 23
 2c8:	81 b3       	in	r24, 0x11	; 17
 2ca:	84 6c       	ori	r24, 0xC4	; 196
 2cc:	81 bb       	out	0x11, r24	; 17
 2ce:	96 98       	cbi	0x12, 6	; 18
 2d0:	97 98       	cbi	0x12, 7	; 18
 2d2:	a1 9a       	sbi	0x14, 1	; 20
 2d4:	a0 9a       	sbi	0x14, 0	; 20
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	e9 df       	rcall	.-46     	; 0x2ac <BackLEDFast>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	e0 cf       	rjmp	.-64     	; 0x29e <StatusLED>

000002de <MotorDir>:
 2de:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2e0:	f8 94       	cli
 2e2:	92 b3       	in	r25, 0x12	; 18
 2e4:	9f 7c       	andi	r25, 0xCF	; 207
 2e6:	89 2b       	or	r24, r25
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	88 b3       	in	r24, 0x18	; 24
 2ec:	8f 7c       	andi	r24, 0xCF	; 207
 2ee:	68 2b       	or	r22, r24
 2f0:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2f2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 2f4:	08 95       	ret

000002f6 <MotorSpeed>:
 2f6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2f8:	f8 94       	cli
 2fa:	1b bc       	out	0x2b, r1	; 43
 2fc:	8a bd       	out	0x2a, r24	; 42
 2fe:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 300:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 302:	08 95       	ret

00000304 <MotorInit>:
 304:	87 b3       	in	r24, 0x17	; 23
 306:	86 63       	ori	r24, 0x36	; 54
 308:	87 bb       	out	0x17, r24	; 23
 30a:	81 b3       	in	r24, 0x11	; 17
 30c:	80 63       	ori	r24, 0x30	; 48
 30e:	81 bb       	out	0x11, r24	; 17
 310:	81 ea       	ldi	r24, 0xA1	; 161
 312:	8f bd       	out	0x2f, r24	; 47
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	8e bd       	out	0x2e, r24	; 46
 318:	89 b7       	in	r24, 0x39	; 57
 31a:	83 7c       	andi	r24, 0xC3	; 195
 31c:	89 bf       	out	0x39, r24	; 57
 31e:	60 e2       	ldi	r22, 0x20	; 32
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	dd df       	rcall	.-70     	; 0x2de <MotorDir>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	e6 cf       	rjmp	.-52     	; 0x2f6 <MotorSpeed>

0000032a <LineData>:
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
 332:	01 d1       	rcall	.+514    	; 0x536 <__ADCBlockEnter>
 334:	18 2f       	mov	r17, r24
 336:	83 e4       	ldi	r24, 0x43	; 67
 338:	26 d1       	rcall	.+588    	; 0x586 <ADCSelectChannel>
 33a:	2e d1       	rcall	.+604    	; 0x598 <ADCMeasure>
 33c:	24 b1       	in	r18, 0x04	; 4
 33e:	35 b1       	in	r19, 0x05	; 5
 340:	39 83       	std	Y+1, r19	; 0x01
 342:	28 83       	st	Y, r18
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	1f d1       	rcall	.+574    	; 0x586 <ADCSelectChannel>
 348:	27 d1       	rcall	.+590    	; 0x598 <ADCMeasure>
 34a:	24 b1       	in	r18, 0x04	; 4
 34c:	35 b1       	in	r19, 0x05	; 5
 34e:	3b 83       	std	Y+3, r19	; 0x03
 350:	2a 83       	std	Y+2, r18	; 0x02
 352:	81 2f       	mov	r24, r17
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	ff c0       	rjmp	.+510    	; 0x55a <__ADCBlockLeave>

0000035c <__vector_14>:
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
 37e:	87 b1       	in	r24, 0x07	; 7
 380:	78 94       	sei
 382:	81 36       	cpi	r24, 0x61	; 97
 384:	19 f0       	breq	.+6      	; 0x38c <__vector_14+0x30>
 386:	83 36       	cpi	r24, 0x63	; 99
 388:	a1 f0       	breq	.+40     	; 0x3b2 <__vector_14+0x56>
 38a:	27 c0       	rjmp	.+78     	; 0x3da <__vector_14+0x7e>
 38c:	80 91 6a 00 	lds	r24, 0x006A
 390:	82 fd       	sbrc	r24, 2
 392:	02 c0       	rjmp	.+4      	; 0x398 <__vector_14+0x3c>
 394:	80 e6       	ldi	r24, 0x60	; 96
 396:	01 c0       	rjmp	.+2      	; 0x39a <__vector_14+0x3e>
 398:	82 e6       	ldi	r24, 0x62	; 98
 39a:	f8 94       	cli
 39c:	95 b1       	in	r25, 0x05	; 5
 39e:	90 93 6c 00 	sts	0x006C, r25
 3a2:	90 91 63 00 	lds	r25, 0x0063
 3a6:	90 93 6b 00 	sts	0x006B, r25
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	90 93 6f 00 	sts	0x006F, r25
 3b0:	12 c0       	rjmp	.+36     	; 0x3d6 <__vector_14+0x7a>
 3b2:	80 91 6a 00 	lds	r24, 0x006A
 3b6:	80 ff       	sbrs	r24, 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <__vector_14+0x62>
 3ba:	80 e6       	ldi	r24, 0x60	; 96
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <__vector_14+0x64>
 3be:	82 e6       	ldi	r24, 0x62	; 98
 3c0:	f8 94       	cli
 3c2:	95 b1       	in	r25, 0x05	; 5
 3c4:	90 93 6e 00 	sts	0x006E, r25
 3c8:	90 91 63 00 	lds	r25, 0x0063
 3cc:	90 93 6d 00 	sts	0x006D, r25
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	90 93 69 00 	sts	0x0069, r25
 3d6:	78 94       	sei
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <__vector_14+0x86>
 3da:	95 b1       	in	r25, 0x05	; 5
 3dc:	90 93 63 00 	sts	0x0063, r25
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	de d0       	rcall	.+444    	; 0x5a0 <ADCInterruptEnable>
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <SwitchInit>:
 406:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 408:	f8 94       	cli
 40a:	8b b7       	in	r24, 0x3b	; 59
 40c:	8f 77       	andi	r24, 0x7F	; 127
 40e:	8b bf       	out	0x3b, r24	; 59
 410:	85 b7       	in	r24, 0x35	; 53
 412:	87 7f       	andi	r24, 0xF7	; 247
 414:	84 60       	ori	r24, 0x04	; 4
 416:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 418:	9f bf       	out	0x3f, r25	; 63
 41a:	a4 98       	cbi	0x14, 4	; 20
 41c:	85 b3       	in	r24, 0x15	; 21
 41e:	80 71       	andi	r24, 0x10	; 16
 420:	85 bb       	out	0x15, r24	; 21
 422:	8b 98       	cbi	0x11, 3	; 17
 424:	93 98       	cbi	0x12, 3	; 18
 426:	10 92 70 00 	sts	0x0070, r1
 42a:	08 95       	ret

0000042c <PollSwitch>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	93 9a       	sbi	0x12, 3	; 18
 436:	8b 9a       	sbi	0x11, 3	; 17
 438:	7e d0       	rcall	.+252    	; 0x536 <__ADCBlockEnter>
 43a:	08 2f       	mov	r16, r24
 43c:	84 e4       	ldi	r24, 0x44	; 68
 43e:	a3 d0       	rcall	.+326    	; 0x586 <ADCSelectChannel>
 440:	14 e0       	ldi	r17, 0x04	; 4
 442:	c0 e0       	ldi	r28, 0x00	; 0
 444:	d0 e0       	ldi	r29, 0x00	; 0
 446:	a8 d0       	rcall	.+336    	; 0x598 <ADCMeasure>
 448:	24 b1       	in	r18, 0x04	; 4
 44a:	35 b1       	in	r19, 0x05	; 5
 44c:	c2 0f       	add	r28, r18
 44e:	d3 1f       	adc	r29, r19
 450:	11 50       	subi	r17, 0x01	; 1
 452:	c9 f7       	brne	.-14     	; 0x446 <PollSwitch+0x1a>
 454:	80 2f       	mov	r24, r16
 456:	81 d0       	rcall	.+258    	; 0x55a <__ADCBlockLeave>
 458:	8b 98       	cbi	0x11, 3	; 17
 45a:	93 98       	cbi	0x12, 3	; 18
 45c:	be 01       	movw	r22, r28
 45e:	76 95       	lsr	r23
 460:	67 95       	ror	r22
 462:	76 95       	lsr	r23
 464:	67 95       	ror	r22
 466:	cb 01       	movw	r24, r22
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	98 50       	subi	r25, 0x08	; 8
 46e:	ad d0       	rcall	.+346    	; 0x5ca <__udivmodhi4>
 470:	82 ec       	ldi	r24, 0xC2	; 194
 472:	86 0f       	add	r24, r22
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <__vector_2>:
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 70 00 	sts	0x0070, r24
 490:	8b b7       	in	r24, 0x3b	; 59
 492:	8f 77       	andi	r24, 0x7F	; 127
 494:	8b bf       	out	0x3b, r24	; 59
 496:	8f 91       	pop	r24
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <Timer2Init>:
 4a2:	12 bc       	out	0x22, r1	; 34
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	85 bd       	out	0x25, r24	; 37
 4a8:	89 b7       	in	r24, 0x39	; 57
 4aa:	80 64       	ori	r24, 0x40	; 64
 4ac:	89 bf       	out	0x39, r24	; 57
 4ae:	81 e9       	ldi	r24, 0x91	; 145
 4b0:	83 bd       	out	0x23, r24	; 35
 4b2:	85 b5       	in	r24, 0x25	; 37
 4b4:	87 78       	andi	r24, 0x87	; 135
 4b6:	85 bd       	out	0x25, r24	; 37
 4b8:	bb 9a       	sbi	0x17, 3	; 23
 4ba:	c3 98       	cbi	0x18, 3	; 24
 4bc:	08 95       	ret

000004be <__vector_4>:
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	8f 93       	push	r24
 4ca:	84 b5       	in	r24, 0x24	; 36
 4cc:	8b 5d       	subi	r24, 0xDB	; 219
 4ce:	84 bd       	out	0x24, r24	; 36
 4d0:	80 91 71 00 	lds	r24, 0x0071
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 71 00 	sts	0x0071, r24
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <sleep>:
 4e6:	f8 94       	cli
 4e8:	95 b7       	in	r25, 0x35	; 53
 4ea:	9f 70       	andi	r25, 0x0F	; 15
 4ec:	90 68       	ori	r25, 0x80	; 128
 4ee:	95 bf       	out	0x35, r25	; 53
 4f0:	78 94       	sei
 4f2:	90 91 71 00 	lds	r25, 0x0071
 4f6:	89 0f       	add	r24, r25
 4f8:	90 91 71 00 	lds	r25, 0x0071
 4fc:	98 17       	cp	r25, r24
 4fe:	11 f0       	breq	.+4      	; 0x504 <sleep+0x1e>
 500:	88 95       	sleep
 502:	fa cf       	rjmp	.-12     	; 0x4f8 <sleep+0x12>
 504:	f8 94       	cli
 506:	85 b7       	in	r24, 0x35	; 53
 508:	8f 77       	andi	r24, 0x7F	; 127
 50a:	85 bf       	out	0x35, r24	; 53
 50c:	78 94       	sei
 50e:	08 95       	ret

00000510 <sleepUntilInterrupt>:
 510:	f8 94       	cli
 512:	85 b7       	in	r24, 0x35	; 53
 514:	8f 70       	andi	r24, 0x0F	; 15
 516:	80 68       	ori	r24, 0x80	; 128
 518:	85 bf       	out	0x35, r24	; 53
 51a:	78 94       	sei
 51c:	88 95       	sleep
 51e:	f8 94       	cli
 520:	85 b7       	in	r24, 0x35	; 53
 522:	8f 77       	andi	r24, 0x7F	; 127
 524:	85 bf       	out	0x35, r24	; 53
 526:	78 94       	sei
 528:	08 95       	ret

0000052a <ADCInit>:
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	80 93 64 00 	sts	0x0064, r24
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	86 b9       	out	0x06, r24	; 6
 534:	08 95       	ret

00000536 <__ADCBlockEnter>:
 536:	2f b7       	in	r18, 0x3f	; 63
 538:	f8 94       	cli
 53a:	87 b1       	in	r24, 0x07	; 7
 53c:	96 b1       	in	r25, 0x06	; 6
 53e:	39 2f       	mov	r19, r25
 540:	38 78       	andi	r19, 0x88	; 136
 542:	31 f0       	breq	.+12     	; 0x550 <__ADCBlockEnter+0x1a>
 544:	93 ff       	sbrs	r25, 3
 546:	05 c0       	rjmp	.+10     	; 0x552 <__ADCBlockEnter+0x1c>
 548:	80 93 64 00 	sts	0x0064, r24
 54c:	86 e8       	ldi	r24, 0x86	; 134
 54e:	86 b9       	out	0x06, r24	; 6
 550:	8f ef       	ldi	r24, 0xFF	; 255
 552:	2f bf       	out	0x3f, r18	; 63
 554:	36 99       	sbic	0x06, 6	; 6
 556:	fe cf       	rjmp	.-4      	; 0x554 <__ADCBlockEnter+0x1e>
 558:	08 95       	ret

0000055a <__ADCBlockLeave>:
 55a:	3f b7       	in	r19, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	8f 3f       	cpi	r24, 0xFF	; 255
 560:	31 f4       	brne	.+12     	; 0x56e <__ADCBlockLeave+0x14>
 562:	80 91 64 00 	lds	r24, 0x0064
 566:	8f 3f       	cpi	r24, 0xFF	; 255
 568:	51 f0       	breq	.+20     	; 0x57e <__ADCBlockLeave+0x24>
 56a:	2e ed       	ldi	r18, 0xDE	; 222
 56c:	01 c0       	rjmp	.+2      	; 0x570 <__ADCBlockLeave+0x16>
 56e:	26 ed       	ldi	r18, 0xD6	; 214
 570:	97 b1       	in	r25, 0x07	; 7
 572:	98 27       	eor	r25, r24
 574:	90 7c       	andi	r25, 0xC0	; 192
 576:	09 f0       	breq	.+2      	; 0x57a <__ADCBlockLeave+0x20>
 578:	16 b8       	out	0x06, r1	; 6
 57a:	87 b9       	out	0x07, r24	; 7
 57c:	01 c0       	rjmp	.+2      	; 0x580 <__ADCBlockLeave+0x26>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	26 b9       	out	0x06, r18	; 6
 582:	3f bf       	out	0x3f, r19	; 63
 584:	08 95       	ret

00000586 <ADCSelectChannel>:
 586:	97 b1       	in	r25, 0x07	; 7
 588:	98 27       	eor	r25, r24
 58a:	90 7c       	andi	r25, 0xC0	; 192
 58c:	09 f0       	breq	.+2      	; 0x590 <ADCSelectChannel+0xa>
 58e:	16 b8       	out	0x06, r1	; 6
 590:	96 e8       	ldi	r25, 0x86	; 134
 592:	96 b9       	out	0x06, r25	; 6
 594:	87 b9       	out	0x07, r24	; 7
 596:	08 95       	ret

00000598 <ADCMeasure>:
 598:	36 9a       	sbi	0x06, 6	; 6
 59a:	36 99       	sbic	0x06, 6	; 6
 59c:	fe cf       	rjmp	.-4      	; 0x59a <ADCMeasure+0x2>
 59e:	08 95       	ret

000005a0 <ADCInterruptEnable>:
 5a0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5a2:	f8 94       	cli
 5a4:	96 b1       	in	r25, 0x06	; 6
 5a6:	97 ff       	sbrs	r25, 7
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <ADCInterruptEnable+0xe>
 5aa:	93 ff       	sbrs	r25, 3
 5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <ADCInterruptEnable+0x22>
 5ae:	97 b1       	in	r25, 0x07	; 7
 5b0:	98 27       	eor	r25, r24
 5b2:	90 7c       	andi	r25, 0xC0	; 192
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <ADCInterruptEnable+0x18>
 5b6:	16 b8       	out	0x06, r1	; 6
 5b8:	36 99       	sbic	0x06, 6	; 6
 5ba:	16 b8       	out	0x06, r1	; 6
 5bc:	87 b9       	out	0x07, r24	; 7
 5be:	9e ed       	ldi	r25, 0xDE	; 222
 5c0:	96 b9       	out	0x06, r25	; 6
 5c2:	80 93 64 00 	sts	0x0064, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5c6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 5c8:	08 95       	ret

000005ca <__udivmodhi4>:
 5ca:	aa 1b       	sub	r26, r26
 5cc:	bb 1b       	sub	r27, r27
 5ce:	51 e1       	ldi	r21, 0x11	; 17
 5d0:	07 c0       	rjmp	.+14     	; 0x5e0 <__udivmodhi4_ep>

000005d2 <__udivmodhi4_loop>:
 5d2:	aa 1f       	adc	r26, r26
 5d4:	bb 1f       	adc	r27, r27
 5d6:	a6 17       	cp	r26, r22
 5d8:	b7 07       	cpc	r27, r23
 5da:	10 f0       	brcs	.+4      	; 0x5e0 <__udivmodhi4_ep>
 5dc:	a6 1b       	sub	r26, r22
 5de:	b7 0b       	sbc	r27, r23

000005e0 <__udivmodhi4_ep>:
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	5a 95       	dec	r21
 5e6:	a9 f7       	brne	.-22     	; 0x5d2 <__udivmodhi4_loop>
 5e8:	80 95       	com	r24
 5ea:	90 95       	com	r25
 5ec:	bc 01       	movw	r22, r24
 5ee:	cd 01       	movw	r24, r26
 5f0:	08 95       	ret

000005f2 <__usmulhisi3>:
 5f2:	05 d0       	rcall	.+10     	; 0x5fe <__umulhisi3>

000005f4 <__usmulhisi3_tail>:
 5f4:	b7 ff       	sbrs	r27, 7
 5f6:	08 95       	ret
 5f8:	82 1b       	sub	r24, r18
 5fa:	93 0b       	sbc	r25, r19
 5fc:	08 95       	ret

000005fe <__umulhisi3>:
 5fe:	a2 9f       	mul	r26, r18
 600:	b0 01       	movw	r22, r0
 602:	b3 9f       	mul	r27, r19
 604:	c0 01       	movw	r24, r0
 606:	a3 9f       	mul	r26, r19
 608:	01 d0       	rcall	.+2      	; 0x60c <__umulhisi3+0xe>
 60a:	b2 9f       	mul	r27, r18
 60c:	70 0d       	add	r23, r0
 60e:	81 1d       	adc	r24, r1
 610:	11 24       	eor	r1, r1
 612:	91 1d       	adc	r25, r1
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
