
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000004c2  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013e4  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a83  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007bb  00000000  00000000  0000250b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d9  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008fa  00000000  00000000  0000362d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	65 c1       	rjmp	.+714    	; 0x2d0 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	83 c1       	rjmp	.+774    	; 0x310 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	f2 c1       	rjmp	.+996    	; 0x42a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
/**
 * Beschreibt hier was euer Programm macht!
 */
#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
  54:	1a 82       	std	Y+2, r1	; 0x02
  56:	19 82       	std	Y+1, r1	; 0x01
  58:	1c 82       	std	Y+4, r1	; 0x04
  5a:	1b 82       	std	Y+3, r1	; 0x03
	int turns = 0;

    Init();
  5c:	42 d0       	rcall	.+132    	; 0xe2 <Init>
    
    MotorDir(FWD,FWD);
  5e:	60 e2       	ldi	r22, 0x20	; 32
  60:	80 e2       	ldi	r24, 0x20	; 32
  62:	66 d0       	rcall	.+204    	; 0x130 <MotorDir>
    MotorSpeed(80,80);
  64:	60 e5       	ldi	r22, 0x50	; 80
  66:	80 e5       	ldi	r24, 0x50	; 80
  68:	6f d0       	rcall	.+222    	; 0x148 <MotorSpeed>
    
    char switches = PollSwitch();
  6a:	09 d1       	rcall	.+530    	; 0x27e <PollSwitch>
		
	switches &= 0b00111111;
		
	LineData(data);
  6c:	ce 01       	movw	r24, r28
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	85 d0       	rcall	.+266    	; 0x17c <LineData>
	white[LEFT] = data[LEFT] - 200;
  72:	c9 80       	ldd	r12, Y+1	; 0x01
  74:	da 80       	ldd	r13, Y+2	; 0x02
  76:	88 ec       	ldi	r24, 0xC8	; 200
  78:	c8 1a       	sub	r12, r24
  7a:	d1 08       	sbc	r13, r1
	white[RIGHT] = data[RIGHT] - 200;
  7c:	ab 80       	ldd	r10, Y+3	; 0x03
  7e:	bc 80       	ldd	r11, Y+4	; 0x04
  80:	88 ec       	ldi	r24, 0xC8	; 200
  82:	a8 1a       	sub	r10, r24
  84:	b1 08       	sbc	r11, r1
#include <asuro/asuro.h>

void main(void) {
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
	int turns = 0;
  86:	00 e0       	ldi	r16, 0x00	; 0
  88:	10 e0       	ldi	r17, 0x00	; 0
	LineData(data);
	white[LEFT] = data[LEFT] - 200;
	white[RIGHT] = data[RIGHT] - 200;
	
	while(1) {
		LineData(data);
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	76 d0       	rcall	.+236    	; 0x17c <LineData>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	9a 81       	ldd	r25, Y+2	; 0x02
  94:	8c 15       	cp	r24, r12
  96:	9d 05       	cpc	r25, r13
  98:	78 f4       	brcc	.+30     	; 0xb8 <main+0x70>
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	9c 81       	ldd	r25, Y+4	; 0x04
  9e:	8a 15       	cp	r24, r10
  a0:	9b 05       	cpc	r25, r11
  a2:	50 f4       	brcc	.+20     	; 0xb8 <main+0x70>
			//GoTurn(0,90,80);
			StatusLED(GREEN);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	24 d0       	rcall	.+72     	; 0xf0 <StatusLED>
			turns++;
			if(turns == 2) {
  a8:	01 30       	cpi	r16, 0x01	; 1
  aa:	11 05       	cpc	r17, r1
  ac:	61 f4       	brne	.+24     	; 0xc6 <main+0x7e>
				turns = 0;
				//GoTurn(0,180,80);
				StatusLED(RED);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	1f d0       	rcall	.+62     	; 0xf0 <StatusLED>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
			//GoTurn(0,90,80);
			StatusLED(GREEN);
			turns++;
			if(turns == 2) {
				turns = 0;
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	09 c0       	rjmp	.+18     	; 0xca <main+0x82>
				//GoTurn(0,180,80);
				StatusLED(RED);
			}
		} else {
			MotorDir(FWD, FWD);
  b8:	60 e2       	ldi	r22, 0x20	; 32
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	39 d0       	rcall	.+114    	; 0x130 <MotorDir>
			MotorSpeed(80,80);
  be:	60 e5       	ldi	r22, 0x50	; 80
  c0:	80 e5       	ldi	r24, 0x50	; 80
  c2:	42 d0       	rcall	.+132    	; 0x148 <MotorSpeed>
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x82>
  c6:	01 e0       	ldi	r16, 0x01	; 1
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	e8 2e       	mov	r14, r24
  ce:	f1 2c       	mov	r15, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	32 d1       	rcall	.+612    	; 0x338 <sleep>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	e8 1a       	sub	r14, r24
  d8:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  da:	e1 14       	cp	r14, r1
  dc:	f1 04       	cpc	r15, r1
  de:	c1 f7       	brne	.-16     	; 0xd0 <main+0x88>
  e0:	d4 cf       	rjmp	.-88     	; 0x8a <main+0x42>

000000e2 <Init>:
  e2:	08 d1       	rcall	.+528    	; 0x2f4 <Timer2Init>
  e4:	38 d0       	rcall	.+112    	; 0x156 <MotorInit>
  e6:	18 d0       	rcall	.+48     	; 0x118 <LEDInit>
  e8:	3c d1       	rcall	.+632    	; 0x362 <ADCInit>
  ea:	b6 d0       	rcall	.+364    	; 0x258 <SwitchInit>
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <StatusLED>:
  f0:	c0 98       	cbi	0x18, 0	; 24
  f2:	92 98       	cbi	0x12, 2	; 18
  f4:	80 fd       	sbrc	r24, 0
  f6:	c0 9a       	sbi	0x18, 0	; 24
  f8:	81 fd       	sbrc	r24, 1
  fa:	92 9a       	sbi	0x12, 2	; 18
  fc:	08 95       	ret

000000fe <BackLEDFast>:
  fe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 100:	f8 94       	cli
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <BackLEDFast+0xe>
 106:	97 98       	cbi	0x12, 7	; 18
 108:	a1 9a       	sbi	0x14, 1	; 20
 10a:	a0 9a       	sbi	0x14, 0	; 20
 10c:	95 b3       	in	r25, 0x15	; 21
 10e:	9c 7f       	andi	r25, 0xFC	; 252
 110:	98 2b       	or	r25, r24
 112:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 114:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 116:	08 95       	ret

00000118 <LEDInit>:
 118:	b8 9a       	sbi	0x17, 0	; 23
 11a:	81 b3       	in	r24, 0x11	; 17
 11c:	84 6c       	ori	r24, 0xC4	; 196
 11e:	81 bb       	out	0x11, r24	; 17
 120:	96 98       	cbi	0x12, 6	; 18
 122:	97 98       	cbi	0x12, 7	; 18
 124:	a1 9a       	sbi	0x14, 1	; 20
 126:	a0 9a       	sbi	0x14, 0	; 20
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	e9 df       	rcall	.-46     	; 0xfe <BackLEDFast>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	e0 cf       	rjmp	.-64     	; 0xf0 <StatusLED>

00000130 <MotorDir>:
 130:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 132:	f8 94       	cli
 134:	92 b3       	in	r25, 0x12	; 18
 136:	9f 7c       	andi	r25, 0xCF	; 207
 138:	89 2b       	or	r24, r25
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	8f 7c       	andi	r24, 0xCF	; 207
 140:	68 2b       	or	r22, r24
 142:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 144:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 146:	08 95       	ret

00000148 <MotorSpeed>:
 148:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 14a:	f8 94       	cli
 14c:	1b bc       	out	0x2b, r1	; 43
 14e:	8a bd       	out	0x2a, r24	; 42
 150:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 152:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 154:	08 95       	ret

00000156 <MotorInit>:
 156:	87 b3       	in	r24, 0x17	; 23
 158:	86 63       	ori	r24, 0x36	; 54
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	81 b3       	in	r24, 0x11	; 17
 15e:	80 63       	ori	r24, 0x30	; 48
 160:	81 bb       	out	0x11, r24	; 17
 162:	81 ea       	ldi	r24, 0xA1	; 161
 164:	8f bd       	out	0x2f, r24	; 47
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	8e bd       	out	0x2e, r24	; 46
 16a:	89 b7       	in	r24, 0x39	; 57
 16c:	83 7c       	andi	r24, 0xC3	; 195
 16e:	89 bf       	out	0x39, r24	; 57
 170:	60 e2       	ldi	r22, 0x20	; 32
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	dd df       	rcall	.-70     	; 0x130 <MotorDir>
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	e6 cf       	rjmp	.-52     	; 0x148 <MotorSpeed>

0000017c <LineData>:
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
 184:	f4 d0       	rcall	.+488    	; 0x36e <__ADCBlockEnter>
 186:	18 2f       	mov	r17, r24
 188:	83 e4       	ldi	r24, 0x43	; 67
 18a:	19 d1       	rcall	.+562    	; 0x3be <ADCSelectChannel>
 18c:	21 d1       	rcall	.+578    	; 0x3d0 <ADCMeasure>
 18e:	24 b1       	in	r18, 0x04	; 4
 190:	35 b1       	in	r19, 0x05	; 5
 192:	39 83       	std	Y+1, r19	; 0x01
 194:	28 83       	st	Y, r18
 196:	82 e4       	ldi	r24, 0x42	; 66
 198:	12 d1       	rcall	.+548    	; 0x3be <ADCSelectChannel>
 19a:	1a d1       	rcall	.+564    	; 0x3d0 <ADCMeasure>
 19c:	24 b1       	in	r18, 0x04	; 4
 19e:	35 b1       	in	r19, 0x05	; 5
 1a0:	3b 83       	std	Y+3, r19	; 0x03
 1a2:	2a 83       	std	Y+2, r18	; 0x02
 1a4:	81 2f       	mov	r24, r17
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	f2 c0       	rjmp	.+484    	; 0x392 <__ADCBlockLeave>

000001ae <__vector_14>:
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	78 94       	sei
 1d4:	81 36       	cpi	r24, 0x61	; 97
 1d6:	19 f0       	breq	.+6      	; 0x1de <__vector_14+0x30>
 1d8:	83 36       	cpi	r24, 0x63	; 99
 1da:	a1 f0       	breq	.+40     	; 0x204 <__vector_14+0x56>
 1dc:	27 c0       	rjmp	.+78     	; 0x22c <__vector_14+0x7e>
 1de:	80 91 63 00 	lds	r24, 0x0063
 1e2:	82 fd       	sbrc	r24, 2
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__vector_14+0x3c>
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <__vector_14+0x3e>
 1ea:	82 e6       	ldi	r24, 0x62	; 98
 1ec:	f8 94       	cli
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	90 93 65 00 	sts	0x0065, r25
 1f4:	90 91 60 00 	lds	r25, 0x0060
 1f8:	90 93 64 00 	sts	0x0064, r25
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	90 93 68 00 	sts	0x0068, r25
 202:	12 c0       	rjmp	.+36     	; 0x228 <__vector_14+0x7a>
 204:	80 91 63 00 	lds	r24, 0x0063
 208:	80 ff       	sbrs	r24, 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <__vector_14+0x62>
 20c:	80 e6       	ldi	r24, 0x60	; 96
 20e:	01 c0       	rjmp	.+2      	; 0x212 <__vector_14+0x64>
 210:	82 e6       	ldi	r24, 0x62	; 98
 212:	f8 94       	cli
 214:	95 b1       	in	r25, 0x05	; 5
 216:	90 93 67 00 	sts	0x0067, r25
 21a:	90 91 60 00 	lds	r25, 0x0060
 21e:	90 93 66 00 	sts	0x0066, r25
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	90 93 62 00 	sts	0x0062, r25
 228:	78 94       	sei
 22a:	04 c0       	rjmp	.+8      	; 0x234 <__vector_14+0x86>
 22c:	95 b1       	in	r25, 0x05	; 5
 22e:	90 93 60 00 	sts	0x0060, r25
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	d1 d0       	rcall	.+418    	; 0x3d8 <ADCInterruptEnable>
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <SwitchInit>:
 258:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 25a:	f8 94       	cli
 25c:	8b b7       	in	r24, 0x3b	; 59
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	8b bf       	out	0x3b, r24	; 59
 262:	85 b7       	in	r24, 0x35	; 53
 264:	87 7f       	andi	r24, 0xF7	; 247
 266:	84 60       	ori	r24, 0x04	; 4
 268:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 26a:	9f bf       	out	0x3f, r25	; 63
 26c:	a4 98       	cbi	0x14, 4	; 20
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	80 71       	andi	r24, 0x10	; 16
 272:	85 bb       	out	0x15, r24	; 21
 274:	8b 98       	cbi	0x11, 3	; 17
 276:	93 98       	cbi	0x12, 3	; 18
 278:	10 92 69 00 	sts	0x0069, r1
 27c:	08 95       	ret

0000027e <PollSwitch>:
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	93 9a       	sbi	0x12, 3	; 18
 288:	8b 9a       	sbi	0x11, 3	; 17
 28a:	71 d0       	rcall	.+226    	; 0x36e <__ADCBlockEnter>
 28c:	08 2f       	mov	r16, r24
 28e:	84 e4       	ldi	r24, 0x44	; 68
 290:	96 d0       	rcall	.+300    	; 0x3be <ADCSelectChannel>
 292:	14 e0       	ldi	r17, 0x04	; 4
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	9b d0       	rcall	.+310    	; 0x3d0 <ADCMeasure>
 29a:	24 b1       	in	r18, 0x04	; 4
 29c:	35 b1       	in	r19, 0x05	; 5
 29e:	c2 0f       	add	r28, r18
 2a0:	d3 1f       	adc	r29, r19
 2a2:	11 50       	subi	r17, 0x01	; 1
 2a4:	c9 f7       	brne	.-14     	; 0x298 <PollSwitch+0x1a>
 2a6:	80 2f       	mov	r24, r16
 2a8:	74 d0       	rcall	.+232    	; 0x392 <__ADCBlockLeave>
 2aa:	8b 98       	cbi	0x11, 3	; 17
 2ac:	93 98       	cbi	0x12, 3	; 18
 2ae:	be 01       	movw	r22, r28
 2b0:	76 95       	lsr	r23
 2b2:	67 95       	ror	r22
 2b4:	76 95       	lsr	r23
 2b6:	67 95       	ror	r22
 2b8:	cb 01       	movw	r24, r22
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	98 50       	subi	r25, 0x08	; 8
 2c0:	a0 d0       	rcall	.+320    	; 0x402 <__udivmodhi4>
 2c2:	82 ec       	ldi	r24, 0xC2	; 194
 2c4:	86 0f       	add	r24, r22
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <__vector_2>:
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 69 00 	sts	0x0069, r24
 2e2:	8b b7       	in	r24, 0x3b	; 59
 2e4:	8f 77       	andi	r24, 0x7F	; 127
 2e6:	8b bf       	out	0x3b, r24	; 59
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <Timer2Init>:
 2f4:	12 bc       	out	0x22, r1	; 34
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	85 bd       	out	0x25, r24	; 37
 2fa:	89 b7       	in	r24, 0x39	; 57
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	89 bf       	out	0x39, r24	; 57
 300:	81 e9       	ldi	r24, 0x91	; 145
 302:	83 bd       	out	0x23, r24	; 35
 304:	85 b5       	in	r24, 0x25	; 37
 306:	87 78       	andi	r24, 0x87	; 135
 308:	85 bd       	out	0x25, r24	; 37
 30a:	bb 9a       	sbi	0x17, 3	; 23
 30c:	c3 98       	cbi	0x18, 3	; 24
 30e:	08 95       	ret

00000310 <__vector_4>:
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	8f 93       	push	r24
 31c:	84 b5       	in	r24, 0x24	; 36
 31e:	8b 5d       	subi	r24, 0xDB	; 219
 320:	84 bd       	out	0x24, r24	; 36
 322:	80 91 6a 00 	lds	r24, 0x006A
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 6a 00 	sts	0x006A, r24
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <sleep>:
 338:	f8 94       	cli
 33a:	95 b7       	in	r25, 0x35	; 53
 33c:	9f 70       	andi	r25, 0x0F	; 15
 33e:	90 68       	ori	r25, 0x80	; 128
 340:	95 bf       	out	0x35, r25	; 53
 342:	78 94       	sei
 344:	90 91 6a 00 	lds	r25, 0x006A
 348:	89 0f       	add	r24, r25
 34a:	90 91 6a 00 	lds	r25, 0x006A
 34e:	98 17       	cp	r25, r24
 350:	11 f0       	breq	.+4      	; 0x356 <sleep+0x1e>
 352:	88 95       	sleep
 354:	fa cf       	rjmp	.-12     	; 0x34a <sleep+0x12>
 356:	f8 94       	cli
 358:	85 b7       	in	r24, 0x35	; 53
 35a:	8f 77       	andi	r24, 0x7F	; 127
 35c:	85 bf       	out	0x35, r24	; 53
 35e:	78 94       	sei
 360:	08 95       	ret

00000362 <ADCInit>:
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	80 93 61 00 	sts	0x0061, r24
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	86 b9       	out	0x06, r24	; 6
 36c:	08 95       	ret

0000036e <__ADCBlockEnter>:
 36e:	2f b7       	in	r18, 0x3f	; 63
 370:	f8 94       	cli
 372:	87 b1       	in	r24, 0x07	; 7
 374:	96 b1       	in	r25, 0x06	; 6
 376:	39 2f       	mov	r19, r25
 378:	38 78       	andi	r19, 0x88	; 136
 37a:	31 f0       	breq	.+12     	; 0x388 <__ADCBlockEnter+0x1a>
 37c:	93 ff       	sbrs	r25, 3
 37e:	05 c0       	rjmp	.+10     	; 0x38a <__ADCBlockEnter+0x1c>
 380:	80 93 61 00 	sts	0x0061, r24
 384:	86 e8       	ldi	r24, 0x86	; 134
 386:	86 b9       	out	0x06, r24	; 6
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	2f bf       	out	0x3f, r18	; 63
 38c:	36 99       	sbic	0x06, 6	; 6
 38e:	fe cf       	rjmp	.-4      	; 0x38c <__ADCBlockEnter+0x1e>
 390:	08 95       	ret

00000392 <__ADCBlockLeave>:
 392:	3f b7       	in	r19, 0x3f	; 63
 394:	f8 94       	cli
 396:	8f 3f       	cpi	r24, 0xFF	; 255
 398:	31 f4       	brne	.+12     	; 0x3a6 <__ADCBlockLeave+0x14>
 39a:	80 91 61 00 	lds	r24, 0x0061
 39e:	8f 3f       	cpi	r24, 0xFF	; 255
 3a0:	51 f0       	breq	.+20     	; 0x3b6 <__ADCBlockLeave+0x24>
 3a2:	2e ed       	ldi	r18, 0xDE	; 222
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <__ADCBlockLeave+0x16>
 3a6:	26 ed       	ldi	r18, 0xD6	; 214
 3a8:	97 b1       	in	r25, 0x07	; 7
 3aa:	98 27       	eor	r25, r24
 3ac:	90 7c       	andi	r25, 0xC0	; 192
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <__ADCBlockLeave+0x20>
 3b0:	16 b8       	out	0x06, r1	; 6
 3b2:	87 b9       	out	0x07, r24	; 7
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <__ADCBlockLeave+0x26>
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	26 b9       	out	0x06, r18	; 6
 3ba:	3f bf       	out	0x3f, r19	; 63
 3bc:	08 95       	ret

000003be <ADCSelectChannel>:
 3be:	97 b1       	in	r25, 0x07	; 7
 3c0:	98 27       	eor	r25, r24
 3c2:	90 7c       	andi	r25, 0xC0	; 192
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <ADCSelectChannel+0xa>
 3c6:	16 b8       	out	0x06, r1	; 6
 3c8:	96 e8       	ldi	r25, 0x86	; 134
 3ca:	96 b9       	out	0x06, r25	; 6
 3cc:	87 b9       	out	0x07, r24	; 7
 3ce:	08 95       	ret

000003d0 <ADCMeasure>:
 3d0:	36 9a       	sbi	0x06, 6	; 6
 3d2:	36 99       	sbic	0x06, 6	; 6
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <ADCMeasure+0x2>
 3d6:	08 95       	ret

000003d8 <ADCInterruptEnable>:
 3d8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3da:	f8 94       	cli
 3dc:	96 b1       	in	r25, 0x06	; 6
 3de:	97 ff       	sbrs	r25, 7
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <ADCInterruptEnable+0xe>
 3e2:	93 ff       	sbrs	r25, 3
 3e4:	0a c0       	rjmp	.+20     	; 0x3fa <ADCInterruptEnable+0x22>
 3e6:	97 b1       	in	r25, 0x07	; 7
 3e8:	98 27       	eor	r25, r24
 3ea:	90 7c       	andi	r25, 0xC0	; 192
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <ADCInterruptEnable+0x18>
 3ee:	16 b8       	out	0x06, r1	; 6
 3f0:	36 99       	sbic	0x06, 6	; 6
 3f2:	16 b8       	out	0x06, r1	; 6
 3f4:	87 b9       	out	0x07, r24	; 7
 3f6:	9e ed       	ldi	r25, 0xDE	; 222
 3f8:	96 b9       	out	0x06, r25	; 6
 3fa:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3fe:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 400:	08 95       	ret

00000402 <__udivmodhi4>:
 402:	aa 1b       	sub	r26, r26
 404:	bb 1b       	sub	r27, r27
 406:	51 e1       	ldi	r21, 0x11	; 17
 408:	07 c0       	rjmp	.+14     	; 0x418 <__udivmodhi4_ep>

0000040a <__udivmodhi4_loop>:
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	a6 17       	cp	r26, r22
 410:	b7 07       	cpc	r27, r23
 412:	10 f0       	brcs	.+4      	; 0x418 <__udivmodhi4_ep>
 414:	a6 1b       	sub	r26, r22
 416:	b7 0b       	sbc	r27, r23

00000418 <__udivmodhi4_ep>:
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	5a 95       	dec	r21
 41e:	a9 f7       	brne	.-22     	; 0x40a <__udivmodhi4_loop>
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	bc 01       	movw	r22, r24
 426:	cd 01       	movw	r24, r26
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
