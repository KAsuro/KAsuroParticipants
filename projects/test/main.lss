
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000652  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  000006e6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001abf  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d30  00000000  00000000  000023c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b5  00000000  00000000  000030f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000454  00000000  00000000  00003aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c8  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e5b  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00005423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	75 c2       	rjmp	.+1258   	; 0x4f0 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	ad c0       	rjmp	.+346    	; 0x164 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	f2 c0       	rjmp	.+484    	; 0x202 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 37       	cpi	r26, 0x75	; 117
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	04 c3       	rjmp	.+1544   	; 0x64e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
/**
 * Beschreibt hier was euer Programm macht!
 */
#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
  54:	1a 82       	std	Y+2, r1	; 0x02
  56:	19 82       	std	Y+1, r1	; 0x01
  58:	1c 82       	std	Y+4, r1	; 0x04
  5a:	1b 82       	std	Y+3, r1	; 0x03
	int turns = 0;

    Init();
  5c:	7b d2       	rcall	.+1270   	; 0x554 <Init>
    EncoderInit();
  5e:	03 d2       	rcall	.+1030   	; 0x466 <EncoderInit>
    
    MotorDir(FWD,FWD);
  60:	60 e2       	ldi	r22, 0x20	; 32
  62:	80 e2       	ldi	r24, 0x20	; 32
  64:	4b d0       	rcall	.+150    	; 0xfc <MotorDir>
    MotorSpeed(80,80);
  66:	60 e5       	ldi	r22, 0x50	; 80
  68:	80 e5       	ldi	r24, 0x50	; 80
  6a:	54 d0       	rcall	.+168    	; 0x114 <MotorSpeed>
    
    char switches = PollSwitch();
  6c:	18 d2       	rcall	.+1072   	; 0x49e <PollSwitch>
		
	switches &= 0b00111111;
		
	LineData(data);
  6e:	ce 01       	movw	r24, r28
  70:	01 96       	adiw	r24, 0x01	; 1
  72:	ae d0       	rcall	.+348    	; 0x1d0 <LineData>
	white[LEFT] = data[LEFT] - 200;
  74:	c9 80       	ldd	r12, Y+1	; 0x01
  76:	da 80       	ldd	r13, Y+2	; 0x02
  78:	88 ec       	ldi	r24, 0xC8	; 200
  7a:	c8 1a       	sub	r12, r24
  7c:	d1 08       	sbc	r13, r1
	white[RIGHT] = data[RIGHT] - 200;
  7e:	ab 80       	ldd	r10, Y+3	; 0x03
  80:	bc 80       	ldd	r11, Y+4	; 0x04
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	a8 1a       	sub	r10, r24
  86:	b1 08       	sbc	r11, r1
#include <asuro/asuro.h>

void main(void) {
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
	int turns = 0;
  88:	00 e0       	ldi	r16, 0x00	; 0
  8a:	10 e0       	ldi	r17, 0x00	; 0
	LineData(data);
	white[LEFT] = data[LEFT] - 200;
	white[RIGHT] = data[RIGHT] - 200;
	
	while(1) {
		LineData(data);
  8c:	ce 01       	movw	r24, r28
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9f d0       	rcall	.+318    	; 0x1d0 <LineData>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	8c 15       	cp	r24, r12
  98:	9d 05       	cpc	r25, r13
  9a:	d8 f4       	brcc	.+54     	; 0xd2 <main+0x8a>
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	9c 81       	ldd	r25, Y+4	; 0x04
  a0:	8a 15       	cp	r24, r10
  a2:	9b 05       	cpc	r25, r11
  a4:	b0 f4       	brcc	.+44     	; 0xd2 <main+0x8a>
			GoTurn(0,90,80);
  a6:	40 e5       	ldi	r20, 0x50	; 80
  a8:	6a e5       	ldi	r22, 0x5A	; 90
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	5c d1       	rcall	.+696    	; 0x36a <GoTurn>
			StatusLED(GREEN);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	2f d2       	rcall	.+1118   	; 0x514 <StatusLED>
			turns++;
			if(turns == 2) {
  b6:	01 30       	cpi	r16, 0x01	; 1
  b8:	11 05       	cpc	r17, r1
  ba:	91 f4       	brne	.+36     	; 0xe0 <main+0x98>
				turns = 0;
				GoTurn(0,180,80);
  bc:	40 e5       	ldi	r20, 0x50	; 80
  be:	64 eb       	ldi	r22, 0xB4	; 180
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	51 d1       	rcall	.+674    	; 0x36a <GoTurn>
				StatusLED(RED);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	24 d2       	rcall	.+1096   	; 0x514 <StatusLED>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
			GoTurn(0,90,80);
			StatusLED(GREEN);
			turns++;
			if(turns == 2) {
				turns = 0;
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <main+0x9c>
				GoTurn(0,180,80);
				StatusLED(RED);
			}
		} else {
			MotorDir(FWD, FWD);
  d2:	60 e2       	ldi	r22, 0x20	; 32
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	12 d0       	rcall	.+36     	; 0xfc <MotorDir>
			MotorSpeed(80,80);
  d8:	60 e5       	ldi	r22, 0x50	; 80
  da:	80 e5       	ldi	r24, 0x50	; 80
  dc:	1b d0       	rcall	.+54     	; 0x114 <MotorSpeed>
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x9c>
  e0:	01 e0       	ldi	r16, 0x01	; 1
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	e8 2e       	mov	r14, r24
  e8:	f1 2c       	mov	r15, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  ea:	84 e2       	ldi	r24, 0x24	; 36
  ec:	4f d0       	rcall	.+158    	; 0x18c <sleep>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	e8 1a       	sub	r14, r24
  f2:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  f4:	e1 14       	cp	r14, r1
  f6:	f1 04       	cpc	r15, r1
  f8:	c1 f7       	brne	.-16     	; 0xea <main+0xa2>
  fa:	c8 cf       	rjmp	.-112    	; 0x8c <main+0x44>

000000fc <MotorDir>:
    MotorSpeed(0,0);
}

void MotorDir(const uint8_t left_dir, const uint8_t right_dir)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  fc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  fe:	f8 94       	cli
        PORTD = (PORTD & ~LEFT_DIR) | left_dir;
 100:	92 b3       	in	r25, 0x12	; 18
 102:	9f 7c       	andi	r25, 0xCF	; 207
 104:	89 2b       	or	r24, r25
 106:	82 bb       	out	0x12, r24	; 18
        PORTB = (PORTB & ~RIGHT_DIR) | right_dir;
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	8f 7c       	andi	r24, 0xCF	; 207
 10c:	68 2b       	or	r22, r24
 10e:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 110:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 112:	08 95       	ret

00000114 <MotorSpeed>:
    }
}

void MotorSpeed(const uint8_t left_speed, const uint8_t right_speed) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 114:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 116:	f8 94       	cli
        OCR1AH = 0; // highbyte = 0, used for both write operations
 118:	1b bc       	out	0x2b, r1	; 43
        OCR1AL = left_speed;
 11a:	8a bd       	out	0x2a, r24	; 42
        OCR1BL = right_speed;
 11c:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 11e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 120:	08 95       	ret

00000122 <MotorInit>:
#define RIGHT_DIR ((1 << PB4) | (1 << PB5))
#define LEFT_DIR  ((1 << PD4) | (1 << PD5))
#endif

void MotorInit(void) {
    DDRB |= LEFT_DIR | PWM;
 122:	87 b3       	in	r24, 0x17	; 23
 124:	86 63       	ori	r24, 0x36	; 54
 126:	87 bb       	out	0x17, r24	; 23
    DDRD |= RIGHT_DIR;
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	80 63       	ori	r24, 0x30	; 48
 12c:	81 bb       	out	0x11, r24	; 17

    // 8 bit PWM using OC1A & OC1B
    TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 12e:	81 ea       	ldi	r24, 0xA1	; 161
 130:	8f bd       	out	0x2f, r24	; 47
    // Timer1 CLK: F_CPU/8
    TCCR1B = (1 << CS11);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	8e bd       	out	0x2e, r24	; 46
    // Turn off all interrupts of Timer1
    TIMSK &= ~((1 << TICIE1) | (1 << OCIE1A) | (1 << OCIE1B) | (1 << TOIE1));
 136:	89 b7       	in	r24, 0x39	; 57
 138:	83 7c       	andi	r24, 0xC3	; 195
 13a:	89 bf       	out	0x39, r24	; 57

    MotorDir(FWD,FWD);
 13c:	60 e2       	ldi	r22, 0x20	; 32
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	dd df       	rcall	.-70     	; 0xfc <MotorDir>
    MotorSpeed(0,0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	e6 cf       	rjmp	.-52     	; 0x114 <MotorSpeed>

00000148 <Timer2Init>:
    // A 36kHz square wave signal matches F_CPU / 222
    // Operation mode: Fast PWM, range 0 - 221 (T = 222)
    // 50% duty cycle square wave -> Compare match at TCNT2 = T/2 = 111
    // Manually added offset: 256 - 222 = 34 cycles

    ASSR = 0x00; // synchronous operation
 148:	12 bc       	out	0x22, r1	; 34
    TCCR2 = (1 << CS20); // T2_CLK: F_CPU
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	85 bd       	out	0x25, r24	; 37
    TIMSK |= (1 << TOIE2); // overflow interrupt
 14e:	89 b7       	in	r24, 0x39	; 57
 150:	80 64       	ori	r24, 0x40	; 64
 152:	89 bf       	out	0x39, r24	; 57
    OCR2 = 111 + 34; // compare match at T/2 + offset
 154:	81 e9       	ldi	r24, 0x91	; 145
 156:	83 bd       	out	0x23, r24	; 35
    TIMER2_CLOCK_OUT_DISABLE();
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	87 78       	andi	r24, 0x87	; 135
 15c:	85 bd       	out	0x25, r24	; 37

    // configure PB3 (36kHz carrier output) as output, low
    DDRB |= (1 << DDB3);
 15e:	bb 9a       	sbi	0x17, 3	; 23
    PORTB &= ~(1 << PB3);
 160:	c3 98       	cbi	0x18, 3	; 24
 162:	08 95       	ret

00000164 <__vector_4>:
 *
 * Updating the TCNT2 register requires three clock cycles/instructions, which
 * results in a total offset value of +37.
 */
ISR(TIMER2_OVF_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
    uint8_t temp_reg;

    __asm volatile( // TCNT2 += 37;
 170:	84 b5       	in	r24, 0x24	; 36
 172:	8b 5d       	subi	r24, 0xDB	; 219
 174:	84 bd       	out	0x24, r24	; 36
            : /* in operands */
              [TIMER_REG] "I" (_SFR_IO_ADDR(TCNT2)),
              [OFFSET_2COMP] "i" (-37)
    );

    tick36kHz++;
 176:	80 91 68 00 	lds	r24, 0x0068
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 68 00 	sts	0x0068, r24
#if TIMER2_ISR_HOOK_ENABLE
    if (Timer2ISRHook != NULL) {
        Timer2ISRHook();
    }
#endif
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <sleep>:

void sleep(uint8_t timer36kHz_ticks) {
    // Interrupts have to be enabled to wake up the microcontroller from sleep
    // mode, which legitimates the usage of cli/sei in this case
    cli();
 18c:	f8 94       	cli
    set_sleep_mode(SLEEP_MODE_IDLE | _SLEEP_ENABLE_MASK); // prepare/unlock
 18e:	95 b7       	in	r25, 0x35	; 53
 190:	9f 70       	andi	r25, 0x0F	; 15
 192:	90 68       	ori	r25, 0x80	; 128
 194:	95 bf       	out	0x35, r25	; 53
    sei();
 196:	78 94       	sei

    timer36kHz_ticks += tick36kHz;
 198:	90 91 68 00 	lds	r25, 0x0068
 19c:	89 0f       	add	r24, r25
    while (tick36kHz != timer36kHz_ticks) {
 19e:	90 91 68 00 	lds	r25, 0x0068
 1a2:	98 17       	cp	r25, r24
 1a4:	11 f0       	breq	.+4      	; 0x1aa <sleep+0x1e>
        sleep_cpu();
 1a6:	88 95       	sleep
 1a8:	fa cf       	rjmp	.-12     	; 0x19e <sleep+0x12>
    }

    cli();
 1aa:	f8 94       	cli
    sleep_disable();
 1ac:	85 b7       	in	r24, 0x35	; 53
 1ae:	8f 77       	andi	r24, 0x7F	; 127
 1b0:	85 bf       	out	0x35, r24	; 53
    sei();
 1b2:	78 94       	sei
 1b4:	08 95       	ret

000001b6 <sleepUntilInterrupt>:
}

void sleepUntilInterrupt(void) {
    cli();
 1b6:	f8 94       	cli
    set_sleep_mode(SLEEP_MODE_IDLE | _SLEEP_ENABLE_MASK); // prepare/unlock
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	85 bf       	out	0x35, r24	; 53
    sei();
 1c0:	78 94       	sei

    sleep_cpu();
 1c2:	88 95       	sleep

    cli();
 1c4:	f8 94       	cli
    sleep_disable();
 1c6:	85 b7       	in	r24, 0x35	; 53
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	85 bf       	out	0x35, r24	; 53
    sei();
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <LineData>:
    }

    amMode = mode;
}

void LineData(uint16_t * const data) {
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
    ADC_BLOCK {
 1d8:	ca d1       	rcall	.+916    	; 0x56e <__ADCBlockEnter>
 1da:	18 2f       	mov	r17, r24
        ADCSelectChannel(ADC_IR_LEFT);
 1dc:	83 e4       	ldi	r24, 0x43	; 67
 1de:	ef d1       	rcall	.+990    	; 0x5be <ADCSelectChannel>
        ADCMeasure();
 1e0:	f7 d1       	rcall	.+1006   	; 0x5d0 <ADCMeasure>
        data[LEFT] = ADC;
 1e2:	24 b1       	in	r18, 0x04	; 4
 1e4:	35 b1       	in	r19, 0x05	; 5
 1e6:	39 83       	std	Y+1, r19	; 0x01
 1e8:	28 83       	st	Y, r18

        ADCSelectChannel(ADC_IR_RIGHT);
 1ea:	82 e4       	ldi	r24, 0x42	; 66
 1ec:	e8 d1       	rcall	.+976    	; 0x5be <ADCSelectChannel>
        ADCMeasure();
 1ee:	f0 d1       	rcall	.+992    	; 0x5d0 <ADCMeasure>
        data[RIGHT] = ADC;
 1f0:	24 b1       	in	r18, 0x04	; 4
 1f2:	35 b1       	in	r19, 0x05	; 5
 1f4:	3b 83       	std	Y+3, r19	; 0x03
 1f6:	2a 83       	std	Y+2, r18	; 0x02
 * @param ptr a pointer to the ADC channel configuration which will be passed to
 *            ADCBlockLeave()
 * \endif
 */
static ALWAYS_INLINE void __ADCBlockLeaveByPtr(const uint8_t * const ptr) {
    __ADCBlockLeave(*ptr);
 1f8:	81 2f       	mov	r24, r17
    }
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	c8 c1       	rjmp	.+912    	; 0x592 <__ADCBlockLeave>

00000202 <__vector_14>:
#endif
#endif
}

ISR(ADC_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
    static uint8_t right;
    uint8_t channel = ADC_GET_CHANNEL();
 224:	87 b1       	in	r24, 0x07	; 7

    sei(); // re-enable interrupts
 226:	78 94       	sei

    switch (channel) {
 228:	81 36       	cpi	r24, 0x61	; 97
 22a:	19 f0       	breq	.+6      	; 0x232 <__vector_14+0x30>
 22c:	83 36       	cpi	r24, 0x63	; 99
 22e:	a1 f0       	breq	.+40     	; 0x258 <__vector_14+0x56>
 230:	27 c0       	rjmp	.+78     	; 0x280 <__vector_14+0x7e>
    case AUTOMODE_ADC_CH(AUTOMODE_CH_ODO_LEFT):
        if (amMode & am_line) {
 232:	80 91 6a 00 	lds	r24, 0x006A
 236:	82 fd       	sbrc	r24, 2
 238:	02 c0       	rjmp	.+4      	; 0x23e <__vector_14+0x3c>
            channel++; // IR_RIGHT is the successor of ODO_LEFT
        } else {
            channel = AUTOMODE_ADC_CH(AUTOMODE_CH_ODO_RIGHT);
 23a:	80 e6       	ldi	r24, 0x60	; 96
 23c:	01 c0       	rjmp	.+2      	; 0x240 <__vector_14+0x3e>
    sei(); // re-enable interrupts

    switch (channel) {
    case AUTOMODE_ADC_CH(AUTOMODE_CH_ODO_LEFT):
        if (amMode & am_line) {
            channel++; // IR_RIGHT is the successor of ODO_LEFT
 23e:	82 e6       	ldi	r24, 0x62	; 98
        } else {
            channel = AUTOMODE_ADC_CH(AUTOMODE_CH_ODO_RIGHT);
        }

        cli();
 240:	f8 94       	cli
        odoData.left = ADCH;
 242:	95 b1       	in	r25, 0x05	; 5
 244:	90 93 6c 00 	sts	0x006C, r25
        odoData.right = right;
 248:	90 91 60 00 	lds	r25, 0x0060
 24c:	90 93 6b 00 	sts	0x006B, r25
        odoDataUpdated = true;
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	90 93 6f 00 	sts	0x006F, r25
 256:	12 c0       	rjmp	.+36     	; 0x27c <__vector_14+0x7a>
        sei();

        break;
    case AUTOMODE_ADC_CH(AUTOMODE_CH_IR_LEFT):
        if (amMode & am_odo) {
 258:	80 91 6a 00 	lds	r24, 0x006A
 25c:	80 ff       	sbrs	r24, 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__vector_14+0x62>
            channel = AUTOMODE_ADC_CH(AUTOMODE_CH_ODO_RIGHT);
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	01 c0       	rjmp	.+2      	; 0x266 <__vector_14+0x64>
        } else {
            channel = AUTOMODE_ADC_CH(AUTOMODE_CH_IR_RIGHT);
 264:	82 e6       	ldi	r24, 0x62	; 98
        }

        cli();
 266:	f8 94       	cli
        lineData.left = ADCH;
 268:	95 b1       	in	r25, 0x05	; 5
 26a:	90 93 6e 00 	sts	0x006E, r25
        lineData.right = right;
 26e:	90 91 60 00 	lds	r25, 0x0060
 272:	90 93 6d 00 	sts	0x006D, r25
        lineDataUpdated = true;
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	90 93 69 00 	sts	0x0069, r25
        sei();
 27c:	78 94       	sei

        break;
 27e:	04 c0       	rjmp	.+8      	; 0x288 <__vector_14+0x86>
    default:
        right = ADCH;
 280:	95 b1       	in	r25, 0x05	; 5
 282:	90 93 60 00 	sts	0x0060, r25
        channel++;
 286:	8f 5f       	subi	r24, 0xFF	; 255
        break;
    }

    ADCInterruptEnable(channel);
 288:	a7 d1       	rcall	.+846    	; 0x5d8 <ADCInterruptEnable>
#if ADC_ISR_HOOK_ENABLE
    if (ADCISRHook != NULL) {
        ADCISRHook();
    }
#endif
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <EncoderPoll>:

void EncoderPoll(void) {
    bool updated;
    SensorValues_t newValues;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 2ac:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2ae:	f8 94       	cli
        updated = odoDataUpdated;
 2b0:	20 91 6f 00 	lds	r18, 0x006F
        odoDataUpdated = false;
 2b4:	10 92 6f 00 	sts	0x006F, r1
        newValues = odoData;
 2b8:	80 91 6b 00 	lds	r24, 0x006B
 2bc:	90 91 6c 00 	lds	r25, 0x006C
 2c0:	e8 2f       	mov	r30, r24
 2c2:	79 2f       	mov	r23, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2c4:	3f bf       	out	0x3f, r19	; 63
    }

    if (updated) {
 2c6:	22 23       	and	r18, r18
 2c8:	09 f4       	brne	.+2      	; 0x2cc <EncoderPoll+0x20>
 2ca:	45 c0       	rjmp	.+138    	; 0x356 <EncoderPoll+0xaa>
        uint8_t last_state_buf = last_state;
 2cc:	40 91 64 00 	lds	r20, 0x0064

        uint8_t mask = ENCODER_STATE_LEFT;
        uint8_t new = newValues.left;
        uint8_t ref = reference.left;
 2d0:	60 91 66 00 	lds	r22, 0x0066
        uint16_t ticks = encoderTicks.left;
 2d4:	20 91 70 00 	lds	r18, 0x0070
 2d8:	30 91 71 00 	lds	r19, 0x0071
            if (mask == ENCODER_STATE_LEFT) {
                // writeback LEFT, load RIGHT
                reference.left = ref;
                encoderTicks.left = ticks;
                new = newValues.right;
                ref = reference.right;
 2dc:	50 91 65 00 	lds	r21, 0x0065
        uint8_t new = newValues.left;
        uint8_t ref = reference.left;
        uint16_t ticks = encoderTicks.left;

        do {
            if (last_state_buf & mask) { // last edge: low->high
 2e0:	41 fd       	sbrc	r20, 1
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <EncoderPoll+0x48>
                    ref = new;
                    last_state_buf &= ~mask;
                    ticks++;
                }
            } else { // last edge: high->low
                if (ref > new) { // decrease low value
 2e4:	96 17       	cp	r25, r22
 2e6:	88 f0       	brcs	.+34     	; 0x30a <EncoderPoll+0x5e>
                    ref = new;
                } else if ((uint8_t) (new - ref) > ODO_EDGE_THRESHOLD) { // rising edge
 2e8:	f9 2f       	mov	r31, r25
 2ea:	f6 1b       	sub	r31, r22
 2ec:	fb 30       	cpi	r31, 0x0B	; 11
 2ee:	60 f0       	brcs	.+24     	; 0x308 <EncoderPoll+0x5c>
                    ref = new;
                    last_state_buf |= mask;
 2f0:	42 60       	ori	r20, 0x02	; 2
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <EncoderPoll+0x56>
        uint8_t ref = reference.left;
        uint16_t ticks = encoderTicks.left;

        do {
            if (last_state_buf & mask) { // last edge: low->high
                if (ref < new) { // increase high value
 2f4:	69 17       	cp	r22, r25
 2f6:	48 f0       	brcs	.+18     	; 0x30a <EncoderPoll+0x5e>
                    ref = new;
                } else if ((uint8_t) (ref - new) > ODO_EDGE_THRESHOLD) { // falling edge
 2f8:	f6 2f       	mov	r31, r22
 2fa:	f9 1b       	sub	r31, r25
 2fc:	fb 30       	cpi	r31, 0x0B	; 11
 2fe:	20 f0       	brcs	.+8      	; 0x308 <EncoderPoll+0x5c>
                    ref = new;
                    last_state_buf &= ~mask;
 300:	4d 7f       	andi	r20, 0xFD	; 253
                    ticks++;
 302:	2f 5f       	subi	r18, 0xFF	; 255
 304:	3f 4f       	sbci	r19, 0xFF	; 255
 306:	01 c0       	rjmp	.+2      	; 0x30a <EncoderPoll+0x5e>

        do {
            if (last_state_buf & mask) { // last edge: low->high
                if (ref < new) { // increase high value
                    ref = new;
                } else if ((uint8_t) (ref - new) > ODO_EDGE_THRESHOLD) { // falling edge
 308:	76 2f       	mov	r23, r22
            }

            if (mask == ENCODER_STATE_LEFT) {
                // writeback LEFT, load RIGHT
                reference.left = ref;
                encoderTicks.left = ticks;
 30a:	30 93 71 00 	sts	0x0071, r19
 30e:	20 93 70 00 	sts	0x0070, r18
                new = newValues.right;
                ref = reference.right;
                ticks = encoderTicks.right;
 312:	20 91 72 00 	lds	r18, 0x0072
 316:	30 91 73 00 	lds	r19, 0x0073
        uint8_t new = newValues.left;
        uint8_t ref = reference.left;
        uint16_t ticks = encoderTicks.left;

        do {
            if (last_state_buf & mask) { // last edge: low->high
 31a:	40 ff       	sbrs	r20, 0
 31c:	08 c0       	rjmp	.+16     	; 0x32e <EncoderPoll+0x82>
                if (ref < new) { // increase high value
 31e:	5e 17       	cp	r21, r30
 320:	78 f0       	brcs	.+30     	; 0x340 <EncoderPoll+0x94>
                    ref = new;
                } else if ((uint8_t) (ref - new) > ODO_EDGE_THRESHOLD) { // falling edge
 322:	65 2f       	mov	r22, r21
 324:	68 1b       	sub	r22, r24
 326:	6b 30       	cpi	r22, 0x0B	; 11
 328:	60 f0       	brcs	.+24     	; 0x342 <EncoderPoll+0x96>
                    ref = new;
                    last_state_buf &= ~mask;
 32a:	4e 7f       	andi	r20, 0xFE	; 254
 32c:	07 c0       	rjmp	.+14     	; 0x33c <EncoderPoll+0x90>
                    ticks++;
                }
            } else { // last edge: high->low
                if (ref > new) { // decrease low value
 32e:	e5 17       	cp	r30, r21
 330:	38 f0       	brcs	.+14     	; 0x340 <EncoderPoll+0x94>
                    ref = new;
                } else if ((uint8_t) (new - ref) > ODO_EDGE_THRESHOLD) { // rising edge
 332:	68 2f       	mov	r22, r24
 334:	65 1b       	sub	r22, r21
 336:	6b 30       	cpi	r22, 0x0B	; 11
 338:	20 f0       	brcs	.+8      	; 0x342 <EncoderPoll+0x96>
                    ref = new;
                    last_state_buf |= mask;
 33a:	41 60       	ori	r20, 0x01	; 1
                    ticks++;
 33c:	2f 5f       	subi	r18, 0xFF	; 255
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	58 2f       	mov	r21, r24
 342:	70 93 66 00 	sts	0x0066, r23
                ref = reference.right;
                ticks = encoderTicks.right;
            }
        } while (--mask > 0); // LEFT:(1 << 1): 2 -> RIGHT:(1 << 0): 1 -> 0
        // writeback RIGHT
        reference.right = ref;
 346:	50 93 65 00 	sts	0x0065, r21
        encoderTicks.right = ticks;
 34a:	30 93 73 00 	sts	0x0073, r19
 34e:	20 93 72 00 	sts	0x0072, r18

        last_state = last_state_buf;
 352:	40 93 64 00 	sts	0x0064, r20
 356:	08 95       	ret

00000358 <EncoderReset>:
    }
}

void EncoderReset(void) {
    encoderTicks.left = 0;
 358:	10 92 71 00 	sts	0x0071, r1
 35c:	10 92 70 00 	sts	0x0070, r1
    encoderTicks.right = 0;
 360:	10 92 73 00 	sts	0x0073, r1
 364:	10 92 72 00 	sts	0x0072, r1
 368:	08 95       	ret

0000036a <GoTurn>:
}

void GoTurn(int16_t distance, int16_t degree, uint8_t speed) {
 36a:	df 92       	push	r13
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	fc 01       	movw	r30, r24
 37a:	8b 01       	movw	r16, r22
 37c:	f4 2e       	mov	r15, r20
    int16_t tick_count;
    uint8_t l_speed = speed;
    uint8_t r_speed = speed;

    if (distance != 0) { // either Go (distance) ...
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	89 f0       	breq	.+34     	; 0x3a4 <GoTurn+0x3a>
        tick_count = (((uint16_t) abs(distance)) * ENC_GO_FACTOR) / ENC_DIVIDER;
 382:	dc 01       	movw	r26, r24
 384:	97 ff       	sbrs	r25, 7
 386:	04 c0       	rjmp	.+8      	; 0x390 <GoTurn+0x26>
 388:	aa 27       	eor	r26, r26
 38a:	bb 27       	eor	r27, r27
 38c:	a8 1b       	sub	r26, r24
 38e:	b9 0b       	sbc	r27, r25
 390:	2c ef       	ldi	r18, 0xFC	; 252
 392:	3e e7       	ldi	r19, 0x7E	; 126
 394:	4a d1       	rcall	.+660    	; 0x62a <__usmulhisi3>
 396:	ec 01       	movw	r28, r24

        if (distance < 0)
 398:	f7 ff       	sbrs	r31, 7
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <GoTurn+0x36>
            MotorDir(RWD, RWD);
 39c:	60 e1       	ldi	r22, 0x10	; 16
 39e:	10 c0       	rjmp	.+32     	; 0x3c0 <GoTurn+0x56>
        else
            MotorDir(FWD, FWD);
 3a0:	60 e2       	ldi	r22, 0x20	; 32
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <GoTurn+0x5c>
    } else { // ... or Turn (degree)
        tick_count = (((uint16_t) abs(degree)) * ENC_TURN_FACTOR) / ENC_DIVIDER;
 3a4:	db 01       	movw	r26, r22
 3a6:	77 ff       	sbrs	r23, 7
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <GoTurn+0x48>
 3aa:	aa 27       	eor	r26, r26
 3ac:	bb 27       	eor	r27, r27
 3ae:	a6 1b       	sub	r26, r22
 3b0:	b7 0b       	sbc	r27, r23
 3b2:	2e ec       	ldi	r18, 0xCE	; 206
 3b4:	3b e6       	ldi	r19, 0x6B	; 107
 3b6:	39 d1       	rcall	.+626    	; 0x62a <__usmulhisi3>
 3b8:	ec 01       	movw	r28, r24

        if (degree < 0)
 3ba:	17 ff       	sbrs	r17, 7
 3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <GoTurn+0x5a>
            MotorDir(RWD, FWD);
 3be:	60 e2       	ldi	r22, 0x20	; 32
 3c0:	80 e1       	ldi	r24, 0x10	; 16
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <GoTurn+0x5e>
        else
            MotorDir(FWD, RWD);
 3c4:	60 e1       	ldi	r22, 0x10	; 16
 3c6:	80 e2       	ldi	r24, 0x20	; 32
 3c8:	99 de       	rcall	.-718    	; 0xfc <MotorDir>
    }

    EncoderReset();
 3ca:	c6 df       	rcall	.-116    	; 0x358 <EncoderReset>
    MotorSpeed(l_speed, r_speed);
 3cc:	6f 2d       	mov	r22, r15
 3ce:	8f 2d       	mov	r24, r15
 3d0:	a1 de       	rcall	.-702    	; 0x114 <MotorSpeed>

    while (tick_count > 0) {
 3d2:	df 2c       	mov	r13, r15
 3d4:	ef 2c       	mov	r14, r15
 3d6:	1c 16       	cp	r1, r28
 3d8:	1d 06       	cpc	r1, r29
 3da:	a4 f5       	brge	.+104    	; 0x444 <GoTurn+0xda>
        const EncoderTicks_t encoder = encoderTicks;
 3dc:	00 91 70 00 	lds	r16, 0x0070
 3e0:	10 91 71 00 	lds	r17, 0x0071
 3e4:	20 91 72 00 	lds	r18, 0x0072
 3e8:	30 91 73 00 	lds	r19, 0x0073
 3ec:	f8 01       	movw	r30, r16
 3ee:	a9 01       	movw	r20, r18

        tick_count -= encoder.left;
 3f0:	c0 1b       	sub	r28, r16
 3f2:	d1 0b       	sbc	r29, r17

        if (encoder.left > encoder.right) {
 3f4:	20 17       	cp	r18, r16
 3f6:	31 07       	cpc	r19, r17
 3f8:	50 f4       	brcc	.+20     	; 0x40e <GoTurn+0xa4>
            if ((l_speed > speed) || (r_speed > 244)) {
 3fa:	fe 14       	cp	r15, r14
 3fc:	18 f0       	brcs	.+6      	; 0x404 <GoTurn+0x9a>
 3fe:	84 ef       	ldi	r24, 0xF4	; 244
 400:	8d 15       	cp	r24, r13
 402:	18 f4       	brcc	.+6      	; 0x40a <GoTurn+0xa0>
                l_speed -= 10;
 404:	86 ef       	ldi	r24, 0xF6	; 246
 406:	e8 0e       	add	r14, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <GoTurn+0xa4>
            } else {
                r_speed += 10;
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	d8 0e       	add	r13, r24
            }
        }

        if (encoder.left < encoder.right) {
 40e:	e4 17       	cp	r30, r20
 410:	f5 07       	cpc	r31, r21
 412:	50 f4       	brcc	.+20     	; 0x428 <GoTurn+0xbe>
            if ((r_speed > speed) || (l_speed > 244)) {
 414:	fd 14       	cp	r15, r13
 416:	18 f0       	brcs	.+6      	; 0x41e <GoTurn+0xb4>
 418:	84 ef       	ldi	r24, 0xF4	; 244
 41a:	8e 15       	cp	r24, r14
 41c:	18 f4       	brcc	.+6      	; 0x424 <GoTurn+0xba>
                r_speed -= 10;
 41e:	86 ef       	ldi	r24, 0xF6	; 246
 420:	d8 0e       	add	r13, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <GoTurn+0xbe>
            } else {
                l_speed += 10;
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	e8 0e       	add	r14, r24
            }
        }

        EncoderReset(); // reset encoder counter after each iteration
 428:	97 df       	rcall	.-210    	; 0x358 <EncoderReset>
        MotorSpeed(l_speed, r_speed);
 42a:	6d 2d       	mov	r22, r13
 42c:	8e 2d       	mov	r24, r14
 42e:	72 de       	rcall	.-796    	; 0x114 <MotorSpeed>

        // sleep for 1ms without missing any new sensor measurments
        for (const uint8_t start = tick36kHz; (uint8_t) (tick36kHz - start) < 36;) {
 430:	10 91 68 00 	lds	r17, 0x0068
 434:	80 91 68 00 	lds	r24, 0x0068
 438:	81 1b       	sub	r24, r17
 43a:	84 32       	cpi	r24, 0x24	; 36
 43c:	60 f6       	brcc	.-104    	; 0x3d6 <GoTurn+0x6c>
            sleepUntilInterrupt();
 43e:	bb de       	rcall	.-650    	; 0x1b6 <sleepUntilInterrupt>
            EncoderPoll();
 440:	35 df       	rcall	.-406    	; 0x2ac <EncoderPoll>
 442:	f8 cf       	rjmp	.-16     	; 0x434 <GoTurn+0xca>
        }
    }

    MotorSpeed(0, 0); // stop controlling the motors
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
            sleepUntilInterrupt();
            EncoderPoll();
        }
    }

    MotorSpeed(0, 0); // stop controlling the motors
 456:	5e ce       	rjmp	.-836    	; 0x114 <MotorSpeed>

00000458 <EncoderMovementReset>:
}

void EncoderMovementReset(void) {
    leftMovementSpeed = 0;
 458:	10 92 63 00 	sts	0x0063, r1
    rightMovementSpeed = 0;
 45c:	10 92 62 00 	sts	0x0062, r1
    deltaMovementSpeed = 0;
 460:	10 92 61 00 	sts	0x0061, r1
 464:	08 95       	ret

00000466 <EncoderInit>:
static int8_t deltaMovementSpeed;

void EncoderInit(void) {
    // reference 0 + last_state "high" -> adjustment to the current odometry
    // sensor value at next call of EncoderPoll()
    reference.left = 0;
 466:	10 92 66 00 	sts	0x0066, r1
    reference.right = 0;
 46a:	10 92 65 00 	sts	0x0065, r1
    last_state = ENCODER_STATE_LEFT | ENCODER_STATE_RIGHT;
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	80 93 64 00 	sts	0x0064, r24

    EncoderReset();
 474:	71 df       	rcall	.-286    	; 0x358 <EncoderReset>
    EncoderMovementReset();
 476:	f0 cf       	rjmp	.-32     	; 0x458 <EncoderMovementReset>

00000478 <SwitchInit>:
#if SWITCH_ISR_HOOK_ENABLE
    ISRHookFunc_t *SwitchISRHook;
#endif

void SwitchInit(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 478:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 47a:	f8 94       	cli
        GICR &= ~(1 << INT1); // switch interrupt (INT1) off
 47c:	8b b7       	in	r24, 0x3b	; 59
 47e:	8f 77       	andi	r24, 0x7F	; 127
 480:	8b bf       	out	0x3b, r24	; 59

        uint8_t mcucr = MCUCR;
 482:	85 b7       	in	r24, 0x35	; 53

        mcucr |= (1 << ISC10); // trigger interrupt on rising or falling edge
        mcucr &= ~(1 << ISC11);
 484:	87 7f       	andi	r24, 0xF7	; 247
 486:	84 60       	ori	r24, 0x04	; 4

        MCUCR = mcucr;
 488:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 48a:	9f bf       	out	0x3f, r25	; 63
    }

    DDRC &= ~(1 << DDC4); // configure measurment input to input, low
 48c:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= (1 << PC4);
 48e:	85 b3       	in	r24, 0x15	; 21
 490:	80 71       	andi	r24, 0x10	; 16
 492:	85 bb       	out	0x15, r24	; 21

    SWITCH_INPUT();
 494:	8b 98       	cbi	0x11, 3	; 17
    SWITCH_OFF();
 496:	93 98       	cbi	0x12, 3	; 18
    switch_event = false;
 498:	10 92 74 00 	sts	0x0074, r1
 49c:	08 95       	ret

0000049e <PollSwitch>:
}

uint8_t PollSwitch(void) {
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
    uint16_t value = 0;

    SWITCH_ON();
 4a6:	93 9a       	sbi	0x12, 3	; 18
    SWITCH_OUTPUT();
 4a8:	8b 9a       	sbi	0x11, 3	; 17

    ADC_BLOCK {
 4aa:	61 d0       	rcall	.+194    	; 0x56e <__ADCBlockEnter>
 4ac:	08 2f       	mov	r16, r24
        ADCSelectChannel(ADC_SWITCH);
 4ae:	84 e4       	ldi	r24, 0x44	; 68
 4b0:	86 d0       	rcall	.+268    	; 0x5be <ADCSelectChannel>
 4b2:	14 e0       	ldi	r17, 0x04	; 4
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0

        for (uint8_t i = 0; i < 4; i++) { // 4x oversampling
            ADCMeasure();
 4b8:	8b d0       	rcall	.+278    	; 0x5d0 <ADCMeasure>
            value += ADC;
 4ba:	24 b1       	in	r18, 0x04	; 4
 4bc:	35 b1       	in	r19, 0x05	; 5
 4be:	c2 0f       	add	r28, r18
 4c0:	d3 1f       	adc	r29, r19
 4c2:	11 50       	subi	r17, 0x01	; 1
    SWITCH_OUTPUT();

    ADC_BLOCK {
        ADCSelectChannel(ADC_SWITCH);

        for (uint8_t i = 0; i < 4; i++) { // 4x oversampling
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <PollSwitch+0x1a>
 4c6:	80 2f       	mov	r24, r16
 4c8:	64 d0       	rcall	.+200    	; 0x592 <__ADCBlockLeave>
            ADCMeasure();
            value += ADC;
        }
    }

    SWITCH_INPUT();
 4ca:	8b 98       	cbi	0x11, 3	; 17
    SWITCH_OFF();
 4cc:	93 98       	cbi	0x12, 3	; 18

    value /= 4; // divide by four, filter out some noise
 4ce:	be 01       	movw	r22, r28
 4d0:	76 95       	lsr	r23
 4d2:	67 95       	ror	r22
 4d4:	76 95       	lsr	r23
 4d6:	67 95       	ror	r22
     */
    if ((uint32_t) (SWITCH_FACTOR * 1024UL) + (1023 / 2) > UINT16_MAX) {
        return ((uint8_t) (((uint32_t) (1024UL * SWITCH_FACTOR) + value / 2) / value))
                - (uint8_t) SWITCH_FACTOR;
    } else {
        return ((uint8_t) (((uint16_t) (1024U * SWITCH_FACTOR) + value / 2) / value))
 4d8:	cb 01       	movw	r24, r22
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	94 50       	subi	r25, 0x04	; 4
 4e0:	90 d0       	rcall	.+288    	; 0x602 <__udivmodhi4>
                - (uint8_t) SWITCH_FACTOR;
    }
}
 4e2:	81 ec       	ldi	r24, 0xC1	; 193
 4e4:	86 0f       	add	r24, r22
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <__vector_2>:
        GICR &= ~(1 << INT1); // disable interrupt
    }
}

ISR(INT1_vect)
{
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	8f 93       	push	r24
    switch_event = true;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 74 00 	sts	0x0074, r24

    // SwitchInterruptDisable();
    // disabled function call to the equivalent function since GCC does not
    // inline it and produces a lot of stack push/pop operations.
    GICR &= ~(1 << INT1); // disable interrupt
 502:	8b b7       	in	r24, 0x3b	; 59
 504:	8f 77       	andi	r24, 0x7F	; 127
 506:	8b bf       	out	0x3b, r24	; 59
#if SWITCH_ISR_HOOK_ENABLE
    if (SwitchISRHook != NULL) {
        SwitchISRHook();
    }
#endif
}
 508:	8f 91       	pop	r24
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <StatusLED>:
    BackLEDFast(OFF);
    StatusLED(GREEN);
}

void StatusLED(const uint8_t color) {
    GREEN_LED_OFF();
 514:	c0 98       	cbi	0x18, 0	; 24
    RED_LED_OFF();
 516:	92 98       	cbi	0x12, 2	; 18

    if (color & GREEN) {
 518:	80 fd       	sbrc	r24, 0
        GREEN_LED_ON();
 51a:	c0 9a       	sbi	0x18, 0	; 24
    }

    if (color & RED) {
 51c:	81 fd       	sbrc	r24, 1
        RED_LED_ON();
 51e:	92 9a       	sbi	0x12, 2	; 18
 520:	08 95       	ret

00000522 <BackLEDFast>:
        FRONT_LED_OFF();
    }
}

void BackLEDFast(const uint8_t leds) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 522:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 524:	f8 94       	cli
        if (leds > 0) {
 526:	88 23       	and	r24, r24
 528:	19 f0       	breq	.+6      	; 0x530 <BackLEDFast+0xe>
            LED_CONFIGURE_BACK();
 52a:	97 98       	cbi	0x12, 7	; 18
 52c:	a1 9a       	sbi	0x14, 1	; 20
 52e:	a0 9a       	sbi	0x14, 0	; 20
        }

        PORTC = (PORTC & ~BACK_LED_BOTH) | leds;
 530:	95 b3       	in	r25, 0x15	; 21
 532:	9c 7f       	andi	r25, 0xFC	; 252
 534:	98 2b       	or	r25, r24
 536:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 538:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 53a:	08 95       	ret

0000053c <LEDInit>:

#include <asuro/led.h>
#include <util/misc.h>

void LEDInit(void) {
    DDRB |= GREEN_LED;
 53c:	b8 9a       	sbi	0x17, 0	; 23
    DDRD |= FRONT_LED | ODOMETRY_LED | RED_LED;
 53e:	81 b3       	in	r24, 0x11	; 17
 540:	84 6c       	ori	r24, 0xC4	; 196
 542:	81 bb       	out	0x11, r24	; 17

    FRONT_LED_OFF();
 544:	96 98       	cbi	0x12, 6	; 18
    LED_CONFIGURE_BACK();
 546:	97 98       	cbi	0x12, 7	; 18
 548:	a1 9a       	sbi	0x14, 1	; 20
 54a:	a0 9a       	sbi	0x14, 0	; 20
    BackLEDFast(OFF);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	e9 df       	rcall	.-46     	; 0x522 <BackLEDFast>
    StatusLED(GREEN);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	e0 cf       	rjmp	.-64     	; 0x514 <StatusLED>

00000554 <Init>:

void Init(void) {
    // The serial interface has already been initialized from the bootloader
    // SerInit();

    Timer2Init();
 554:	f9 dd       	rcall	.-1038   	; 0x148 <Timer2Init>
    MotorInit();
 556:	e5 dd       	rcall	.-1078   	; 0x122 <MotorInit>
    LEDInit();
 558:	f1 df       	rcall	.-30     	; 0x53c <LEDInit>

    ADCInit();
 55a:	03 d0       	rcall	.+6      	; 0x562 <ADCInit>
    SwitchInit();
 55c:	8d df       	rcall	.-230    	; 0x478 <SwitchInit>

    sei();
 55e:	78 94       	sei
 560:	08 95       	ret

00000562 <ADCInit>:
        ADCOff();
    }
}

void ADCInit(void) {
    old_channel = ADMUX_RESERVED_VALUE;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	80 93 67 00 	sts	0x0067, r24
    ADCSRA = ADCSRA_BASE_VALUE;
 568:	86 e0       	ldi	r24, 0x06	; 6
 56a:	86 b9       	out	0x06, r24	; 6
 56c:	08 95       	ret

0000056e <__ADCBlockEnter>:
}

uint8_t __ADCBlockEnter(void) {
    const uint8_t _sreg = SREG;
 56e:	2f b7       	in	r18, 0x3f	; 63

    cli();
 570:	f8 94       	cli
    const uint8_t _admux = ADMUX;
 572:	87 b1       	in	r24, 0x07	; 7
    const uint8_t _adcsra = ADCSRA & ((1 << ADEN) | (1 << ADIE));
 574:	96 b1       	in	r25, 0x06	; 6
 576:	39 2f       	mov	r19, r25
 578:	38 78       	andi	r19, 0x88	; 136

    uint8_t result = ADMUX_RESERVED_VALUE;

    if (_adcsra) { // ADC is already enabled
 57a:	31 f0       	breq	.+12     	; 0x588 <__ADCBlockEnter+0x1a>
        if (_adcsra & (1 << ADIE)) {
 57c:	93 ff       	sbrs	r25, 3
 57e:	05 c0       	rjmp	.+10     	; 0x58a <__ADCBlockEnter+0x1c>
            // interrupt asynchronous mode
            old_channel = _admux;
 580:	80 93 67 00 	sts	0x0067, r24
            ADCSRA = ADCSRA_BASE_VALUE | (1 << ADEN); // ADIE off, ADC left on
 584:	86 e8       	ldi	r24, 0x86	; 134
 586:	86 b9       	out	0x06, r24	; 6

    cli();
    const uint8_t _admux = ADMUX;
    const uint8_t _adcsra = ADCSRA & ((1 << ADEN) | (1 << ADIE));

    uint8_t result = ADMUX_RESERVED_VALUE;
 588:	8f ef       	ldi	r24, 0xFF	; 255
            // interrupt a "normal" AD conversion
            result = _admux;
        }
    }

    SREG = _sreg; // restore interrupt flag before blocking/polling loop
 58a:	2f bf       	out	0x3f, r18	; 63

    while (ADCSRA & (1 << ADSC))
 58c:	36 99       	sbic	0x06, 6	; 6
 58e:	fe cf       	rjmp	.-4      	; 0x58c <__ADCBlockEnter+0x1e>
        ; // wait until the conversion has been finished

    return result;
}
 590:	08 95       	ret

00000592 <__ADCBlockLeave>:

void __ADCBlockLeave(uint8_t stored) {
    uint8_t adcsra_restore = ADCSRA_BASE_VALUE | (1 << ADEN) | (1 << ADSC) | (1 << ADIF);
    // sets ADC state to: on, start (foreign) conversion, clear interrupt flag
    const uint8_t _sreg = SREG;
 592:	3f b7       	in	r19, 0x3f	; 63

    cli();
 594:	f8 94       	cli

    if (stored == ADMUX_RESERVED_VALUE) {
 596:	8f 3f       	cpi	r24, 0xFF	; 255
 598:	31 f4       	brne	.+12     	; 0x5a6 <__ADCBlockLeave+0x14>
        stored = old_channel;
 59a:	80 91 67 00 	lds	r24, 0x0067
        // interrupted asynchronous mode, re-enable ADC interrupt
        adcsra_restore |= (1 << ADIE);
    }

    if (stored == ADMUX_RESERVED_VALUE) {
 59e:	8f 3f       	cpi	r24, 0xFF	; 255
 5a0:	51 f0       	breq	.+20     	; 0x5b6 <__ADCBlockLeave+0x24>
    cli();

    if (stored == ADMUX_RESERVED_VALUE) {
        stored = old_channel;
        // interrupted asynchronous mode, re-enable ADC interrupt
        adcsra_restore |= (1 << ADIE);
 5a2:	2e ed       	ldi	r18, 0xDE	; 222
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <__ADCBlockLeave+0x16>

    return result;
}

void __ADCBlockLeave(uint8_t stored) {
    uint8_t adcsra_restore = ADCSRA_BASE_VALUE | (1 << ADEN) | (1 << ADSC) | (1 << ADIF);
 5a6:	26 ed       	ldi	r18, 0xD6	; 214
    }

    if (stored == ADMUX_RESERVED_VALUE) {
        adcsra_restore = 0; // ADC off
    } else {
        disableADCOnRefChange(ADMUX, stored);
 5a8:	97 b1       	in	r25, 0x07	; 7
 * @param newmux the new channel configuration
 * \endif
 */
static inline void disableADCOnRefChange(const uint8_t oldmux,
        const uint8_t newmux) {
    if ((oldmux & ADC_REF_MASK) != (newmux & ADC_REF_MASK)) {
 5aa:	98 27       	eor	r25, r24
 5ac:	90 7c       	andi	r25, 0xC0	; 192
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__ADCBlockLeave+0x20>
 * \if en
 * Shuts down the ADC completely.
 * \endif
 */
static inline void ADCOff(void) {
    ADCSRA = 0;
 5b0:	16 b8       	out	0x06, r1	; 6

    if (stored == ADMUX_RESERVED_VALUE) {
        adcsra_restore = 0; // ADC off
    } else {
        disableADCOnRefChange(ADMUX, stored);
        ADMUX = stored;
 5b2:	87 b9       	out	0x07, r24	; 7
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <__ADCBlockLeave+0x26>
        // interrupted asynchronous mode, re-enable ADC interrupt
        adcsra_restore |= (1 << ADIE);
    }

    if (stored == ADMUX_RESERVED_VALUE) {
        adcsra_restore = 0; // ADC off
 5b6:	20 e0       	ldi	r18, 0x00	; 0
    } else {
        disableADCOnRefChange(ADMUX, stored);
        ADMUX = stored;
    }

    ADCSRA = adcsra_restore;
 5b8:	26 b9       	out	0x06, r18	; 6
    SREG = _sreg;
 5ba:	3f bf       	out	0x3f, r19	; 63
 5bc:	08 95       	ret

000005be <ADCSelectChannel>:
}

void ADCSelectChannel(const uint8_t channel) {
    // enforce "long" conversion if reference voltage changes
    disableADCOnRefChange(ADMUX, channel);
 5be:	97 b1       	in	r25, 0x07	; 7
 * @param newmux the new channel configuration
 * \endif
 */
static inline void disableADCOnRefChange(const uint8_t oldmux,
        const uint8_t newmux) {
    if ((oldmux & ADC_REF_MASK) != (newmux & ADC_REF_MASK)) {
 5c0:	98 27       	eor	r25, r24
 5c2:	90 7c       	andi	r25, 0xC0	; 192
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <ADCSelectChannel+0xa>
 * \if en
 * Shuts down the ADC completely.
 * \endif
 */
static inline void ADCOff(void) {
    ADCSRA = 0;
 5c6:	16 b8       	out	0x06, r1	; 6
}

void ADCSelectChannel(const uint8_t channel) {
    // enforce "long" conversion if reference voltage changes
    disableADCOnRefChange(ADMUX, channel);
    ADCSRA = ADCSRA_BASE_VALUE | (1 << ADEN); // ADC on
 5c8:	96 e8       	ldi	r25, 0x86	; 134
 5ca:	96 b9       	out	0x06, r25	; 6
    ADMUX = channel;
 5cc:	87 b9       	out	0x07, r24	; 7
 5ce:	08 95       	ret

000005d0 <ADCMeasure>:
}

void ADCMeasure(void) {
    ADCSRA |= (1 << ADSC); // do not take care of ADIF since ADIE should be off
 5d0:	36 9a       	sbi	0x06, 6	; 6

    while (ADCSRA & (1 << ADSC))
 5d2:	36 99       	sbic	0x06, 6	; 6
 5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <ADCMeasure+0x2>
        ; // wait until the conversion has been finishied
}
 5d6:	08 95       	ret

000005d8 <ADCInterruptEnable>:

void ADCInterruptEnable(const uint8_t channel) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 5d8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5da:	f8 94       	cli
        const uint8_t _adcsra = ADCSRA;
 5dc:	96 b1       	in	r25, 0x06	; 6

        if (!(_adcsra & (1 << ADEN)) || (_adcsra & (1 << ADIE))) {
 5de:	97 ff       	sbrs	r25, 7
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <ADCInterruptEnable+0xe>
 5e2:	93 ff       	sbrs	r25, 3
 5e4:	0a c0       	rjmp	.+20     	; 0x5fa <ADCInterruptEnable+0x22>
            // ADC is off or asynchronous mode is already enabled

            disableADCOnRefChange(ADMUX, channel);
 5e6:	97 b1       	in	r25, 0x07	; 7
 * @param newmux the new channel configuration
 * \endif
 */
static inline void disableADCOnRefChange(const uint8_t oldmux,
        const uint8_t newmux) {
    if ((oldmux & ADC_REF_MASK) != (newmux & ADC_REF_MASK)) {
 5e8:	98 27       	eor	r25, r24
 5ea:	90 7c       	andi	r25, 0xC0	; 192
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <ADCInterruptEnable+0x18>
 * \if en
 * Shuts down the ADC completely.
 * \endif
 */
static inline void ADCOff(void) {
    ADCSRA = 0;
 5ee:	16 b8       	out	0x06, r1	; 6
        if (!(_adcsra & (1 << ADEN)) || (_adcsra & (1 << ADIE))) {
            // ADC is off or asynchronous mode is already enabled

            disableADCOnRefChange(ADMUX, channel);

            if (ADCSRA & (1 << ADSC)) { // interrupt running conversion, if any
 5f0:	36 99       	sbic	0x06, 6	; 6
 * \if en
 * Shuts down the ADC completely.
 * \endif
 */
static inline void ADCOff(void) {
    ADCSRA = 0;
 5f2:	16 b8       	out	0x06, r1	; 6

            if (ADCSRA & (1 << ADSC)) { // interrupt running conversion, if any
                ADCOff();
            }

            ADMUX = channel;
 5f4:	87 b9       	out	0x07, r24	; 7
            ADCSRA = ADCSRA_BASE_VALUE | (1 << ADEN) | (1 << ADSC)
 5f6:	9e ed       	ldi	r25, 0xDE	; 222
 5f8:	96 b9       	out	0x06, r25	; 6
        }

        // would normally be an "else", but this way is faster
        // At least one ADC_BLOCK ist active, store desired channel
        // configuration until the ADC_BLOCK is left.
        old_channel = channel;
 5fa:	80 93 67 00 	sts	0x0067, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5fe:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 600:	08 95       	ret

00000602 <__udivmodhi4>:
 602:	aa 1b       	sub	r26, r26
 604:	bb 1b       	sub	r27, r27
 606:	51 e1       	ldi	r21, 0x11	; 17
 608:	07 c0       	rjmp	.+14     	; 0x618 <__udivmodhi4_ep>

0000060a <__udivmodhi4_loop>:
 60a:	aa 1f       	adc	r26, r26
 60c:	bb 1f       	adc	r27, r27
 60e:	a6 17       	cp	r26, r22
 610:	b7 07       	cpc	r27, r23
 612:	10 f0       	brcs	.+4      	; 0x618 <__udivmodhi4_ep>
 614:	a6 1b       	sub	r26, r22
 616:	b7 0b       	sbc	r27, r23

00000618 <__udivmodhi4_ep>:
 618:	88 1f       	adc	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	5a 95       	dec	r21
 61e:	a9 f7       	brne	.-22     	; 0x60a <__udivmodhi4_loop>
 620:	80 95       	com	r24
 622:	90 95       	com	r25
 624:	bc 01       	movw	r22, r24
 626:	cd 01       	movw	r24, r26
 628:	08 95       	ret

0000062a <__usmulhisi3>:
 62a:	05 d0       	rcall	.+10     	; 0x636 <__umulhisi3>

0000062c <__usmulhisi3_tail>:
 62c:	b7 ff       	sbrs	r27, 7
 62e:	08 95       	ret
 630:	82 1b       	sub	r24, r18
 632:	93 0b       	sbc	r25, r19
 634:	08 95       	ret

00000636 <__umulhisi3>:
 636:	a2 9f       	mul	r26, r18
 638:	b0 01       	movw	r22, r0
 63a:	b3 9f       	mul	r27, r19
 63c:	c0 01       	movw	r24, r0
 63e:	a3 9f       	mul	r26, r19
 640:	01 d0       	rcall	.+2      	; 0x644 <__umulhisi3+0xe>
 642:	b2 9f       	mul	r27, r18
 644:	70 0d       	add	r23, r0
 646:	81 1d       	adc	r24, r1
 648:	11 24       	eor	r1, r1
 64a:	91 1d       	adc	r25, r1
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
