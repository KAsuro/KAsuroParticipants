
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  000004f6  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a43  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d30  00000000  00000000  0000216b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b3  00000000  00000000  00002e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000454  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000762  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e5b  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00005261  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	7f c1       	rjmp	.+766    	; 0x304 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	9d c1       	rjmp	.+826    	; 0x344 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 37       	cpi	r26, 0x75	; 117
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	0c c2       	rjmp	.+1048   	; 0x45e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
/**
 * Beschreibt hier was euer Programm macht!
 */
#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
  54:	1a 82       	std	Y+2, r1	; 0x02
  56:	19 82       	std	Y+1, r1	; 0x01
  58:	1c 82       	std	Y+4, r1	; 0x04
  5a:	1b 82       	std	Y+3, r1	; 0x03
	int turns = 0;

    Init();
  5c:	43 d0       	rcall	.+134    	; 0xe4 <Init>
    EncoderInit();
  5e:	59 d0       	rcall	.+178    	; 0x112 <EncoderInit>
    
    MotorDir(FWD,FWD);
  60:	60 e2       	ldi	r22, 0x20	; 32
  62:	80 e2       	ldi	r24, 0x20	; 32
  64:	7f d0       	rcall	.+254    	; 0x164 <MotorDir>
    MotorSpeed(80,80);
  66:	60 e5       	ldi	r22, 0x50	; 80
  68:	80 e5       	ldi	r24, 0x50	; 80
  6a:	88 d0       	rcall	.+272    	; 0x17c <MotorSpeed>
    
    char switches = PollSwitch();
  6c:	22 d1       	rcall	.+580    	; 0x2b2 <PollSwitch>
		
	switches &= 0b00111111;
		
	LineData(data);
  6e:	ce 01       	movw	r24, r28
  70:	01 96       	adiw	r24, 0x01	; 1
  72:	9e d0       	rcall	.+316    	; 0x1b0 <LineData>
	white[LEFT] = data[LEFT] - 200;
  74:	c9 80       	ldd	r12, Y+1	; 0x01
  76:	da 80       	ldd	r13, Y+2	; 0x02
  78:	88 ec       	ldi	r24, 0xC8	; 200
  7a:	c8 1a       	sub	r12, r24
  7c:	d1 08       	sbc	r13, r1
	white[RIGHT] = data[RIGHT] - 200;
  7e:	ab 80       	ldd	r10, Y+3	; 0x03
  80:	bc 80       	ldd	r11, Y+4	; 0x04
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	a8 1a       	sub	r10, r24
  86:	b1 08       	sbc	r11, r1
#include <asuro/asuro.h>

void main(void) {
	uint16_t white[] = {0, 0};
	uint16_t data[]  = {0, 0};
	int turns = 0;
  88:	00 e0       	ldi	r16, 0x00	; 0
  8a:	10 e0       	ldi	r17, 0x00	; 0
	LineData(data);
	white[LEFT] = data[LEFT] - 200;
	white[RIGHT] = data[RIGHT] - 200;
	
	while(1) {
		LineData(data);
  8c:	ce 01       	movw	r24, r28
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	8f d0       	rcall	.+286    	; 0x1b0 <LineData>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	8c 15       	cp	r24, r12
  98:	9d 05       	cpc	r25, r13
  9a:	78 f4       	brcc	.+30     	; 0xba <main+0x72>
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	9c 81       	ldd	r25, Y+4	; 0x04
  a0:	8a 15       	cp	r24, r10
  a2:	9b 05       	cpc	r25, r11
  a4:	50 f4       	brcc	.+20     	; 0xba <main+0x72>
			//GoTurn(0,90,80);
			StatusLED(GREEN);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	3d d0       	rcall	.+122    	; 0x124 <StatusLED>
			turns++;
			if(turns == 2) {
  aa:	01 30       	cpi	r16, 0x01	; 1
  ac:	11 05       	cpc	r17, r1
  ae:	61 f4       	brne	.+24     	; 0xc8 <main+0x80>
				turns = 0;
				//GoTurn(0,180,80);
				StatusLED(RED);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	38 d0       	rcall	.+112    	; 0x124 <StatusLED>
		if((white[LEFT] > data[LEFT]) && (white[RIGHT] > data[RIGHT])) {
			//GoTurn(0,90,80);
			StatusLED(GREEN);
			turns++;
			if(turns == 2) {
				turns = 0;
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	09 c0       	rjmp	.+18     	; 0xcc <main+0x84>
				//GoTurn(0,180,80);
				StatusLED(RED);
			}
		} else {
			MotorDir(FWD, FWD);
  ba:	60 e2       	ldi	r22, 0x20	; 32
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	52 d0       	rcall	.+164    	; 0x164 <MotorDir>
			MotorSpeed(80,80);
  c0:	60 e5       	ldi	r22, 0x50	; 80
  c2:	80 e5       	ldi	r24, 0x50	; 80
  c4:	5b d0       	rcall	.+182    	; 0x17c <MotorSpeed>
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x84>
  c8:	01 e0       	ldi	r16, 0x01	; 1
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	e8 2e       	mov	r14, r24
  d0:	f1 2c       	mov	r15, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  d2:	84 e2       	ldi	r24, 0x24	; 36
  d4:	4b d1       	rcall	.+662    	; 0x36c <sleep>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	e8 1a       	sub	r14, r24
  da:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  dc:	e1 14       	cp	r14, r1
  de:	f1 04       	cpc	r15, r1
  e0:	c1 f7       	brne	.-16     	; 0xd2 <main+0x8a>
  e2:	d4 cf       	rjmp	.-88     	; 0x8c <main+0x44>

000000e4 <Init>:
  e4:	21 d1       	rcall	.+578    	; 0x328 <Timer2Init>
  e6:	51 d0       	rcall	.+162    	; 0x18a <MotorInit>
  e8:	31 d0       	rcall	.+98     	; 0x14c <LEDInit>
  ea:	55 d1       	rcall	.+682    	; 0x396 <ADCInit>
  ec:	cf d0       	rcall	.+414    	; 0x28c <SwitchInit>
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <EncoderReset>:
  f2:	10 92 69 00 	sts	0x0069, r1
  f6:	10 92 68 00 	sts	0x0068, r1
  fa:	10 92 6b 00 	sts	0x006B, r1
  fe:	10 92 6a 00 	sts	0x006A, r1
 102:	08 95       	ret

00000104 <EncoderMovementReset>:
 104:	10 92 62 00 	sts	0x0062, r1
 108:	10 92 61 00 	sts	0x0061, r1
 10c:	10 92 60 00 	sts	0x0060, r1
 110:	08 95       	ret

00000112 <EncoderInit>:
 112:	10 92 65 00 	sts	0x0065, r1
 116:	10 92 64 00 	sts	0x0064, r1
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	80 93 63 00 	sts	0x0063, r24
 120:	e8 df       	rcall	.-48     	; 0xf2 <EncoderReset>
 122:	f0 cf       	rjmp	.-32     	; 0x104 <EncoderMovementReset>

00000124 <StatusLED>:
 124:	c0 98       	cbi	0x18, 0	; 24
 126:	92 98       	cbi	0x12, 2	; 18
 128:	80 fd       	sbrc	r24, 0
 12a:	c0 9a       	sbi	0x18, 0	; 24
 12c:	81 fd       	sbrc	r24, 1
 12e:	92 9a       	sbi	0x12, 2	; 18
 130:	08 95       	ret

00000132 <BackLEDFast>:
 132:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 134:	f8 94       	cli
 136:	88 23       	and	r24, r24
 138:	19 f0       	breq	.+6      	; 0x140 <BackLEDFast+0xe>
 13a:	97 98       	cbi	0x12, 7	; 18
 13c:	a1 9a       	sbi	0x14, 1	; 20
 13e:	a0 9a       	sbi	0x14, 0	; 20
 140:	95 b3       	in	r25, 0x15	; 21
 142:	9c 7f       	andi	r25, 0xFC	; 252
 144:	98 2b       	or	r25, r24
 146:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 148:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 14a:	08 95       	ret

0000014c <LEDInit>:
 14c:	b8 9a       	sbi	0x17, 0	; 23
 14e:	81 b3       	in	r24, 0x11	; 17
 150:	84 6c       	ori	r24, 0xC4	; 196
 152:	81 bb       	out	0x11, r24	; 17
 154:	96 98       	cbi	0x12, 6	; 18
 156:	97 98       	cbi	0x12, 7	; 18
 158:	a1 9a       	sbi	0x14, 1	; 20
 15a:	a0 9a       	sbi	0x14, 0	; 20
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	e9 df       	rcall	.-46     	; 0x132 <BackLEDFast>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	e0 cf       	rjmp	.-64     	; 0x124 <StatusLED>

00000164 <MotorDir>:
 164:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 166:	f8 94       	cli
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9f 7c       	andi	r25, 0xCF	; 207
 16c:	89 2b       	or	r24, r25
 16e:	82 bb       	out	0x12, r24	; 18
 170:	88 b3       	in	r24, 0x18	; 24
 172:	8f 7c       	andi	r24, 0xCF	; 207
 174:	68 2b       	or	r22, r24
 176:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 178:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 17a:	08 95       	ret

0000017c <MotorSpeed>:
 17c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 17e:	f8 94       	cli
 180:	1b bc       	out	0x2b, r1	; 43
 182:	8a bd       	out	0x2a, r24	; 42
 184:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 186:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 188:	08 95       	ret

0000018a <MotorInit>:
 18a:	87 b3       	in	r24, 0x17	; 23
 18c:	86 63       	ori	r24, 0x36	; 54
 18e:	87 bb       	out	0x17, r24	; 23
 190:	81 b3       	in	r24, 0x11	; 17
 192:	80 63       	ori	r24, 0x30	; 48
 194:	81 bb       	out	0x11, r24	; 17
 196:	81 ea       	ldi	r24, 0xA1	; 161
 198:	8f bd       	out	0x2f, r24	; 47
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	8e bd       	out	0x2e, r24	; 46
 19e:	89 b7       	in	r24, 0x39	; 57
 1a0:	83 7c       	andi	r24, 0xC3	; 195
 1a2:	89 bf       	out	0x39, r24	; 57
 1a4:	60 e2       	ldi	r22, 0x20	; 32
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	dd df       	rcall	.-70     	; 0x164 <MotorDir>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	e6 cf       	rjmp	.-52     	; 0x17c <MotorSpeed>

000001b0 <LineData>:
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	f4 d0       	rcall	.+488    	; 0x3a2 <__ADCBlockEnter>
 1ba:	18 2f       	mov	r17, r24
 1bc:	83 e4       	ldi	r24, 0x43	; 67
 1be:	19 d1       	rcall	.+562    	; 0x3f2 <ADCSelectChannel>
 1c0:	21 d1       	rcall	.+578    	; 0x404 <ADCMeasure>
 1c2:	24 b1       	in	r18, 0x04	; 4
 1c4:	35 b1       	in	r19, 0x05	; 5
 1c6:	39 83       	std	Y+1, r19	; 0x01
 1c8:	28 83       	st	Y, r18
 1ca:	82 e4       	ldi	r24, 0x42	; 66
 1cc:	12 d1       	rcall	.+548    	; 0x3f2 <ADCSelectChannel>
 1ce:	1a d1       	rcall	.+564    	; 0x404 <ADCMeasure>
 1d0:	24 b1       	in	r18, 0x04	; 4
 1d2:	35 b1       	in	r19, 0x05	; 5
 1d4:	3b 83       	std	Y+3, r19	; 0x03
 1d6:	2a 83       	std	Y+2, r18	; 0x02
 1d8:	81 2f       	mov	r24, r17
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	f2 c0       	rjmp	.+484    	; 0x3c6 <__ADCBlockLeave>

000001e2 <__vector_14>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
 204:	87 b1       	in	r24, 0x07	; 7
 206:	78 94       	sei
 208:	81 36       	cpi	r24, 0x61	; 97
 20a:	19 f0       	breq	.+6      	; 0x212 <__vector_14+0x30>
 20c:	83 36       	cpi	r24, 0x63	; 99
 20e:	a1 f0       	breq	.+40     	; 0x238 <__vector_14+0x56>
 210:	27 c0       	rjmp	.+78     	; 0x260 <__vector_14+0x7e>
 212:	80 91 6d 00 	lds	r24, 0x006D
 216:	82 fd       	sbrc	r24, 2
 218:	02 c0       	rjmp	.+4      	; 0x21e <__vector_14+0x3c>
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	01 c0       	rjmp	.+2      	; 0x220 <__vector_14+0x3e>
 21e:	82 e6       	ldi	r24, 0x62	; 98
 220:	f8 94       	cli
 222:	95 b1       	in	r25, 0x05	; 5
 224:	90 93 6f 00 	sts	0x006F, r25
 228:	90 91 66 00 	lds	r25, 0x0066
 22c:	90 93 6e 00 	sts	0x006E, r25
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	90 93 72 00 	sts	0x0072, r25
 236:	12 c0       	rjmp	.+36     	; 0x25c <__vector_14+0x7a>
 238:	80 91 6d 00 	lds	r24, 0x006D
 23c:	80 ff       	sbrs	r24, 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <__vector_14+0x62>
 240:	80 e6       	ldi	r24, 0x60	; 96
 242:	01 c0       	rjmp	.+2      	; 0x246 <__vector_14+0x64>
 244:	82 e6       	ldi	r24, 0x62	; 98
 246:	f8 94       	cli
 248:	95 b1       	in	r25, 0x05	; 5
 24a:	90 93 71 00 	sts	0x0071, r25
 24e:	90 91 66 00 	lds	r25, 0x0066
 252:	90 93 70 00 	sts	0x0070, r25
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	90 93 6c 00 	sts	0x006C, r25
 25c:	78 94       	sei
 25e:	04 c0       	rjmp	.+8      	; 0x268 <__vector_14+0x86>
 260:	95 b1       	in	r25, 0x05	; 5
 262:	90 93 66 00 	sts	0x0066, r25
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	d1 d0       	rcall	.+418    	; 0x40c <ADCInterruptEnable>
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <SwitchInit>:
 28c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 28e:	f8 94       	cli
 290:	8b b7       	in	r24, 0x3b	; 59
 292:	8f 77       	andi	r24, 0x7F	; 127
 294:	8b bf       	out	0x3b, r24	; 59
 296:	85 b7       	in	r24, 0x35	; 53
 298:	87 7f       	andi	r24, 0xF7	; 247
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 29e:	9f bf       	out	0x3f, r25	; 63
 2a0:	a4 98       	cbi	0x14, 4	; 20
 2a2:	85 b3       	in	r24, 0x15	; 21
 2a4:	80 71       	andi	r24, 0x10	; 16
 2a6:	85 bb       	out	0x15, r24	; 21
 2a8:	8b 98       	cbi	0x11, 3	; 17
 2aa:	93 98       	cbi	0x12, 3	; 18
 2ac:	10 92 73 00 	sts	0x0073, r1
 2b0:	08 95       	ret

000002b2 <PollSwitch>:
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	93 9a       	sbi	0x12, 3	; 18
 2bc:	8b 9a       	sbi	0x11, 3	; 17
 2be:	71 d0       	rcall	.+226    	; 0x3a2 <__ADCBlockEnter>
 2c0:	08 2f       	mov	r16, r24
 2c2:	84 e4       	ldi	r24, 0x44	; 68
 2c4:	96 d0       	rcall	.+300    	; 0x3f2 <ADCSelectChannel>
 2c6:	14 e0       	ldi	r17, 0x04	; 4
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	9b d0       	rcall	.+310    	; 0x404 <ADCMeasure>
 2ce:	24 b1       	in	r18, 0x04	; 4
 2d0:	35 b1       	in	r19, 0x05	; 5
 2d2:	c2 0f       	add	r28, r18
 2d4:	d3 1f       	adc	r29, r19
 2d6:	11 50       	subi	r17, 0x01	; 1
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <PollSwitch+0x1a>
 2da:	80 2f       	mov	r24, r16
 2dc:	74 d0       	rcall	.+232    	; 0x3c6 <__ADCBlockLeave>
 2de:	8b 98       	cbi	0x11, 3	; 17
 2e0:	93 98       	cbi	0x12, 3	; 18
 2e2:	be 01       	movw	r22, r28
 2e4:	76 95       	lsr	r23
 2e6:	67 95       	ror	r22
 2e8:	76 95       	lsr	r23
 2ea:	67 95       	ror	r22
 2ec:	cb 01       	movw	r24, r22
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	98 50       	subi	r25, 0x08	; 8
 2f4:	a0 d0       	rcall	.+320    	; 0x436 <__udivmodhi4>
 2f6:	82 ec       	ldi	r24, 0xC2	; 194
 2f8:	86 0f       	add	r24, r22
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <__vector_2>:
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 73 00 	sts	0x0073, r24
 316:	8b b7       	in	r24, 0x3b	; 59
 318:	8f 77       	andi	r24, 0x7F	; 127
 31a:	8b bf       	out	0x3b, r24	; 59
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <Timer2Init>:
 328:	12 bc       	out	0x22, r1	; 34
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	85 bd       	out	0x25, r24	; 37
 32e:	89 b7       	in	r24, 0x39	; 57
 330:	80 64       	ori	r24, 0x40	; 64
 332:	89 bf       	out	0x39, r24	; 57
 334:	81 e9       	ldi	r24, 0x91	; 145
 336:	83 bd       	out	0x23, r24	; 35
 338:	85 b5       	in	r24, 0x25	; 37
 33a:	87 78       	andi	r24, 0x87	; 135
 33c:	85 bd       	out	0x25, r24	; 37
 33e:	bb 9a       	sbi	0x17, 3	; 23
 340:	c3 98       	cbi	0x18, 3	; 24
 342:	08 95       	ret

00000344 <__vector_4>:
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	84 b5       	in	r24, 0x24	; 36
 352:	8b 5d       	subi	r24, 0xDB	; 219
 354:	84 bd       	out	0x24, r24	; 36
 356:	80 91 74 00 	lds	r24, 0x0074
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	80 93 74 00 	sts	0x0074, r24
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <sleep>:
 36c:	f8 94       	cli
 36e:	95 b7       	in	r25, 0x35	; 53
 370:	9f 70       	andi	r25, 0x0F	; 15
 372:	90 68       	ori	r25, 0x80	; 128
 374:	95 bf       	out	0x35, r25	; 53
 376:	78 94       	sei
 378:	90 91 74 00 	lds	r25, 0x0074
 37c:	89 0f       	add	r24, r25
 37e:	90 91 74 00 	lds	r25, 0x0074
 382:	98 17       	cp	r25, r24
 384:	11 f0       	breq	.+4      	; 0x38a <sleep+0x1e>
 386:	88 95       	sleep
 388:	fa cf       	rjmp	.-12     	; 0x37e <sleep+0x12>
 38a:	f8 94       	cli
 38c:	85 b7       	in	r24, 0x35	; 53
 38e:	8f 77       	andi	r24, 0x7F	; 127
 390:	85 bf       	out	0x35, r24	; 53
 392:	78 94       	sei
 394:	08 95       	ret

00000396 <ADCInit>:
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	80 93 67 00 	sts	0x0067, r24
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	86 b9       	out	0x06, r24	; 6
 3a0:	08 95       	ret

000003a2 <__ADCBlockEnter>:
 3a2:	2f b7       	in	r18, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	87 b1       	in	r24, 0x07	; 7
 3a8:	96 b1       	in	r25, 0x06	; 6
 3aa:	39 2f       	mov	r19, r25
 3ac:	38 78       	andi	r19, 0x88	; 136
 3ae:	31 f0       	breq	.+12     	; 0x3bc <__ADCBlockEnter+0x1a>
 3b0:	93 ff       	sbrs	r25, 3
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <__ADCBlockEnter+0x1c>
 3b4:	80 93 67 00 	sts	0x0067, r24
 3b8:	86 e8       	ldi	r24, 0x86	; 134
 3ba:	86 b9       	out	0x06, r24	; 6
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	2f bf       	out	0x3f, r18	; 63
 3c0:	36 99       	sbic	0x06, 6	; 6
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <__ADCBlockEnter+0x1e>
 3c4:	08 95       	ret

000003c6 <__ADCBlockLeave>:
 3c6:	3f b7       	in	r19, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	8f 3f       	cpi	r24, 0xFF	; 255
 3cc:	31 f4       	brne	.+12     	; 0x3da <__ADCBlockLeave+0x14>
 3ce:	80 91 67 00 	lds	r24, 0x0067
 3d2:	8f 3f       	cpi	r24, 0xFF	; 255
 3d4:	51 f0       	breq	.+20     	; 0x3ea <__ADCBlockLeave+0x24>
 3d6:	2e ed       	ldi	r18, 0xDE	; 222
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <__ADCBlockLeave+0x16>
 3da:	26 ed       	ldi	r18, 0xD6	; 214
 3dc:	97 b1       	in	r25, 0x07	; 7
 3de:	98 27       	eor	r25, r24
 3e0:	90 7c       	andi	r25, 0xC0	; 192
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <__ADCBlockLeave+0x20>
 3e4:	16 b8       	out	0x06, r1	; 6
 3e6:	87 b9       	out	0x07, r24	; 7
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <__ADCBlockLeave+0x26>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	26 b9       	out	0x06, r18	; 6
 3ee:	3f bf       	out	0x3f, r19	; 63
 3f0:	08 95       	ret

000003f2 <ADCSelectChannel>:
 3f2:	97 b1       	in	r25, 0x07	; 7
 3f4:	98 27       	eor	r25, r24
 3f6:	90 7c       	andi	r25, 0xC0	; 192
 3f8:	09 f0       	breq	.+2      	; 0x3fc <ADCSelectChannel+0xa>
 3fa:	16 b8       	out	0x06, r1	; 6
 3fc:	96 e8       	ldi	r25, 0x86	; 134
 3fe:	96 b9       	out	0x06, r25	; 6
 400:	87 b9       	out	0x07, r24	; 7
 402:	08 95       	ret

00000404 <ADCMeasure>:
 404:	36 9a       	sbi	0x06, 6	; 6
 406:	36 99       	sbic	0x06, 6	; 6
 408:	fe cf       	rjmp	.-4      	; 0x406 <ADCMeasure+0x2>
 40a:	08 95       	ret

0000040c <ADCInterruptEnable>:
 40c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 40e:	f8 94       	cli
 410:	96 b1       	in	r25, 0x06	; 6
 412:	97 ff       	sbrs	r25, 7
 414:	02 c0       	rjmp	.+4      	; 0x41a <ADCInterruptEnable+0xe>
 416:	93 ff       	sbrs	r25, 3
 418:	0a c0       	rjmp	.+20     	; 0x42e <ADCInterruptEnable+0x22>
 41a:	97 b1       	in	r25, 0x07	; 7
 41c:	98 27       	eor	r25, r24
 41e:	90 7c       	andi	r25, 0xC0	; 192
 420:	09 f0       	breq	.+2      	; 0x424 <ADCInterruptEnable+0x18>
 422:	16 b8       	out	0x06, r1	; 6
 424:	36 99       	sbic	0x06, 6	; 6
 426:	16 b8       	out	0x06, r1	; 6
 428:	87 b9       	out	0x07, r24	; 7
 42a:	9e ed       	ldi	r25, 0xDE	; 222
 42c:	96 b9       	out	0x06, r25	; 6
 42e:	80 93 67 00 	sts	0x0067, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 432:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 434:	08 95       	ret

00000436 <__udivmodhi4>:
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	51 e1       	ldi	r21, 0x11	; 17
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__udivmodhi4_ep>

0000043e <__udivmodhi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	a6 17       	cp	r26, r22
 444:	b7 07       	cpc	r27, r23
 446:	10 f0       	brcs	.+4      	; 0x44c <__udivmodhi4_ep>
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23

0000044c <__udivmodhi4_ep>:
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	5a 95       	dec	r21
 452:	a9 f7       	brne	.-22     	; 0x43e <__udivmodhi4_loop>
 454:	80 95       	com	r24
 456:	90 95       	com	r25
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
