
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000454  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001402  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a63  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ad  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005cd  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000087c  00000000  00000000  000035a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00003e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	42 c1       	rjmp	.+644    	; 0x28a <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	60 c1       	rjmp	.+704    	; 0x2ca <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	ce c0       	rjmp	.+412    	; 0x1ba <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	bb c1       	rjmp	.+886    	; 0x3bc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
 * Beschreibt hier was euer Programm macht!
 */

#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	4c d0       	rcall	.+152    	; 0xee <Init>
	
	StatusLED(YELLOW);
  56:	83 e0       	ldi	r24, 0x03	; 3
  58:	51 d0       	rcall	.+162    	; 0xfc <StatusLED>

	uint16_t data[2];
	uint16_t black[2];
	
	//set black value
	LineData(data);
  5a:	ce 01       	movw	r24, r28
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	94 d0       	rcall	.+296    	; 0x188 <LineData>
	black[LEFT] = data[LEFT] + 150;
  60:	e9 80       	ldd	r14, Y+1	; 0x01
  62:	fa 80       	ldd	r15, Y+2	; 0x02
  64:	86 e9       	ldi	r24, 0x96	; 150
  66:	e8 0e       	add	r14, r24
  68:	f1 1c       	adc	r15, r1
	black[RIGHT] = data[RIGHT] + 150;
  6a:	cb 80       	ldd	r12, Y+3	; 0x03
  6c:	dc 80       	ldd	r13, Y+4	; 0x04
  6e:	86 e9       	ldi	r24, 0x96	; 150
  70:	c8 0e       	add	r12, r24
  72:	d1 1c       	adc	r13, r1

    while (1) {
		//updated sensor value
		LineData(data);
  74:	ce 01       	movw	r24, r28
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	87 d0       	rcall	.+270    	; 0x188 <LineData>
        if((black[LEFT] < data[LEFT]) && (black[RIGHT] < data[RIGHT])) { //if not white
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	9a 81       	ldd	r25, Y+2	; 0x02
  7e:	e8 16       	cp	r14, r24
  80:	f9 06       	cpc	r15, r25
  82:	68 f4       	brcc	.+26     	; 0x9e <main+0x56>
  84:	8b 81       	ldd	r24, Y+3	; 0x03
  86:	9c 81       	ldd	r25, Y+4	; 0x04
  88:	c8 16       	cp	r12, r24
  8a:	d9 06       	cpc	r13, r25
  8c:	40 f4       	brcc	.+16     	; 0x9e <main+0x56>
			MotorDir(FWD, RWD);
  8e:	60 e1       	ldi	r22, 0x10	; 16
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	54 d0       	rcall	.+168    	; 0x13c <MotorDir>
			MotorSpeed(90, 90);
  94:	6a e5       	ldi	r22, 0x5A	; 90
  96:	8a e5       	ldi	r24, 0x5A	; 90
  98:	5d d0       	rcall	.+186    	; 0x154 <MotorSpeed>
			StatusLED(GREEN);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	2f d0       	rcall	.+94     	; 0xfc <StatusLED>
		}
		if (data[LEFT] > data[RIGHT]) { //if left is brighter than right
  9e:	29 81       	ldd	r18, Y+1	; 0x01
  a0:	3a 81       	ldd	r19, Y+2	; 0x02
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	9c 81       	ldd	r25, Y+4	; 0x04
  a6:	82 17       	cp	r24, r18
  a8:	93 07       	cpc	r25, r19
  aa:	40 f4       	brcc	.+16     	; 0xbc <main+0x74>
			MotorDir(FWD, FWD);
  ac:	60 e2       	ldi	r22, 0x20	; 32
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	45 d0       	rcall	.+138    	; 0x13c <MotorDir>
			MotorSpeed(0, 100);
  b2:	64 e6       	ldi	r22, 0x64	; 100
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	4e d0       	rcall	.+156    	; 0x154 <MotorSpeed>
			StatusLED(RED);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	20 d0       	rcall	.+64     	; 0xfc <StatusLED>
		}  
		if (data[RIGHT] > data[LEFT]) { // if right is brighter than left
  bc:	2b 81       	ldd	r18, Y+3	; 0x03
  be:	3c 81       	ldd	r19, Y+4	; 0x04
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	82 17       	cp	r24, r18
  c6:	93 07       	cpc	r25, r19
  c8:	40 f4       	brcc	.+16     	; 0xda <main+0x92>
			MotorDir(FWD, FWD);
  ca:	60 e2       	ldi	r22, 0x20	; 32
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	36 d0       	rcall	.+108    	; 0x13c <MotorDir>
			MotorSpeed(100, 0);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	3f d0       	rcall	.+126    	; 0x154 <MotorSpeed>
			StatusLED(YELLOW);
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	11 d0       	rcall	.+34     	; 0xfc <StatusLED>
 * Beschreibt hier was euer Programm macht!
 */

#include <asuro/asuro.h>

void main(void) {
  da:	05 e0       	ldi	r16, 0x05	; 5
  dc:	10 e0       	ldi	r17, 0x00	; 0
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  de:	84 e2       	ldi	r24, 0x24	; 36
  e0:	08 d1       	rcall	.+528    	; 0x2f2 <sleep>
  e2:	01 50       	subi	r16, 0x01	; 1
  e4:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  e6:	01 15       	cp	r16, r1
  e8:	11 05       	cpc	r17, r1
  ea:	c9 f7       	brne	.-14     	; 0xde <main+0x96>
  ec:	c3 cf       	rjmp	.-122    	; 0x74 <main+0x2c>

000000ee <Init>:
  ee:	df d0       	rcall	.+446    	; 0x2ae <Timer2Init>
  f0:	38 d0       	rcall	.+112    	; 0x162 <MotorInit>
  f2:	18 d0       	rcall	.+48     	; 0x124 <LEDInit>
  f4:	13 d1       	rcall	.+550    	; 0x31c <ADCInit>
  f6:	b6 d0       	rcall	.+364    	; 0x264 <SwitchInit>
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <StatusLED>:
  fc:	c0 98       	cbi	0x18, 0	; 24
  fe:	92 98       	cbi	0x12, 2	; 18
 100:	80 fd       	sbrc	r24, 0
 102:	c0 9a       	sbi	0x18, 0	; 24
 104:	81 fd       	sbrc	r24, 1
 106:	92 9a       	sbi	0x12, 2	; 18
 108:	08 95       	ret

0000010a <BackLEDFast>:
 10a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 10c:	f8 94       	cli
 10e:	88 23       	and	r24, r24
 110:	19 f0       	breq	.+6      	; 0x118 <BackLEDFast+0xe>
 112:	97 98       	cbi	0x12, 7	; 18
 114:	a1 9a       	sbi	0x14, 1	; 20
 116:	a0 9a       	sbi	0x14, 0	; 20
 118:	95 b3       	in	r25, 0x15	; 21
 11a:	9c 7f       	andi	r25, 0xFC	; 252
 11c:	98 2b       	or	r25, r24
 11e:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 120:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 122:	08 95       	ret

00000124 <LEDInit>:
 124:	b8 9a       	sbi	0x17, 0	; 23
 126:	81 b3       	in	r24, 0x11	; 17
 128:	84 6c       	ori	r24, 0xC4	; 196
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	96 98       	cbi	0x12, 6	; 18
 12e:	97 98       	cbi	0x12, 7	; 18
 130:	a1 9a       	sbi	0x14, 1	; 20
 132:	a0 9a       	sbi	0x14, 0	; 20
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	e9 df       	rcall	.-46     	; 0x10a <BackLEDFast>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	e0 cf       	rjmp	.-64     	; 0xfc <StatusLED>

0000013c <MotorDir>:
 13c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 13e:	f8 94       	cli
 140:	92 b3       	in	r25, 0x12	; 18
 142:	9f 7c       	andi	r25, 0xCF	; 207
 144:	89 2b       	or	r24, r25
 146:	82 bb       	out	0x12, r24	; 18
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	8f 7c       	andi	r24, 0xCF	; 207
 14c:	68 2b       	or	r22, r24
 14e:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 150:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 152:	08 95       	ret

00000154 <MotorSpeed>:
 154:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 156:	f8 94       	cli
 158:	1b bc       	out	0x2b, r1	; 43
 15a:	8a bd       	out	0x2a, r24	; 42
 15c:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 15e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 160:	08 95       	ret

00000162 <MotorInit>:
 162:	87 b3       	in	r24, 0x17	; 23
 164:	86 63       	ori	r24, 0x36	; 54
 166:	87 bb       	out	0x17, r24	; 23
 168:	81 b3       	in	r24, 0x11	; 17
 16a:	80 63       	ori	r24, 0x30	; 48
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	81 ea       	ldi	r24, 0xA1	; 161
 170:	8f bd       	out	0x2f, r24	; 47
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	8e bd       	out	0x2e, r24	; 46
 176:	89 b7       	in	r24, 0x39	; 57
 178:	83 7c       	andi	r24, 0xC3	; 195
 17a:	89 bf       	out	0x39, r24	; 57
 17c:	60 e2       	ldi	r22, 0x20	; 32
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	dd df       	rcall	.-70     	; 0x13c <MotorDir>
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	e6 cf       	rjmp	.-52     	; 0x154 <MotorSpeed>

00000188 <LineData>:
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
 190:	cb d0       	rcall	.+406    	; 0x328 <__ADCBlockEnter>
 192:	18 2f       	mov	r17, r24
 194:	83 e4       	ldi	r24, 0x43	; 67
 196:	f0 d0       	rcall	.+480    	; 0x378 <ADCSelectChannel>
 198:	f8 d0       	rcall	.+496    	; 0x38a <ADCMeasure>
 19a:	24 b1       	in	r18, 0x04	; 4
 19c:	35 b1       	in	r19, 0x05	; 5
 19e:	39 83       	std	Y+1, r19	; 0x01
 1a0:	28 83       	st	Y, r18
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	e9 d0       	rcall	.+466    	; 0x378 <ADCSelectChannel>
 1a6:	f1 d0       	rcall	.+482    	; 0x38a <ADCMeasure>
 1a8:	24 b1       	in	r18, 0x04	; 4
 1aa:	35 b1       	in	r19, 0x05	; 5
 1ac:	3b 83       	std	Y+3, r19	; 0x03
 1ae:	2a 83       	std	Y+2, r18	; 0x02
 1b0:	81 2f       	mov	r24, r17
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	c9 c0       	rjmp	.+402    	; 0x34c <__ADCBlockLeave>

000001ba <__vector_14>:
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
 1dc:	87 b1       	in	r24, 0x07	; 7
 1de:	78 94       	sei
 1e0:	81 36       	cpi	r24, 0x61	; 97
 1e2:	19 f0       	breq	.+6      	; 0x1ea <__vector_14+0x30>
 1e4:	83 36       	cpi	r24, 0x63	; 99
 1e6:	a1 f0       	breq	.+40     	; 0x210 <__vector_14+0x56>
 1e8:	27 c0       	rjmp	.+78     	; 0x238 <__vector_14+0x7e>
 1ea:	80 91 63 00 	lds	r24, 0x0063
 1ee:	82 fd       	sbrc	r24, 2
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__vector_14+0x3c>
 1f2:	80 e6       	ldi	r24, 0x60	; 96
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <__vector_14+0x3e>
 1f6:	82 e6       	ldi	r24, 0x62	; 98
 1f8:	f8 94       	cli
 1fa:	95 b1       	in	r25, 0x05	; 5
 1fc:	90 93 65 00 	sts	0x0065, r25
 200:	90 91 60 00 	lds	r25, 0x0060
 204:	90 93 64 00 	sts	0x0064, r25
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	90 93 68 00 	sts	0x0068, r25
 20e:	12 c0       	rjmp	.+36     	; 0x234 <__vector_14+0x7a>
 210:	80 91 63 00 	lds	r24, 0x0063
 214:	80 ff       	sbrs	r24, 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <__vector_14+0x62>
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	01 c0       	rjmp	.+2      	; 0x21e <__vector_14+0x64>
 21c:	82 e6       	ldi	r24, 0x62	; 98
 21e:	f8 94       	cli
 220:	95 b1       	in	r25, 0x05	; 5
 222:	90 93 67 00 	sts	0x0067, r25
 226:	90 91 60 00 	lds	r25, 0x0060
 22a:	90 93 66 00 	sts	0x0066, r25
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	90 93 62 00 	sts	0x0062, r25
 234:	78 94       	sei
 236:	04 c0       	rjmp	.+8      	; 0x240 <__vector_14+0x86>
 238:	95 b1       	in	r25, 0x05	; 5
 23a:	90 93 60 00 	sts	0x0060, r25
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	a8 d0       	rcall	.+336    	; 0x392 <ADCInterruptEnable>
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <SwitchInit>:
 264:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 266:	f8 94       	cli
 268:	8b b7       	in	r24, 0x3b	; 59
 26a:	8f 77       	andi	r24, 0x7F	; 127
 26c:	8b bf       	out	0x3b, r24	; 59
 26e:	85 b7       	in	r24, 0x35	; 53
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	84 60       	ori	r24, 0x04	; 4
 274:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 276:	9f bf       	out	0x3f, r25	; 63
 278:	a4 98       	cbi	0x14, 4	; 20
 27a:	85 b3       	in	r24, 0x15	; 21
 27c:	80 71       	andi	r24, 0x10	; 16
 27e:	85 bb       	out	0x15, r24	; 21
 280:	8b 98       	cbi	0x11, 3	; 17
 282:	93 98       	cbi	0x12, 3	; 18
 284:	10 92 69 00 	sts	0x0069, r1
 288:	08 95       	ret

0000028a <__vector_2>:
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	8f 93       	push	r24
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 69 00 	sts	0x0069, r24
 29c:	8b b7       	in	r24, 0x3b	; 59
 29e:	8f 77       	andi	r24, 0x7F	; 127
 2a0:	8b bf       	out	0x3b, r24	; 59
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <Timer2Init>:
 2ae:	12 bc       	out	0x22, r1	; 34
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	85 bd       	out	0x25, r24	; 37
 2b4:	89 b7       	in	r24, 0x39	; 57
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	89 bf       	out	0x39, r24	; 57
 2ba:	81 e9       	ldi	r24, 0x91	; 145
 2bc:	83 bd       	out	0x23, r24	; 35
 2be:	85 b5       	in	r24, 0x25	; 37
 2c0:	87 78       	andi	r24, 0x87	; 135
 2c2:	85 bd       	out	0x25, r24	; 37
 2c4:	bb 9a       	sbi	0x17, 3	; 23
 2c6:	c3 98       	cbi	0x18, 3	; 24
 2c8:	08 95       	ret

000002ca <__vector_4>:
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	84 b5       	in	r24, 0x24	; 36
 2d8:	8b 5d       	subi	r24, 0xDB	; 219
 2da:	84 bd       	out	0x24, r24	; 36
 2dc:	80 91 6a 00 	lds	r24, 0x006A
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 6a 00 	sts	0x006A, r24
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <sleep>:
 2f2:	f8 94       	cli
 2f4:	95 b7       	in	r25, 0x35	; 53
 2f6:	9f 70       	andi	r25, 0x0F	; 15
 2f8:	90 68       	ori	r25, 0x80	; 128
 2fa:	95 bf       	out	0x35, r25	; 53
 2fc:	78 94       	sei
 2fe:	90 91 6a 00 	lds	r25, 0x006A
 302:	89 0f       	add	r24, r25
 304:	90 91 6a 00 	lds	r25, 0x006A
 308:	98 17       	cp	r25, r24
 30a:	11 f0       	breq	.+4      	; 0x310 <sleep+0x1e>
 30c:	88 95       	sleep
 30e:	fa cf       	rjmp	.-12     	; 0x304 <sleep+0x12>
 310:	f8 94       	cli
 312:	85 b7       	in	r24, 0x35	; 53
 314:	8f 77       	andi	r24, 0x7F	; 127
 316:	85 bf       	out	0x35, r24	; 53
 318:	78 94       	sei
 31a:	08 95       	ret

0000031c <ADCInit>:
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	80 93 61 00 	sts	0x0061, r24
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	86 b9       	out	0x06, r24	; 6
 326:	08 95       	ret

00000328 <__ADCBlockEnter>:
 328:	2f b7       	in	r18, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	87 b1       	in	r24, 0x07	; 7
 32e:	96 b1       	in	r25, 0x06	; 6
 330:	39 2f       	mov	r19, r25
 332:	38 78       	andi	r19, 0x88	; 136
 334:	31 f0       	breq	.+12     	; 0x342 <__ADCBlockEnter+0x1a>
 336:	93 ff       	sbrs	r25, 3
 338:	05 c0       	rjmp	.+10     	; 0x344 <__ADCBlockEnter+0x1c>
 33a:	80 93 61 00 	sts	0x0061, r24
 33e:	86 e8       	ldi	r24, 0x86	; 134
 340:	86 b9       	out	0x06, r24	; 6
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	2f bf       	out	0x3f, r18	; 63
 346:	36 99       	sbic	0x06, 6	; 6
 348:	fe cf       	rjmp	.-4      	; 0x346 <__ADCBlockEnter+0x1e>
 34a:	08 95       	ret

0000034c <__ADCBlockLeave>:
 34c:	3f b7       	in	r19, 0x3f	; 63
 34e:	f8 94       	cli
 350:	8f 3f       	cpi	r24, 0xFF	; 255
 352:	31 f4       	brne	.+12     	; 0x360 <__ADCBlockLeave+0x14>
 354:	80 91 61 00 	lds	r24, 0x0061
 358:	8f 3f       	cpi	r24, 0xFF	; 255
 35a:	51 f0       	breq	.+20     	; 0x370 <__ADCBlockLeave+0x24>
 35c:	2e ed       	ldi	r18, 0xDE	; 222
 35e:	01 c0       	rjmp	.+2      	; 0x362 <__ADCBlockLeave+0x16>
 360:	26 ed       	ldi	r18, 0xD6	; 214
 362:	97 b1       	in	r25, 0x07	; 7
 364:	98 27       	eor	r25, r24
 366:	90 7c       	andi	r25, 0xC0	; 192
 368:	09 f0       	breq	.+2      	; 0x36c <__ADCBlockLeave+0x20>
 36a:	16 b8       	out	0x06, r1	; 6
 36c:	87 b9       	out	0x07, r24	; 7
 36e:	01 c0       	rjmp	.+2      	; 0x372 <__ADCBlockLeave+0x26>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	26 b9       	out	0x06, r18	; 6
 374:	3f bf       	out	0x3f, r19	; 63
 376:	08 95       	ret

00000378 <ADCSelectChannel>:
 378:	97 b1       	in	r25, 0x07	; 7
 37a:	98 27       	eor	r25, r24
 37c:	90 7c       	andi	r25, 0xC0	; 192
 37e:	09 f0       	breq	.+2      	; 0x382 <ADCSelectChannel+0xa>
 380:	16 b8       	out	0x06, r1	; 6
 382:	96 e8       	ldi	r25, 0x86	; 134
 384:	96 b9       	out	0x06, r25	; 6
 386:	87 b9       	out	0x07, r24	; 7
 388:	08 95       	ret

0000038a <ADCMeasure>:
 38a:	36 9a       	sbi	0x06, 6	; 6
 38c:	36 99       	sbic	0x06, 6	; 6
 38e:	fe cf       	rjmp	.-4      	; 0x38c <ADCMeasure+0x2>
 390:	08 95       	ret

00000392 <ADCInterruptEnable>:
 392:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 394:	f8 94       	cli
 396:	96 b1       	in	r25, 0x06	; 6
 398:	97 ff       	sbrs	r25, 7
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <ADCInterruptEnable+0xe>
 39c:	93 ff       	sbrs	r25, 3
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <ADCInterruptEnable+0x22>
 3a0:	97 b1       	in	r25, 0x07	; 7
 3a2:	98 27       	eor	r25, r24
 3a4:	90 7c       	andi	r25, 0xC0	; 192
 3a6:	09 f0       	breq	.+2      	; 0x3aa <ADCInterruptEnable+0x18>
 3a8:	16 b8       	out	0x06, r1	; 6
 3aa:	36 99       	sbic	0x06, 6	; 6
 3ac:	16 b8       	out	0x06, r1	; 6
 3ae:	87 b9       	out	0x07, r24	; 7
 3b0:	9e ed       	ldi	r25, 0xDE	; 222
 3b2:	96 b9       	out	0x06, r25	; 6
 3b4:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3b8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
