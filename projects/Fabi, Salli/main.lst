   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.stopAsuro,"ax",@progbits
  11               	.global	stopAsuro
  13               	stopAsuro:
  14               	.LFB3:
  15               		.file 1 "helpers.h"
   1:helpers.h     **** #include <stdio.h>
   2:helpers.h     **** 
   3:helpers.h     **** void stopAsuro(int pause) 
   4:helpers.h     **** {
  16               		.loc 1 4 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28	 ;  45	pushqi1/1	[length = 1]
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29	 ;  46	pushqi1/1	[length = 1]
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
   5:helpers.h     **** 	MotorSpeed(0, 0);
  32               		.loc 1 5 0
  33 0006 60E0      		ldi r22,0	 ;  6	movqi_insn/1	[length = 1]
  34 0008 80E0      		ldi r24,0	 ;  7	movqi_insn/1	[length = 1]
  35               	.LVL1:
  36 000a 00D0      		rcall MotorSpeed	 ;  8	call_insn/2	[length = 1]
  37               	.LVL2:
   6:helpers.h     **** 	if (pause > 0)
  38               		.loc 1 6 0
  39 000c 1C16      		cp __zero_reg__,r28	 ;  9	*reversed_tsthi	[length = 2]
  40 000e 1D06      		cpc __zero_reg__,r29
  41 0010 04F4      		brge .L1	 ;  10	branch	[length = 1]
  42               	.LVL3:
  43               	.L4:
  44               	.LBB10:
  45               	.LBB11:
  46               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  47               		.loc 2 346 0
  48 0012 84E2      		ldi r24,lo8(36)	 ;  21	movqi_insn/2	[length = 1]
  49 0014 00D0      		rcall sleep	 ;  22	call_insn/2	[length = 1]
  50               	.LVL4:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  51               		.loc 2 345 0
  52 0016 2197      		sbiw r28,1	 ;  23	addhi3_clobber/1	[length = 1]
  53               	.LVL5:
  54 0018 2097      		sbiw r28,0	 ;  27	*cmphi/1	[length = 1]
  55 001a 01F4      		brne .L4	 ;  28	branch	[length = 1]
  56               	.LVL6:
  57               	.L1:
  58               	/* epilogue start */
  59               	.LBE11:
  60               	.LBE10:
   7:helpers.h     **** 		msleep(pause);
   8:helpers.h     **** }
  61               		.loc 1 8 0
  62 001c DF91      		pop r29	 ;  49	popqi	[length = 1]
  63 001e CF91      		pop r28	 ;  50	popqi	[length = 1]
  64 0020 0895      		ret	 ;  51	return_from_epilogue	[length = 1]
  65               		.cfi_endproc
  66               	.LFE3:
  68               		.section	.text.startup.main,"ax",@progbits
  69               	.global	main
  71               	main:
  72               	.LFB8:
  73               		.file 3 "main.c"
   1:main.c        **** #define SWITCH(X) 1<<X
   2:main.c        **** 
   3:main.c        **** #include <asuro/asuro.h>
   4:main.c        **** #include "helpers.h"
   5:main.c        **** #include <stdlib.h>
   6:main.c        **** 
   7:main.c        **** void main(void) {
  74               		.loc 3 7 0
  75               		.cfi_startproc
  76 0000 CF93      		push r28	 ;  187	pushqi1/1	[length = 1]
  77               	.LCFI2:
  78               		.cfi_def_cfa_offset 3
  79               		.cfi_offset 28, -2
  80 0002 DF93      		push r29	 ;  188	pushqi1/1	[length = 1]
  81               	.LCFI3:
  82               		.cfi_def_cfa_offset 4
  83               		.cfi_offset 29, -3
  84               		 ; SP -= 4	 ;  192	*addhi3_sp	[length = 2]
  85 0004 00D0      		rcall .
  86 0006 00D0      		rcall .
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 8
  89 0008 CDB7      		in r28,__SP_L__	 ;  193	*movhi/8	[length = 2]
  90 000a DEB7      		in r29,__SP_H__
  91               	.LCFI5:
  92               		.cfi_def_cfa_register 28
  93               	/* prologue: function */
  94               	/* frame size = 4 */
  95               	/* stack size = 6 */
  96               	.L__stack_usage = 6
   8:main.c        ****     Init();
  97               		.loc 3 8 0
  98 000c 00D0      		rcall Init	 ;  8	call_insn/2	[length = 1]
  99               	.LVL7:
   9:main.c        **** 	//int x = 160;
  10:main.c        **** 	//int y = 200;
  11:main.c        **** 	int i = 0;
 100               		.loc 3 11 0
 101 000e 00E0      		ldi r16,0	 ;  3	*movhi/2	[length = 2]
 102 0010 10E0      		ldi r17,0
 103               	.LBB12:
  12:main.c        **** 	while (1) {  			//Hauptschleife
  13:main.c        **** 		i++;
  14:main.c        **** 		char sensor = PollSwitch();
  15:main.c        **** 		sensor &= 0b00111111;
  16:main.c        **** 		
  17:main.c        **** 		MotorDir(FWD, FWD); //Werkeinstellung
  18:main.c        **** 		MotorSpeed(230, 190); 
  19:main.c        **** 		
  20:main.c        **** 		
  21:main.c        **** 		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  22:main.c        **** 		{
  23:main.c        **** 			 MotorDir(BWD, BWD); 
  24:main.c        **** 			 MotorSpeed(60, 150);
  25:main.c        **** 			 StatusLED(RED);
  26:main.c        **** 			 msleep(800);
  27:main.c        **** 		}
  28:main.c        **** 		
  29:main.c        **** 		uint16_t data[] = {0,0};
  30:main.c        **** 		LineData(data);
  31:main.c        **** 		
  32:main.c        **** 		/*if (((data[LEFT] > 100) || (data[RIGHT] > 100)) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
  33:main.c        **** 				MotorSpeed(50, 70);
  34:main.c        **** 				msleep(2000);
  35:main.c        **** 		}*/
  36:main.c        **** 		LineData(data);
  37:main.c        **** 		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  38:main.c        **** 		{	
  39:main.c        **** 			stopAsuro(500);
  40:main.c        **** 			LineData(data);
  41:main.c        **** 		} 
  42:main.c        **** 		
  43:main.c        **** 		if ( (i % 3000) == 0) {
 104               		.loc 3 43 0
 105 0012 28EB      		ldi r18,lo8(-72)	 ;  202	*reload_inhi	[length = 4]
 106 0014 C22E      		mov r12,r18
 107 0016 2BE0      		ldi r18,lo8(11)
 108 0018 D22E      		mov r13,r18
 109               	.LBB13:
  44:main.c        **** 			int ran;
  45:main.c        **** 			ran = rand() % 2;
 110               		.loc 3 45 0
 111 001a 32E0      		ldi r19,lo8(2)	 ;  203	*reload_inhi	[length = 3]
 112 001c A32E      		mov r10,r19
 113 001e B12C      		mov r11,__zero_reg__
 114               	.LVL8:
 115               	.L20:
 116               	.LBE13:
  13:main.c        **** 		char sensor = PollSwitch();
 117               		.loc 3 13 0
 118 0020 0F5F      		subi r16,-1	 ;  12	addhi3_clobber/2	[length = 2]
 119 0022 1F4F      		sbci r17,-1
 120               	.LVL9:
  14:main.c        **** 		sensor &= 0b00111111;
 121               		.loc 3 14 0
 122 0024 00D0      		rcall PollSwitch	 ;  14	call_value_insn/2	[length = 1]
 123               	.LVL10:
 124 0026 F82E      		mov r15,r24	 ;  15	movqi_insn/1	[length = 1]
 125               	.LVL11:
  17:main.c        **** 		MotorSpeed(230, 190); 
 126               		.loc 3 17 0
 127 0028 60E2      		ldi r22,lo8(32)	 ;  18	movqi_insn/2	[length = 1]
 128 002a 80E2      		ldi r24,lo8(32)	 ;  19	movqi_insn/2	[length = 1]
 129 002c 00D0      		rcall MotorDir	 ;  20	call_insn/2	[length = 1]
 130               	.LVL12:
  18:main.c        **** 		
 131               		.loc 3 18 0
 132 002e 6EEB      		ldi r22,lo8(-66)	 ;  21	movqi_insn/2	[length = 1]
 133 0030 86EE      		ldi r24,lo8(-26)	 ;  22	movqi_insn/2	[length = 1]
 134 0032 00D0      		rcall MotorSpeed	 ;  23	call_insn/2	[length = 1]
 135               	.LVL13:
  15:main.c        **** 		
 136               		.loc 3 15 0
 137 0034 8F2D      		mov r24,r15	 ;  183	movqi_insn/1	[length = 1]
 138 0036 8F73      		andi r24,lo8(63)	 ;  24	andqi3/2	[length = 1]
 139               	.LVL14:
  21:main.c        **** 		{
 140               		.loc 3 21 0
 141 0038 01F4      		brne .L10	 ;  26	branch	[length = 1]
 142               	.LVL15:
 143               	.L12:
  29:main.c        **** 		LineData(data);
 144               		.loc 3 29 0
 145 003a 1A82      		std Y+2,__zero_reg__	 ;  28	*movhi/4	[length = 2]
 146 003c 1982      		std Y+1,__zero_reg__
 147 003e 1C82      		std Y+4,__zero_reg__	 ;  29	*movhi/4	[length = 2]
 148 0040 1B82      		std Y+3,__zero_reg__
  30:main.c        **** 		
 149               		.loc 3 30 0
 150 0042 CE01      		movw r24,r28	 ;  184	*movhi/1	[length = 1]
 151 0044 0196      		adiw r24,1	 ;  30	*addhi3/3	[length = 1]
 152 0046 00D0      		rcall LineData	 ;  31	call_insn/2	[length = 1]
 153               	.LVL16:
 154 0048 00C0      		rjmp .L28	 ;  204	jump	[length = 1]
 155               	.LVL17:
 156               	.L10:
  23:main.c        **** 			 MotorSpeed(60, 150);
 157               		.loc 3 23 0
 158 004a 60E1      		ldi r22,lo8(16)	 ;  38	movqi_insn/2	[length = 1]
 159 004c 80E1      		ldi r24,lo8(16)	 ;  39	movqi_insn/2	[length = 1]
 160               	.LVL18:
 161 004e 00D0      		rcall MotorDir	 ;  40	call_insn/2	[length = 1]
 162               	.LVL19:
  24:main.c        **** 			 StatusLED(RED);
 163               		.loc 3 24 0
 164 0050 66E9      		ldi r22,lo8(-106)	 ;  41	movqi_insn/2	[length = 1]
 165 0052 8CE3      		ldi r24,lo8(60)	 ;  42	movqi_insn/2	[length = 1]
 166 0054 00D0      		rcall MotorSpeed	 ;  43	call_insn/2	[length = 1]
 167               	.LVL20:
  25:main.c        **** 			 msleep(800);
 168               		.loc 3 25 0
 169 0056 82E0      		ldi r24,lo8(2)	 ;  44	movqi_insn/2	[length = 1]
 170 0058 00D0      		rcall StatusLED	 ;  45	call_insn/2	[length = 1]
 171               	.LVL21:
 172 005a 90E2      		ldi r25,lo8(32)	 ;  201	*reload_inhi	[length = 4]
 173 005c E92E      		mov r14,r25
 174 005e 93E0      		ldi r25,lo8(3)
 175 0060 F92E      		mov r15,r25
 176               	.LVL22:
 177               	.L13:
 178               	.LBB14:
 179               	.LBB15:
 180               		.loc 2 346 0
 181 0062 84E2      		ldi r24,lo8(36)	 ;  50	movqi_insn/2	[length = 1]
 182 0064 00D0      		rcall sleep	 ;  51	call_insn/2	[length = 1]
 183               	.LVL23:
 184 0066 21E0      		ldi r18,1	 ;  55	addhi3_clobber/3	[length = 3]
 185 0068 E21A      		sub r14,r18
 186 006a F108      		sbc r15,__zero_reg__
 187               	.LVL24:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 188               		.loc 2 345 0
 189 006c E114      		cp r14,__zero_reg__	 ;  57	*cmphi/2	[length = 2]
 190 006e F104      		cpc r15,__zero_reg__
 191 0070 01F4      		brne .L13	 ;  58	branch	[length = 1]
 192 0072 00C0      		rjmp .L12	 ;  207	jump	[length = 1]
 193               	.LVL25:
 194               	.L30:
 195               	.LBE15:
 196               	.LBE14:
  37:main.c        **** 		{	
 197               		.loc 3 37 0 discriminator 2
 198 0074 8B81      		ldd r24,Y+3	 ;  77	*movhi/3	[length = 2]
 199 0076 9C81      		ldd r25,Y+4
 200 0078 853F      		cpi r24,-11	 ;  78	*cmphi/7	[length = 2]
 201 007a 9140      		sbci r25,1
 202 007c 00F0      		brlo .L29	 ;  79	branch	[length = 1]
 203               	.L14:
  39:main.c        **** 			LineData(data);
 204               		.loc 3 39 0
 205 007e 84EF      		ldi r24,lo8(-12)	 ;  66	*movhi/5	[length = 2]
 206 0080 91E0      		ldi r25,lo8(1)
 207 0082 00D0      		rcall stopAsuro	 ;  67	call_insn/2	[length = 1]
 208               	.LVL26:
 209               	.L28:
  40:main.c        **** 		} 
 210               		.loc 3 40 0
 211 0084 CE01      		movw r24,r28	 ;  186	*movhi/1	[length = 1]
 212 0086 0196      		adiw r24,1	 ;  68	*addhi3/3	[length = 1]
 213 0088 00D0      		rcall LineData	 ;  69	call_insn/2	[length = 1]
 214               	.LVL27:
  37:main.c        **** 		{	
 215               		.loc 3 37 0
 216 008a 8981      		ldd r24,Y+1	 ;  73	*movhi/3	[length = 2]
 217 008c 9A81      		ldd r25,Y+2
 218 008e 853F      		cpi r24,-11	 ;  74	*cmphi/7	[length = 2]
 219 0090 9140      		sbci r25,1
 220 0092 00F0      		brlo .L30	 ;  75	branch	[length = 1]
 221 0094 00C0      		rjmp .L14	 ;  212	jump	[length = 1]
 222               	.L29:
  43:main.c        **** 			int ran;
 223               		.loc 3 43 0
 224 0096 C801      		movw r24,r16	 ;  176	*movhi/1	[length = 1]
 225 0098 B601      		movw r22,r12	 ;  177	*movhi/1	[length = 1]
 226 009a 00D0      		rcall __divmodhi4	 ;  178	*divmodhi4_call	[length = 1]
 227 009c 892B      		or r24,r25	 ;  83	*cmphi/1	[length = 1]
 228 009e 01F4      		brne .L16	 ;  84	branch	[length = 1]
 229               	.LBB16:
 230               		.loc 3 45 0
 231 00a0 00D0      		rcall rand	 ;  90	call_value_insn/2	[length = 1]
 232               	.LVL28:
 233 00a2 B501      		movw r22,r10	 ;  172	*movhi/1	[length = 1]
 234 00a4 00D0      		rcall __divmodhi4	 ;  173	*divmodhi4_call	[length = 1]
 235               	.LVL29:
  46:main.c        **** 			if (ran) {
 236               		.loc 3 46 0
 237 00a6 892B      		or r24,r25	 ;  96	*cmphi/1	[length = 1]
 238 00a8 01F0      		breq .L16	 ;  97	branch	[length = 1]
  47:main.c        **** 				StatusLED(YELLOW);
 239               		.loc 3 47 0
 240 00aa 83E0      		ldi r24,lo8(3)	 ;  99	movqi_insn/2	[length = 1]
 241 00ac 00D0      		rcall StatusLED	 ;  100	call_insn/2	[length = 1]
 242               	.LVL30:
  48:main.c        **** 				stopAsuro(3000);
 243               		.loc 3 48 0
 244 00ae 88EB      		ldi r24,lo8(-72)	 ;  154	*movhi/5	[length = 2]
 245 00b0 9BE0      		ldi r25,lo8(11)
 246 00b2 00D0      		rcall stopAsuro	 ;  102	call_insn/2	[length = 1]
 247               	.LVL31:
 248               	.L16:
 249               	.LBE16:
  49:main.c        **** 			}
  50:main.c        **** 		}
  51:main.c        **** 		
  52:main.c        **** 		/*if ((data[LEFT] > data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
  53:main.c        **** 		{
  54:main.c        **** 			MotorSpeed(70, 140);
  55:main.c        **** 			LineData(data);
  56:main.c        **** 			msleep(100);
  57:main.c        **** 		}
  58:main.c        **** 		
  59:main.c        **** 		if ((data[LEFT] < data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
  60:main.c        **** 		{
  61:main.c        **** 			MotorSpeed(180, 90);
  62:main.c        **** 			LineData(data);
  63:main.c        **** 			msleep(100);
  64:main.c        **** 		}*/
  65:main.c        **** 		StatusLED(GREEN);
 250               		.loc 3 65 0
 251 00b4 81E0      		ldi r24,lo8(1)	 ;  105	movqi_insn/2	[length = 1]
 252 00b6 00D0      		rcall StatusLED	 ;  106	call_insn/2	[length = 1]
 253               	.LVL32:
  66:main.c        **** 		BackLED(OFF, OFF);
 254               		.loc 3 66 0
 255 00b8 60E0      		ldi r22,0	 ;  107	movqi_insn/1	[length = 1]
 256 00ba 80E0      		ldi r24,0	 ;  108	movqi_insn/1	[length = 1]
 257 00bc 00D0      		rcall BackLED	 ;  109	call_insn/2	[length = 1]
 258               	.LVL33:
 259 00be 80E2      		ldi r24,lo8(32)	 ;  200	*reload_inhi	[length = 4]
 260 00c0 E82E      		mov r14,r24
 261 00c2 83E0      		ldi r24,lo8(3)
 262 00c4 F82E      		mov r15,r24
 263               	.LVL34:
 264               	.L19:
 265               	.LBB17:
 266               	.LBB18:
 267               		.loc 2 346 0
 268 00c6 84E2      		ldi r24,lo8(36)	 ;  114	movqi_insn/2	[length = 1]
 269 00c8 00D0      		rcall sleep	 ;  115	call_insn/2	[length = 1]
 270               	.LVL35:
 271 00ca 81E0      		ldi r24,1	 ;  119	addhi3_clobber/3	[length = 3]
 272 00cc E81A      		sub r14,r24
 273 00ce F108      		sbc r15,__zero_reg__
 274               	.LVL36:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 275               		.loc 2 345 0
 276 00d0 E114      		cp r14,__zero_reg__	 ;  120	*cmphi/2	[length = 2]
 277 00d2 F104      		cpc r15,__zero_reg__
 278 00d4 01F4      		brne .L19	 ;  121	branch	[length = 1]
 279 00d6 00C0      		rjmp .L20	 ;  215	jump	[length = 1]
 280               	.LBE18:
 281               	.LBE17:
 282               	.LBE12:
 283               		.cfi_endproc
 284               	.LFE8:
 286               		.text
 287               	.Letext0:
 288               		.file 4 "/usr/lib/avr/include/stdint.h"
 289               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 290               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 291               		.file 7 "/usr/lib/avr/include/stdlib.h"
 292               		.file 8 "../../libtinyasuro/inc/asuro/switches.h"
 293               		.file 9 "../../libtinyasuro/inc/asuro/sensors.h"
 294               		.file 10 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccfAZZNS.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccfAZZNS.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccfAZZNS.s:4      *ABS*:0000003f __SREG__
     /tmp/ccfAZZNS.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccfAZZNS.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccfAZZNS.s:13     .text.stopAsuro:00000000 stopAsuro
     /tmp/ccfAZZNS.s:71     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
MotorSpeed
sleep
Init
PollSwitch
MotorDir
LineData
StatusLED
__divmodhi4
rand
BackLED
