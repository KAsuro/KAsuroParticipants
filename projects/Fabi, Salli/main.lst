   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.stopAsuro,"ax",@progbits
  11               	.global	stopAsuro
  13               	stopAsuro:
  14               	.LFB3:
  15               		.file 1 "helpers.h"
   1:helpers.h     **** #include <stdio.h>
   2:helpers.h     **** 
   3:helpers.h     **** void stopAsuro(int pause) 
   4:helpers.h     **** {
  16               		.loc 1 4 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28	 ;  45	pushqi1/1	[length = 1]
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29	 ;  46	pushqi1/1	[length = 1]
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
   5:helpers.h     **** 	MotorSpeed(0, 0);
  32               		.loc 1 5 0
  33 0006 60E0      		ldi r22,0	 ;  6	movqi_insn/1	[length = 1]
  34 0008 80E0      		ldi r24,0	 ;  7	movqi_insn/1	[length = 1]
  35               	.LVL1:
  36 000a 00D0      		rcall MotorSpeed	 ;  8	call_insn/2	[length = 1]
  37               	.LVL2:
   6:helpers.h     **** 	if (pause > 0)
  38               		.loc 1 6 0
  39 000c 1C16      		cp __zero_reg__,r28	 ;  9	*reversed_tsthi	[length = 2]
  40 000e 1D06      		cpc __zero_reg__,r29
  41 0010 04F4      		brge .L1	 ;  10	branch	[length = 1]
  42               	.LVL3:
  43               	.L4:
  44               	.LBB16:
  45               	.LBB17:
  46               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  47               		.loc 2 346 0
  48 0012 84E2      		ldi r24,lo8(36)	 ;  21	movqi_insn/2	[length = 1]
  49 0014 00D0      		rcall sleep	 ;  22	call_insn/2	[length = 1]
  50               	.LVL4:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  51               		.loc 2 345 0
  52 0016 2197      		sbiw r28,1	 ;  23	addhi3_clobber/1	[length = 1]
  53               	.LVL5:
  54 0018 2097      		sbiw r28,0	 ;  27	*cmphi/1	[length = 1]
  55 001a 01F4      		brne .L4	 ;  28	branch	[length = 1]
  56               	.LVL6:
  57               	.L1:
  58               	/* epilogue start */
  59               	.LBE17:
  60               	.LBE16:
   7:helpers.h     **** 		msleep(pause);
   8:helpers.h     **** }
  61               		.loc 1 8 0
  62 001c DF91      		pop r29	 ;  49	popqi	[length = 1]
  63 001e CF91      		pop r28	 ;  50	popqi	[length = 1]
  64 0020 0895      		ret	 ;  51	return_from_epilogue	[length = 1]
  65               		.cfi_endproc
  66               	.LFE3:
  68               		.section	.text.startup.main,"ax",@progbits
  69               	.global	main
  71               	main:
  72               	.LFB8:
  73               		.file 3 "main.c"
   1:main.c        **** #define SWITCH(X) 1<<X
   2:main.c        **** 
   3:main.c        **** #include <asuro/asuro.h>
   4:main.c        **** #include "helpers.h"
   5:main.c        **** #include <stdlib.h>
   6:main.c        **** 
   7:main.c        **** void main(void) {
  74               		.loc 3 7 0
  75               		.cfi_startproc
  76 0000 CF93      		push r28	 ;  320	pushqi1/1	[length = 1]
  77               	.LCFI2:
  78               		.cfi_def_cfa_offset 3
  79               		.cfi_offset 28, -2
  80 0002 DF93      		push r29	 ;  321	pushqi1/1	[length = 1]
  81               	.LCFI3:
  82               		.cfi_def_cfa_offset 4
  83               		.cfi_offset 29, -3
  84               		 ; SP -= 4	 ;  325	*addhi3_sp	[length = 2]
  85 0004 00D0      		rcall .
  86 0006 00D0      		rcall .
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 8
  89 0008 CDB7      		in r28,__SP_L__	 ;  326	*movhi/8	[length = 2]
  90 000a DEB7      		in r29,__SP_H__
  91               	.LCFI5:
  92               		.cfi_def_cfa_register 28
  93               	/* prologue: function */
  94               	/* frame size = 4 */
  95               	/* stack size = 6 */
  96               	.L__stack_usage = 6
   8:main.c        ****     Init();
  97               		.loc 3 8 0
  98 000c 00D0      		rcall Init	 ;  15	call_insn/2	[length = 1]
  99               	.LVL7:
   9:main.c        ****     int status = 0;
  10:main.c        **** 	//int x = 160;
  11:main.c        **** 	//int y = 200;
  12:main.c        **** 	int i = 0;
 100               		.loc 3 12 0
 101 000e E12C      		mov r14,__zero_reg__	 ;  3	*movhi/2	[length = 2]
 102 0010 F12C      		mov r15,__zero_reg__
   9:main.c        ****     int status = 0;
 103               		.loc 3 9 0
 104 0012 00E0      		ldi r16,0	 ;  4	*movhi/2	[length = 2]
 105 0014 10E0      		ldi r17,0
 106               	.LBB18:
  13:main.c        **** 	while (1) {  			//Hauptschleife
  14:main.c        **** 		i++;
  15:main.c        **** 		char sensor = PollSwitch();
  16:main.c        **** 		sensor &= 0b00111111;
  17:main.c        **** 		MotorDir(FWD, FWD); //Werkeinstellung
  18:main.c        **** 		MotorSpeed(230, 200); 
  19:main.c        **** 		
  20:main.c        **** 		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  21:main.c        **** 		{
  22:main.c        **** 			 MotorDir(BWD, BWD); 
  23:main.c        **** 			 MotorSpeed(60, 150);
  24:main.c        **** 			 StatusLED(RED);
  25:main.c        **** 			 msleep(800);
  26:main.c        **** 		}
  27:main.c        **** 		
  28:main.c        **** 		uint16_t data[] = {0,0};
  29:main.c        **** 		LineData(data);
  30:main.c        **** 		
  31:main.c        **** 		LineData(data);
  32:main.c        **** 		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  33:main.c        **** 		{	
  34:main.c        **** 			stopAsuro(500);
  35:main.c        **** 			LineData(data);
  36:main.c        **** 		} 
  37:main.c        **** 		
  38:main.c        **** 		if ( (i % 3000) == 0) {
 107               		.loc 3 38 0
 108 0016 28EB      		ldi r18,lo8(-72)	 ;  335	*reload_inhi	[length = 4]
 109 0018 A22E      		mov r10,r18
 110 001a 2BE0      		ldi r18,lo8(11)
 111 001c B22E      		mov r11,r18
 112               	.LBB19:
  39:main.c        **** 			int ran;
  40:main.c        **** 			ran = rand() % 2;
 113               		.loc 3 40 0
 114 001e 32E0      		ldi r19,lo8(2)	 ;  336	*reload_inhi	[length = 3]
 115 0020 832E      		mov r8,r19
 116 0022 912C      		mov r9,__zero_reg__
 117               	.LVL8:
 118               	.L28:
 119               	.LBE19:
  14:main.c        **** 		char sensor = PollSwitch();
 120               		.loc 3 14 0
 121 0024 2FEF      		ldi r18,-1	 ;  21	addhi3_clobber/3	[length = 3]
 122 0026 E21A      		sub r14,r18
 123 0028 F20A      		sbc r15,r18
 124               	.LVL9:
  15:main.c        **** 		sensor &= 0b00111111;
 125               		.loc 3 15 0
 126 002a 00D0      		rcall PollSwitch	 ;  23	call_value_insn/2	[length = 1]
 127               	.LVL10:
 128 002c D82E      		mov r13,r24	 ;  24	movqi_insn/1	[length = 1]
 129               	.LVL11:
  17:main.c        **** 		MotorSpeed(230, 200); 
 130               		.loc 3 17 0
 131 002e 60E2      		ldi r22,lo8(32)	 ;  27	movqi_insn/2	[length = 1]
 132 0030 80E2      		ldi r24,lo8(32)	 ;  28	movqi_insn/2	[length = 1]
 133 0032 00D0      		rcall MotorDir	 ;  29	call_insn/2	[length = 1]
 134               	.LVL12:
  18:main.c        **** 		
 135               		.loc 3 18 0
 136 0034 68EC      		ldi r22,lo8(-56)	 ;  30	movqi_insn/2	[length = 1]
 137 0036 86EE      		ldi r24,lo8(-26)	 ;  31	movqi_insn/2	[length = 1]
 138 0038 00D0      		rcall MotorSpeed	 ;  32	call_insn/2	[length = 1]
 139               	.LVL13:
  16:main.c        **** 		MotorDir(FWD, FWD); //Werkeinstellung
 140               		.loc 3 16 0
 141 003a 8D2D      		mov r24,r13	 ;  316	movqi_insn/1	[length = 1]
 142 003c 8F73      		andi r24,lo8(63)	 ;  33	andqi3/2	[length = 1]
 143               	.LVL14:
  20:main.c        **** 		{
 144               		.loc 3 20 0
 145 003e 01F4      		brne .L10	 ;  35	branch	[length = 1]
 146               	.LVL15:
 147               	.L12:
  28:main.c        **** 		LineData(data);
 148               		.loc 3 28 0
 149 0040 1A82      		std Y+2,__zero_reg__	 ;  37	*movhi/4	[length = 2]
 150 0042 1982      		std Y+1,__zero_reg__
 151 0044 1C82      		std Y+4,__zero_reg__	 ;  38	*movhi/4	[length = 2]
 152 0046 1B82      		std Y+3,__zero_reg__
  29:main.c        **** 		
 153               		.loc 3 29 0
 154 0048 CE01      		movw r24,r28	 ;  317	*movhi/1	[length = 1]
 155 004a 0196      		adiw r24,1	 ;  39	*addhi3/3	[length = 1]
 156 004c 00D0      		rcall LineData	 ;  40	call_insn/2	[length = 1]
 157               	.LVL16:
 158 004e 00C0      		rjmp .L40	 ;  337	jump	[length = 1]
 159               	.LVL17:
 160               	.L10:
  22:main.c        **** 			 MotorSpeed(60, 150);
 161               		.loc 3 22 0
 162 0050 60E1      		ldi r22,lo8(16)	 ;  47	movqi_insn/2	[length = 1]
 163 0052 80E1      		ldi r24,lo8(16)	 ;  48	movqi_insn/2	[length = 1]
 164               	.LVL18:
 165 0054 00D0      		rcall MotorDir	 ;  49	call_insn/2	[length = 1]
 166               	.LVL19:
  23:main.c        **** 			 StatusLED(RED);
 167               		.loc 3 23 0
 168 0056 66E9      		ldi r22,lo8(-106)	 ;  50	movqi_insn/2	[length = 1]
 169 0058 8CE3      		ldi r24,lo8(60)	 ;  51	movqi_insn/2	[length = 1]
 170 005a 00D0      		rcall MotorSpeed	 ;  52	call_insn/2	[length = 1]
 171               	.LVL20:
  24:main.c        **** 			 msleep(800);
 172               		.loc 3 24 0
 173 005c 82E0      		ldi r24,lo8(2)	 ;  53	movqi_insn/2	[length = 1]
 174 005e 00D0      		rcall StatusLED	 ;  54	call_insn/2	[length = 1]
 175               	.LVL21:
 176 0060 90E2      		ldi r25,lo8(32)	 ;  334	*reload_inhi	[length = 4]
 177 0062 C92E      		mov r12,r25
 178 0064 93E0      		ldi r25,lo8(3)
 179 0066 D92E      		mov r13,r25
 180               	.LVL22:
 181               	.L13:
 182               	.LBB20:
 183               	.LBB21:
 184               		.loc 2 346 0
 185 0068 84E2      		ldi r24,lo8(36)	 ;  59	movqi_insn/2	[length = 1]
 186 006a 00D0      		rcall sleep	 ;  60	call_insn/2	[length = 1]
 187               	.LVL23:
 188 006c 81E0      		ldi r24,1	 ;  64	addhi3_clobber/3	[length = 3]
 189 006e C81A      		sub r12,r24
 190 0070 D108      		sbc r13,__zero_reg__
 191               	.LVL24:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 192               		.loc 2 345 0
 193 0072 C114      		cp r12,__zero_reg__	 ;  66	*cmphi/2	[length = 2]
 194 0074 D104      		cpc r13,__zero_reg__
 195 0076 01F4      		brne .L13	 ;  67	branch	[length = 1]
 196 0078 00C0      		rjmp .L12	 ;  340	jump	[length = 1]
 197               	.LVL25:
 198               	.L42:
 199               	.LBE21:
 200               	.LBE20:
  32:main.c        **** 		{	
 201               		.loc 3 32 0 discriminator 2
 202 007a 8B81      		ldd r24,Y+3	 ;  86	*movhi/3	[length = 2]
 203 007c 9C81      		ldd r25,Y+4
 204 007e 853F      		cpi r24,-11	 ;  87	*cmphi/7	[length = 2]
 205 0080 9140      		sbci r25,1
 206 0082 00F0      		brlo .L41	 ;  88	branch	[length = 1]
 207               	.L14:
  34:main.c        **** 			LineData(data);
 208               		.loc 3 34 0
 209 0084 84EF      		ldi r24,lo8(-12)	 ;  75	*movhi/5	[length = 2]
 210 0086 91E0      		ldi r25,lo8(1)
 211 0088 00D0      		rcall stopAsuro	 ;  76	call_insn/2	[length = 1]
 212               	.LVL26:
 213               	.L40:
  35:main.c        **** 		} 
 214               		.loc 3 35 0
 215 008a CE01      		movw r24,r28	 ;  319	*movhi/1	[length = 1]
 216 008c 0196      		adiw r24,1	 ;  77	*addhi3/3	[length = 1]
 217 008e 00D0      		rcall LineData	 ;  78	call_insn/2	[length = 1]
 218               	.LVL27:
  32:main.c        **** 		{	
 219               		.loc 3 32 0
 220 0090 8981      		ldd r24,Y+1	 ;  82	*movhi/3	[length = 2]
 221 0092 9A81      		ldd r25,Y+2
 222 0094 853F      		cpi r24,-11	 ;  83	*cmphi/7	[length = 2]
 223 0096 9140      		sbci r25,1
 224 0098 00F0      		brlo .L42	 ;  84	branch	[length = 1]
 225 009a 00C0      		rjmp .L14	 ;  345	jump	[length = 1]
 226               	.L41:
  38:main.c        **** 			int ran;
 227               		.loc 3 38 0
 228 009c C701      		movw r24,r14	 ;  309	*movhi/1	[length = 1]
 229 009e B501      		movw r22,r10	 ;  310	*movhi/1	[length = 1]
 230 00a0 00D0      		rcall __divmodhi4	 ;  311	*divmodhi4_call	[length = 1]
 231 00a2 892B      		or r24,r25	 ;  92	*cmphi/1	[length = 1]
 232 00a4 01F4      		brne .L16	 ;  93	branch	[length = 1]
 233               	.LBB22:
 234               		.loc 3 40 0
 235 00a6 00D0      		rcall rand	 ;  99	call_value_insn/2	[length = 1]
 236               	.LVL28:
 237 00a8 B401      		movw r22,r8	 ;  305	*movhi/1	[length = 1]
 238 00aa 00D0      		rcall __divmodhi4	 ;  306	*divmodhi4_call	[length = 1]
 239               	.LVL29:
  41:main.c        **** 			if (ran) {
 240               		.loc 3 41 0
 241 00ac 892B      		or r24,r25	 ;  105	*cmphi/1	[length = 1]
 242 00ae 01F0      		breq .L16	 ;  106	branch	[length = 1]
  42:main.c        **** 				StatusLED(YELLOW);
 243               		.loc 3 42 0
 244 00b0 83E0      		ldi r24,lo8(3)	 ;  108	movqi_insn/2	[length = 1]
 245 00b2 00D0      		rcall StatusLED	 ;  109	call_insn/2	[length = 1]
 246               	.LVL30:
  43:main.c        **** 				stopAsuro(3000);
 247               		.loc 3 43 0
 248 00b4 88EB      		ldi r24,lo8(-72)	 ;  266	*movhi/5	[length = 2]
 249 00b6 9BE0      		ldi r25,lo8(11)
 250 00b8 00D0      		rcall stopAsuro	 ;  111	call_insn/2	[length = 1]
 251               	.LVL31:
 252               	.L16:
 253               	.LBE22:
  44:main.c        **** 			}
  45:main.c        **** 		}
  46:main.c        **** 		switch (status) {
 254               		.loc 3 46 0
 255 00ba 0130      		cpi r16,1	 ;  114	*cmphi/6	[length = 2]
 256 00bc 1105      		cpc r17,__zero_reg__
 257 00be 01F0      		breq .L19	 ;  115	branch	[length = 1]
 258 00c0 0230      		cpi r16,2	 ;  116	*cmphi/6	[length = 2]
 259 00c2 1105      		cpc r17,__zero_reg__
 260 00c4 01F0      		breq .L20	 ;  117	branch	[length = 1]
 261 00c6 0115      		cp r16,__zero_reg__	 ;  118	*cmphi/2	[length = 2]
 262 00c8 1105      		cpc r17,__zero_reg__
 263 00ca 01F4      		brne .L39	 ;  119	branch	[length = 1]
  47:main.c        **** 			case 0: 
  48:main.c        **** 			MotorSpeed(250, 50);
 264               		.loc 3 48 0
 265 00cc 62E3      		ldi r22,lo8(50)	 ;  124	movqi_insn/2	[length = 1]
 266 00ce 8AEF      		ldi r24,lo8(-6)	 ;  125	movqi_insn/2	[length = 1]
 267 00d0 00D0      		rcall MotorSpeed	 ;  126	call_insn/2	[length = 1]
 268               	.LVL32:
 269 00d2 08EE      		ldi r16,lo8(-24)	 ;  270	*movhi/5	[length = 2]
 270 00d4 13E0      		ldi r17,lo8(3)
 271               	.LVL33:
 272               	.L23:
 273               	.LBB23:
 274               	.LBB24:
 275               		.loc 2 346 0
 276 00d6 84E2      		ldi r24,lo8(36)	 ;  132	movqi_insn/2	[length = 1]
 277 00d8 00D0      		rcall sleep	 ;  133	call_insn/2	[length = 1]
 278               	.LVL34:
 279 00da 0150      		subi r16,1	 ;  137	addhi3_clobber/2	[length = 2]
 280 00dc 1109      		sbc r17,__zero_reg__
 281               	.LVL35:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 282               		.loc 2 345 0
 283 00de 0115      		cp r16,__zero_reg__	 ;  138	*cmphi/2	[length = 2]
 284 00e0 1105      		cpc r17,__zero_reg__
 285 00e2 01F4      		brne .L23	 ;  139	branch	[length = 1]
 286 00e4 00C0      		rjmp .L43	 ;  349	jump	[length = 1]
 287               	.LVL36:
 288               	.L19:
 289               	.LBE24:
 290               	.LBE23:
  49:main.c        **** 			status = 1;
  50:main.c        **** 			msleep(1000);
  51:main.c        **** 			break;
  52:main.c        **** 			case 1: 
  53:main.c        **** 			MotorSpeed(60,250);
 291               		.loc 3 53 0
 292 00e6 6AEF      		ldi r22,lo8(-6)	 ;  148	movqi_insn/2	[length = 1]
 293 00e8 8CE3      		ldi r24,lo8(60)	 ;  149	movqi_insn/2	[length = 1]
 294 00ea 00D0      		rcall MotorSpeed	 ;  150	call_insn/2	[length = 1]
 295               	.LVL37:
 296 00ec 08EE      		ldi r16,lo8(-24)	 ;  267	*movhi/5	[length = 2]
 297 00ee 13E0      		ldi r17,lo8(3)
 298               	.LVL38:
 299               	.L24:
 300               	.LBB25:
 301               	.LBB26:
 302               		.loc 2 346 0
 303 00f0 84E2      		ldi r24,lo8(36)	 ;  156	movqi_insn/2	[length = 1]
 304 00f2 00D0      		rcall sleep	 ;  157	call_insn/2	[length = 1]
 305               	.LVL39:
 306 00f4 0150      		subi r16,1	 ;  161	addhi3_clobber/2	[length = 2]
 307 00f6 1109      		sbc r17,__zero_reg__
 308               	.LVL40:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 309               		.loc 2 345 0
 310 00f8 0115      		cp r16,__zero_reg__	 ;  162	*cmphi/2	[length = 2]
 311 00fa 1105      		cpc r17,__zero_reg__
 312 00fc 01F4      		brne .L24	 ;  163	branch	[length = 1]
 313 00fe 00C0      		rjmp .L44	 ;  353	jump	[length = 1]
 314               	.LVL41:
 315               	.L20:
 316               	.LBE26:
 317               	.LBE25:
  54:main.c        **** 			status = 2;
  55:main.c        **** 			msleep(1000);
  56:main.c        **** 			break;
  57:main.c        **** 			case 2: 
  58:main.c        **** 			MotorSpeed(230, 200); 
 318               		.loc 3 58 0
 319 0100 68EC      		ldi r22,lo8(-56)	 ;  172	movqi_insn/2	[length = 1]
 320 0102 86EE      		ldi r24,lo8(-26)	 ;  173	movqi_insn/2	[length = 1]
 321 0104 00D0      		rcall MotorSpeed	 ;  174	call_insn/2	[length = 1]
 322               	.LVL42:
 323 0106 08EE      		ldi r16,lo8(-24)	 ;  269	*movhi/5	[length = 2]
 324 0108 13E0      		ldi r17,lo8(3)
 325               	.LVL43:
 326               	.L25:
 327               	.LBB27:
 328               	.LBB28:
 329               		.loc 2 346 0
 330 010a 84E2      		ldi r24,lo8(36)	 ;  180	movqi_insn/2	[length = 1]
 331 010c 00D0      		rcall sleep	 ;  181	call_insn/2	[length = 1]
 332               	.LVL44:
 333 010e 0150      		subi r16,1	 ;  185	addhi3_clobber/2	[length = 2]
 334 0110 1109      		sbc r17,__zero_reg__
 335               	.LVL45:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 336               		.loc 2 345 0
 337 0112 0115      		cp r16,__zero_reg__	 ;  186	*cmphi/2	[length = 2]
 338 0114 1105      		cpc r17,__zero_reg__
 339 0116 01F4      		brne .L25	 ;  187	branch	[length = 1]
 340 0118 00C0      		rjmp .L45	 ;  357	jump	[length = 1]
 341               	.LVL46:
 342               	.L39:
 343               	.LBE28:
 344               	.LBE27:
  59:main.c        **** 			status = 0;
  60:main.c        **** 			msleep(1000);
  61:main.c        **** 			break;
  62:main.c        **** 			default: 
  63:main.c        **** 			MotorDir(BREAK, BREAK);
 345               		.loc 3 63 0
 346 011a 60E0      		ldi r22,0	 ;  196	movqi_insn/1	[length = 1]
 347 011c 80E0      		ldi r24,0	 ;  197	movqi_insn/1	[length = 1]
 348 011e 00D0      		rcall MotorDir	 ;  198	call_insn/2	[length = 1]
 349               	.LVL47:
 350 0120 00C0      		rjmp .L22	 ;  359	jump	[length = 1]
 351               	.LVL48:
 352               	.L43:
  49:main.c        **** 			msleep(1000);
 353               		.loc 3 49 0
 354 0122 01E0      		ldi r16,lo8(1)	 ;  271	*movhi/5	[length = 2]
 355 0124 10E0      		ldi r17,0
 356               	.LVL49:
 357 0126 00C0      		rjmp .L22	 ;  361	jump	[length = 1]
 358               	.LVL50:
 359               	.L44:
  54:main.c        **** 			msleep(1000);
 360               		.loc 3 54 0
 361 0128 02E0      		ldi r16,lo8(2)	 ;  268	*movhi/5	[length = 2]
 362 012a 10E0      		ldi r17,0
 363               	.LVL51:
 364 012c 00C0      		rjmp .L22	 ;  363	jump	[length = 1]
 365               	.LVL52:
 366               	.L45:
  59:main.c        **** 			status = 0;
 367               		.loc 3 59 0
 368 012e 00E0      		ldi r16,0	 ;  11	*movhi/2	[length = 2]
 369 0130 10E0      		ldi r17,0
 370               	.LVL53:
 371               	.L22:
  64:main.c        **** 		}
  65:main.c        **** 		StatusLED(GREEN);
 372               		.loc 3 65 0
 373 0132 81E0      		ldi r24,lo8(1)	 ;  202	movqi_insn/2	[length = 1]
 374 0134 00D0      		rcall StatusLED	 ;  203	call_insn/2	[length = 1]
 375               	.LVL54:
  66:main.c        **** 		BackLED(OFF, OFF);
 376               		.loc 3 66 0
 377 0136 60E0      		ldi r22,0	 ;  204	movqi_insn/1	[length = 1]
 378 0138 80E0      		ldi r24,0	 ;  205	movqi_insn/1	[length = 1]
 379 013a 00D0      		rcall BackLED	 ;  206	call_insn/2	[length = 1]
 380               	.LVL55:
 381 013c 80E2      		ldi r24,lo8(32)	 ;  333	*reload_inhi	[length = 4]
 382 013e C82E      		mov r12,r24
 383 0140 83E0      		ldi r24,lo8(3)
 384 0142 D82E      		mov r13,r24
 385               	.LVL56:
 386               	.L27:
 387               	.LBB29:
 388               	.LBB30:
 389               		.loc 2 346 0
 390 0144 84E2      		ldi r24,lo8(36)	 ;  211	movqi_insn/2	[length = 1]
 391 0146 00D0      		rcall sleep	 ;  212	call_insn/2	[length = 1]
 392               	.LVL57:
 393 0148 81E0      		ldi r24,1	 ;  216	addhi3_clobber/3	[length = 3]
 394 014a C81A      		sub r12,r24
 395 014c D108      		sbc r13,__zero_reg__
 396               	.LVL58:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 397               		.loc 2 345 0
 398 014e C114      		cp r12,__zero_reg__	 ;  217	*cmphi/2	[length = 2]
 399 0150 D104      		cpc r13,__zero_reg__
 400 0152 01F4      		brne .L27	 ;  218	branch	[length = 1]
 401 0154 00C0      		rjmp .L28	 ;  366	jump	[length = 1]
 402               	.LBE30:
 403               	.LBE29:
 404               	.LBE18:
 405               		.cfi_endproc
 406               	.LFE8:
 408               		.text
 409               	.Letext0:
 410               		.file 4 "/usr/lib/avr/include/stdint.h"
 411               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 412               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 413               		.file 7 "/usr/lib/avr/include/stdlib.h"
 414               		.file 8 "../../libtinyasuro/inc/asuro/switches.h"
 415               		.file 9 "../../libtinyasuro/inc/asuro/sensors.h"
 416               		.file 10 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccoVNjsB.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccoVNjsB.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccoVNjsB.s:4      *ABS*:0000003f __SREG__
     /tmp/ccoVNjsB.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccoVNjsB.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccoVNjsB.s:13     .text.stopAsuro:00000000 stopAsuro
     /tmp/ccoVNjsB.s:71     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
MotorSpeed
sleep
Init
PollSwitch
MotorDir
LineData
StatusLED
__divmodhi4
rand
BackLED
