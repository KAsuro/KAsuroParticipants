   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.stopAsuro,"ax",@progbits
  11               	.global	stopAsuro
  13               	stopAsuro:
  14               	.LFB3:
  15               		.file 1 "helpers.h"
   1:helpers.h     **** #include <stdio.h>
   2:helpers.h     **** 
   3:helpers.h     **** void stopAsuro(int pause) 
   4:helpers.h     **** {
  16               		.loc 1 4 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28	 ;  45	pushqi1/1	[length = 1]
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29	 ;  46	pushqi1/1	[length = 1]
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
   5:helpers.h     **** 	MotorSpeed(0, 0);
  32               		.loc 1 5 0
  33 0006 60E0      		ldi r22,0	 ;  6	movqi_insn/1	[length = 1]
  34 0008 80E0      		ldi r24,0	 ;  7	movqi_insn/1	[length = 1]
  35               	.LVL1:
  36 000a 00D0      		rcall MotorSpeed	 ;  8	call_insn/2	[length = 1]
  37               	.LVL2:
   6:helpers.h     **** 	if (pause > 0)
  38               		.loc 1 6 0
  39 000c 1C16      		cp __zero_reg__,r28	 ;  9	*reversed_tsthi	[length = 2]
  40 000e 1D06      		cpc __zero_reg__,r29
  41 0010 04F4      		brge .L1	 ;  10	branch	[length = 1]
  42               	.LVL3:
  43               	.L4:
  44               	.LBB14:
  45               	.LBB15:
  46               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  47               		.loc 2 346 0
  48 0012 84E2      		ldi r24,lo8(36)	 ;  21	movqi_insn/2	[length = 1]
  49 0014 00D0      		rcall sleep	 ;  22	call_insn/2	[length = 1]
  50               	.LVL4:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  51               		.loc 2 345 0
  52 0016 2197      		sbiw r28,1	 ;  23	addhi3_clobber/1	[length = 1]
  53               	.LVL5:
  54 0018 2097      		sbiw r28,0	 ;  27	*cmphi/1	[length = 1]
  55 001a 01F4      		brne .L4	 ;  28	branch	[length = 1]
  56               	.LVL6:
  57               	.L1:
  58               	/* epilogue start */
  59               	.LBE15:
  60               	.LBE14:
   7:helpers.h     **** 		msleep(pause);
   8:helpers.h     **** }
  61               		.loc 1 8 0
  62 001c DF91      		pop r29	 ;  49	popqi	[length = 1]
  63 001e CF91      		pop r28	 ;  50	popqi	[length = 1]
  64 0020 0895      		ret	 ;  51	return_from_epilogue	[length = 1]
  65               		.cfi_endproc
  66               	.LFE3:
  68               		.section	.text.startup.main,"ax",@progbits
  69               	.global	main
  71               	main:
  72               	.LFB8:
  73               		.file 3 "main.c"
   1:main.c        **** #define SWITCH(X) 1<<X
   2:main.c        **** 
   3:main.c        **** #include <asuro/asuro.h>
   4:main.c        **** #include "helpers.h"
   5:main.c        **** #include <stdlib.h>
   6:main.c        **** 
   7:main.c        **** void main(void) {
  74               		.loc 3 7 0
  75               		.cfi_startproc
  76 0000 CF93      		push r28	 ;  260	pushqi1/1	[length = 1]
  77               	.LCFI2:
  78               		.cfi_def_cfa_offset 3
  79               		.cfi_offset 28, -2
  80 0002 DF93      		push r29	 ;  261	pushqi1/1	[length = 1]
  81               	.LCFI3:
  82               		.cfi_def_cfa_offset 4
  83               		.cfi_offset 29, -3
  84               		 ; SP -= 4	 ;  265	*addhi3_sp	[length = 2]
  85 0004 00D0      		rcall .
  86 0006 00D0      		rcall .
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 8
  89 0008 CDB7      		in r28,__SP_L__	 ;  266	*movhi/8	[length = 2]
  90 000a DEB7      		in r29,__SP_H__
  91               	.LCFI5:
  92               		.cfi_def_cfa_register 28
  93               	/* prologue: function */
  94               	/* frame size = 4 */
  95               	/* stack size = 6 */
  96               	.L__stack_usage = 6
   8:main.c        ****     Init();
  97               		.loc 3 8 0
  98 000c 00D0      		rcall Init	 ;  10	call_insn/2	[length = 1]
  99               	.LVL7:
   9:main.c        **** 	//int x = 160;
  10:main.c        **** 	//int y = 200;
  11:main.c        **** 	int i = 0;
 100               		.loc 3 11 0
 101 000e 00E0      		ldi r16,0	 ;  3	*movhi/2	[length = 2]
 102 0010 10E0      		ldi r17,0
 103               	.LBB16:
  12:main.c        **** 	
  13:main.c        **** 	while (1) {  	//Hauptschleife
  14:main.c        **** 		i++;
  15:main.c        **** 		char sensor = PollSwitch();
  16:main.c        **** 		sensor &= 0b00111111;
  17:main.c        **** 		
  18:main.c        **** 		MotorDir(FWD, FWD); //Werkeinstellung
  19:main.c        **** 		MotorSpeed(170, 130); 
  20:main.c        **** 		
  21:main.c        **** 		
  22:main.c        **** 		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
  23:main.c        **** 		{
  24:main.c        **** 			 MotorDir(BWD, BWD); 
  25:main.c        **** 			 MotorSpeed(60, 150);
  26:main.c        **** 			 StatusLED(RED);
  27:main.c        **** 			 msleep(1500);
  28:main.c        **** 		}
  29:main.c        **** 		
  30:main.c        **** 		uint16_t data[] = {0,0};
  31:main.c        **** 		LineData(data);
  32:main.c        **** 		
  33:main.c        **** 		if ((data[LEFT] > 50) || (data[RIGHT] > 50)) { 		//Geschwindigkeit geringer bei Licht über 50E
  34:main.c        **** 				MotorSpeed(60, 80);
  35:main.c        **** 				LineData(data);
  36:main.c        **** 				msleep(2000);
  37:main.c        **** 		}
  38:main.c        **** 		while ((data[LEFT] > 100) || (data[RIGHT] > 100)) 	//Geschwindigkeit 0 bei Licht über 100E
  39:main.c        **** 		{	
  40:main.c        **** 			stopAsuro(500);
  41:main.c        **** 			LineData(data);
  42:main.c        **** 		} 
  43:main.c        **** 		
  44:main.c        **** 		if ( (i % 3000) == 0) {
 104               		.loc 3 44 0
 105 0012 48EB      		ldi r20,lo8(-72)	 ;  272	*reload_inhi	[length = 4]
 106 0014 C42E      		mov r12,r20
 107 0016 4BE0      		ldi r20,lo8(11)
 108 0018 D42E      		mov r13,r20
 109               	.LBB17:
  45:main.c        **** 			int ran;
  46:main.c        **** 			ran = rand() % 2;
 110               		.loc 3 46 0
 111 001a 52E0      		ldi r21,lo8(2)	 ;  273	*reload_inhi	[length = 3]
 112 001c A52E      		mov r10,r21
 113 001e B12C      		mov r11,__zero_reg__
 114               	.LVL8:
 115               	.L26:
 116               	.LBE17:
  14:main.c        **** 		char sensor = PollSwitch();
 117               		.loc 3 14 0
 118 0020 0F5F      		subi r16,-1	 ;  14	addhi3_clobber/2	[length = 2]
 119 0022 1F4F      		sbci r17,-1
 120               	.LVL9:
  15:main.c        **** 		sensor &= 0b00111111;
 121               		.loc 3 15 0
 122 0024 00D0      		rcall PollSwitch	 ;  16	call_value_insn/2	[length = 1]
 123               	.LVL10:
 124 0026 F82E      		mov r15,r24	 ;  17	movqi_insn/1	[length = 1]
 125               	.LVL11:
  18:main.c        **** 		MotorSpeed(170, 130); 
 126               		.loc 3 18 0
 127 0028 60E2      		ldi r22,lo8(32)	 ;  20	movqi_insn/2	[length = 1]
 128 002a 80E2      		ldi r24,lo8(32)	 ;  21	movqi_insn/2	[length = 1]
 129 002c 00D0      		rcall MotorDir	 ;  22	call_insn/2	[length = 1]
 130               	.LVL12:
  19:main.c        **** 		
 131               		.loc 3 19 0
 132 002e 62E8      		ldi r22,lo8(-126)	 ;  23	movqi_insn/2	[length = 1]
 133 0030 8AEA      		ldi r24,lo8(-86)	 ;  24	movqi_insn/2	[length = 1]
 134 0032 00D0      		rcall MotorSpeed	 ;  25	call_insn/2	[length = 1]
 135               	.LVL13:
  16:main.c        **** 		
 136               		.loc 3 16 0
 137 0034 8F2D      		mov r24,r15	 ;  256	movqi_insn/1	[length = 1]
 138 0036 8F73      		andi r24,lo8(63)	 ;  26	andqi3/2	[length = 1]
 139               	.LVL14:
  22:main.c        **** 		{
 140               		.loc 3 22 0
 141 0038 01F4      		brne .L10	 ;  28	branch	[length = 1]
 142               	.LVL15:
 143               	.L13:
  30:main.c        **** 		LineData(data);
 144               		.loc 3 30 0
 145 003a 1A82      		std Y+2,__zero_reg__	 ;  30	*movhi/4	[length = 2]
 146 003c 1982      		std Y+1,__zero_reg__
 147 003e 1C82      		std Y+4,__zero_reg__	 ;  31	*movhi/4	[length = 2]
 148 0040 1B82      		std Y+3,__zero_reg__
  31:main.c        **** 		
 149               		.loc 3 31 0
 150 0042 CE01      		movw r24,r28	 ;  257	*movhi/1	[length = 1]
 151 0044 0196      		adiw r24,1	 ;  32	*addhi3/3	[length = 1]
 152 0046 00D0      		rcall LineData	 ;  33	call_insn/2	[length = 1]
 153               	.LVL16:
  33:main.c        **** 				MotorSpeed(60, 80);
 154               		.loc 3 33 0
 155 0048 8981      		ldd r24,Y+1	 ;  34	*movhi/3	[length = 2]
 156 004a 9A81      		ldd r25,Y+2
 157 004c C397      		sbiw r24,51	 ;  35	*cmphi/6	[length = 1]
 158 004e 00F0      		brlo .L37	 ;  36	branch	[length = 1]
 159 0050 00C0      		rjmp .L11	 ;  275	jump	[length = 1]
 160               	.LVL17:
 161               	.L10:
  24:main.c        **** 			 MotorSpeed(60, 150);
 162               		.loc 3 24 0
 163 0052 60E1      		ldi r22,lo8(16)	 ;  42	movqi_insn/2	[length = 1]
 164 0054 80E1      		ldi r24,lo8(16)	 ;  43	movqi_insn/2	[length = 1]
 165               	.LVL18:
 166 0056 00D0      		rcall MotorDir	 ;  44	call_insn/2	[length = 1]
 167               	.LVL19:
  25:main.c        **** 			 StatusLED(RED);
 168               		.loc 3 25 0
 169 0058 66E9      		ldi r22,lo8(-106)	 ;  45	movqi_insn/2	[length = 1]
 170 005a 8CE3      		ldi r24,lo8(60)	 ;  46	movqi_insn/2	[length = 1]
 171 005c 00D0      		rcall MotorSpeed	 ;  47	call_insn/2	[length = 1]
 172               	.LVL20:
  26:main.c        **** 			 msleep(1500);
 173               		.loc 3 26 0
 174 005e 82E0      		ldi r24,lo8(2)	 ;  48	movqi_insn/2	[length = 1]
 175 0060 00D0      		rcall StatusLED	 ;  49	call_insn/2	[length = 1]
 176               	.LVL21:
 177 0062 3CED      		ldi r19,lo8(-36)	 ;  271	*reload_inhi	[length = 4]
 178 0064 E32E      		mov r14,r19
 179 0066 35E0      		ldi r19,lo8(5)
 180 0068 F32E      		mov r15,r19
 181               	.LVL22:
 182               	.L14:
 183               	.LBB18:
 184               	.LBB19:
 185               		.loc 2 346 0
 186 006a 84E2      		ldi r24,lo8(36)	 ;  54	movqi_insn/2	[length = 1]
 187 006c 00D0      		rcall sleep	 ;  55	call_insn/2	[length = 1]
 188               	.LVL23:
 189 006e 81E0      		ldi r24,1	 ;  59	addhi3_clobber/3	[length = 3]
 190 0070 E81A      		sub r14,r24
 191 0072 F108      		sbc r15,__zero_reg__
 192               	.LVL24:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 193               		.loc 2 345 0
 194 0074 E114      		cp r14,__zero_reg__	 ;  61	*cmphi/2	[length = 2]
 195 0076 F104      		cpc r15,__zero_reg__
 196 0078 01F4      		brne .L14	 ;  62	branch	[length = 1]
 197 007a 00C0      		rjmp .L13	 ;  278	jump	[length = 1]
 198               	.LVL25:
 199               	.L37:
 200               	.LBE19:
 201               	.LBE18:
  33:main.c        **** 				MotorSpeed(60, 80);
 202               		.loc 3 33 0 discriminator 1
 203 007c 8B81      		ldd r24,Y+3	 ;  71	*movhi/3	[length = 2]
 204 007e 9C81      		ldd r25,Y+4
 205 0080 C397      		sbiw r24,51	 ;  72	*cmphi/6	[length = 1]
 206 0082 00F0      		brlo .L15	 ;  73	branch	[length = 1]
 207               	.L11:
  34:main.c        **** 				LineData(data);
 208               		.loc 3 34 0
 209 0084 60E5      		ldi r22,lo8(80)	 ;  79	movqi_insn/2	[length = 1]
 210 0086 8CE3      		ldi r24,lo8(60)	 ;  80	movqi_insn/2	[length = 1]
 211 0088 00D0      		rcall MotorSpeed	 ;  81	call_insn/2	[length = 1]
 212               	.LVL26:
  35:main.c        **** 				msleep(2000);
 213               		.loc 3 35 0
 214 008a CE01      		movw r24,r28	 ;  258	*movhi/1	[length = 1]
 215 008c 0196      		adiw r24,1	 ;  82	*addhi3/3	[length = 1]
 216 008e 00D0      		rcall LineData	 ;  83	call_insn/2	[length = 1]
 217               	.LVL27:
 218 0090 20ED      		ldi r18,lo8(-48)	 ;  270	*reload_inhi	[length = 4]
 219 0092 E22E      		mov r14,r18
 220 0094 27E0      		ldi r18,lo8(7)
 221 0096 F22E      		mov r15,r18
 222               	.LVL28:
 223               	.L17:
 224               	.LBB20:
 225               	.LBB21:
 226               		.loc 2 346 0
 227 0098 84E2      		ldi r24,lo8(36)	 ;  88	movqi_insn/2	[length = 1]
 228 009a 00D0      		rcall sleep	 ;  89	call_insn/2	[length = 1]
 229               	.LVL29:
 230 009c 81E0      		ldi r24,1	 ;  93	addhi3_clobber/3	[length = 3]
 231 009e E81A      		sub r14,r24
 232 00a0 F108      		sbc r15,__zero_reg__
 233               	.LVL30:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 234               		.loc 2 345 0
 235 00a2 E114      		cp r14,__zero_reg__	 ;  95	*cmphi/2	[length = 2]
 236 00a4 F104      		cpc r15,__zero_reg__
 237 00a6 01F4      		brne .L17	 ;  96	branch	[length = 1]
 238 00a8 00C0      		rjmp .L15	 ;  281	jump	[length = 1]
 239               	.LVL31:
 240               	.L39:
 241               	.LBE21:
 242               	.LBE20:
  38:main.c        **** 		{	
 243               		.loc 3 38 0 discriminator 2
 244 00aa 8B81      		ldd r24,Y+3	 ;  115	*movhi/3	[length = 2]
 245 00ac 9C81      		ldd r25,Y+4
 246 00ae 8536      		cpi r24,101	 ;  116	*cmphi/6	[length = 2]
 247 00b0 9105      		cpc r25,__zero_reg__
 248 00b2 00F0      		brlo .L38	 ;  117	branch	[length = 1]
 249               	.L18:
  40:main.c        **** 			LineData(data);
 250               		.loc 3 40 0
 251 00b4 84EF      		ldi r24,lo8(-12)	 ;  104	*movhi/5	[length = 2]
 252 00b6 91E0      		ldi r25,lo8(1)
 253 00b8 00D0      		rcall stopAsuro	 ;  105	call_insn/2	[length = 1]
 254               	.LVL32:
  41:main.c        **** 		} 
 255               		.loc 3 41 0
 256 00ba CE01      		movw r24,r28	 ;  259	*movhi/1	[length = 1]
 257 00bc 0196      		adiw r24,1	 ;  106	*addhi3/3	[length = 1]
 258 00be 00D0      		rcall LineData	 ;  107	call_insn/2	[length = 1]
 259               	.LVL33:
 260               	.L15:
  38:main.c        **** 		{	
 261               		.loc 3 38 0 discriminator 1
 262 00c0 8981      		ldd r24,Y+1	 ;  111	*movhi/3	[length = 2]
 263 00c2 9A81      		ldd r25,Y+2
 264 00c4 8536      		cpi r24,101	 ;  112	*cmphi/6	[length = 2]
 265 00c6 9105      		cpc r25,__zero_reg__
 266 00c8 00F0      		brlo .L39	 ;  113	branch	[length = 1]
 267 00ca 00C0      		rjmp .L18	 ;  286	jump	[length = 1]
 268               	.L38:
  44:main.c        **** 			int ran;
 269               		.loc 3 44 0
 270 00cc C801      		movw r24,r16	 ;  249	*movhi/1	[length = 1]
 271 00ce B601      		movw r22,r12	 ;  250	*movhi/1	[length = 1]
 272 00d0 00D0      		rcall __divmodhi4	 ;  251	*divmodhi4_call	[length = 1]
 273 00d2 892B      		or r24,r25	 ;  121	*cmphi/1	[length = 1]
 274 00d4 01F4      		brne .L20	 ;  122	branch	[length = 1]
 275               	.LBB22:
 276               		.loc 3 46 0
 277 00d6 00D0      		rcall rand	 ;  128	call_value_insn/2	[length = 1]
 278               	.LVL34:
 279 00d8 B501      		movw r22,r10	 ;  245	*movhi/1	[length = 1]
 280 00da 00D0      		rcall __divmodhi4	 ;  246	*divmodhi4_call	[length = 1]
 281               	.LVL35:
  47:main.c        **** 			if (ran) {
 282               		.loc 3 47 0
 283 00dc 892B      		or r24,r25	 ;  134	*cmphi/1	[length = 1]
 284 00de 01F0      		breq .L20	 ;  135	branch	[length = 1]
  48:main.c        **** 				StatusLED(YELLOW);
 285               		.loc 3 48 0
 286 00e0 83E0      		ldi r24,lo8(3)	 ;  137	movqi_insn/2	[length = 1]
 287 00e2 00D0      		rcall StatusLED	 ;  138	call_insn/2	[length = 1]
 288               	.LVL36:
  49:main.c        **** 				stopAsuro(3000);
 289               		.loc 3 49 0
 290 00e4 88EB      		ldi r24,lo8(-72)	 ;  220	*movhi/5	[length = 2]
 291 00e6 9BE0      		ldi r25,lo8(11)
 292 00e8 00D0      		rcall stopAsuro	 ;  140	call_insn/2	[length = 1]
 293               	.LVL37:
 294               	.L20:
 295               	.LBE22:
  35:main.c        **** 				msleep(2000);
 296               		.loc 3 35 0
 297 00ea 98EE      		ldi r25,lo8(-24)	 ;  269	*reload_inhi	[length = 4]
 298 00ec E92E      		mov r14,r25
 299 00ee 93E0      		ldi r25,lo8(3)
 300 00f0 F92E      		mov r15,r25
 301               	.LVL38:
 302               	.L23:
 303               	.LBB23:
 304               	.LBB24:
 305               		.loc 2 346 0
 306 00f2 84E2      		ldi r24,lo8(36)	 ;  146	movqi_insn/2	[length = 1]
 307 00f4 00D0      		rcall sleep	 ;  147	call_insn/2	[length = 1]
 308               	.LVL39:
 309 00f6 81E0      		ldi r24,1	 ;  151	addhi3_clobber/3	[length = 3]
 310 00f8 E81A      		sub r14,r24
 311 00fa F108      		sbc r15,__zero_reg__
 312               	.LVL40:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 313               		.loc 2 345 0
 314 00fc E114      		cp r14,__zero_reg__	 ;  152	*cmphi/2	[length = 2]
 315 00fe F104      		cpc r15,__zero_reg__
 316 0100 01F4      		brne .L23	 ;  153	branch	[length = 1]
 317               	.LBE24:
 318               	.LBE23:
  50:main.c        **** 			}
  51:main.c        **** 		}
  52:main.c        **** 
  53:main.c        **** 		msleep(1000); 
  54:main.c        **** 		MotorSpeed(160, 200);
 319               		.loc 3 54 0
 320 0102 68EC      		ldi r22,lo8(-56)	 ;  162	movqi_insn/2	[length = 1]
 321 0104 80EA      		ldi r24,lo8(-96)	 ;  163	movqi_insn/2	[length = 1]
 322 0106 00D0      		rcall MotorSpeed	 ;  164	call_insn/2	[length = 1]
 323               	.LVL41:
  55:main.c        **** 		StatusLED(GREEN);
 324               		.loc 3 55 0
 325 0108 81E0      		ldi r24,lo8(1)	 ;  165	movqi_insn/2	[length = 1]
 326 010a 00D0      		rcall StatusLED	 ;  166	call_insn/2	[length = 1]
 327               	.LVL42:
  56:main.c        **** 		BackLED(OFF, OFF);
 328               		.loc 3 56 0
 329 010c 60E0      		ldi r22,0	 ;  167	movqi_insn/1	[length = 1]
 330 010e 80E0      		ldi r24,0	 ;  168	movqi_insn/1	[length = 1]
 331 0110 00D0      		rcall BackLED	 ;  169	call_insn/2	[length = 1]
 332               	.LVL43:
 333 0112 84EF      		ldi r24,lo8(-12)	 ;  268	*reload_inhi	[length = 4]
 334 0114 E82E      		mov r14,r24
 335 0116 FF24      		clr r15
 336 0118 F394      		inc r15
 337               	.LVL44:
 338               	.L25:
 339               	.LBB25:
 340               	.LBB26:
 341               		.loc 2 346 0
 342 011a 84E2      		ldi r24,lo8(36)	 ;  174	movqi_insn/2	[length = 1]
 343 011c 00D0      		rcall sleep	 ;  175	call_insn/2	[length = 1]
 344               	.LVL45:
 345 011e 81E0      		ldi r24,1	 ;  179	addhi3_clobber/3	[length = 3]
 346 0120 E81A      		sub r14,r24
 347 0122 F108      		sbc r15,__zero_reg__
 348               	.LVL46:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 349               		.loc 2 345 0
 350 0124 E114      		cp r14,__zero_reg__	 ;  180	*cmphi/2	[length = 2]
 351 0126 F104      		cpc r15,__zero_reg__
 352 0128 01F4      		brne .L25	 ;  181	branch	[length = 1]
 353 012a 00C0      		rjmp .L26	 ;  289	jump	[length = 1]
 354               	.LBE26:
 355               	.LBE25:
 356               	.LBE16:
 357               		.cfi_endproc
 358               	.LFE8:
 360               		.text
 361               	.Letext0:
 362               		.file 4 "/usr/lib/avr/include/stdint.h"
 363               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 364               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 365               		.file 7 "/usr/lib/avr/include/stdlib.h"
 366               		.file 8 "../../libtinyasuro/inc/asuro/switches.h"
 367               		.file 9 "../../libtinyasuro/inc/asuro/sensors.h"
 368               		.file 10 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccKMmX3K.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccKMmX3K.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccKMmX3K.s:4      *ABS*:0000003f __SREG__
     /tmp/ccKMmX3K.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccKMmX3K.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccKMmX3K.s:13     .text.stopAsuro:00000000 stopAsuro
     /tmp/ccKMmX3K.s:71     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
MotorSpeed
sleep
Init
PollSwitch
MotorDir
LineData
StatusLED
__divmodhi4
rand
BackLED
