   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.stopAsuro,"ax",@progbits
  11               	.global	stopAsuro
  13               	stopAsuro:
  14               	.LFB3:
  15               		.file 1 "helpers.h"
   1:helpers.h     **** #include <stdio.h>
   2:helpers.h     **** 
   3:helpers.h     **** void stopAsuro(int pause) 
   4:helpers.h     **** {
  16               		.loc 1 4 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28	 ;  45	pushqi1/1	[length = 1]
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29	 ;  46	pushqi1/1	[length = 1]
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24	 ;  2	*movhi/1	[length = 1]
   5:helpers.h     **** 	MotorSpeed(0, 0);
  32               		.loc 1 5 0
  33 0006 60E0      		ldi r22,0	 ;  6	movqi_insn/1	[length = 1]
  34 0008 80E0      		ldi r24,0	 ;  7	movqi_insn/1	[length = 1]
  35               	.LVL1:
  36 000a 00D0      		rcall MotorSpeed	 ;  8	call_insn/2	[length = 1]
  37               	.LVL2:
   6:helpers.h     **** 	if (pause > 0)
  38               		.loc 1 6 0
  39 000c 1C16      		cp __zero_reg__,r28	 ;  9	*reversed_tsthi	[length = 2]
  40 000e 1D06      		cpc __zero_reg__,r29
  41 0010 04F4      		brge .L1	 ;  10	branch	[length = 1]
  42               	.LVL3:
  43               	.L4:
  44               	.LBB19:
  45               	.LBB20:
  46               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  47               		.loc 2 346 0
  48 0012 84E2      		ldi r24,lo8(36)	 ;  21	movqi_insn/2	[length = 1]
  49 0014 00D0      		rcall sleep	 ;  22	call_insn/2	[length = 1]
  50               	.LVL4:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  51               		.loc 2 345 0
  52 0016 2197      		sbiw r28,1	 ;  23	addhi3_clobber/1	[length = 1]
  53               	.LVL5:
  54 0018 2097      		sbiw r28,0	 ;  27	*cmphi/1	[length = 1]
  55 001a 01F4      		brne .L4	 ;  28	branch	[length = 1]
  56               	.LVL6:
  57               	.L1:
  58               	/* epilogue start */
  59               	.LBE20:
  60               	.LBE19:
   7:helpers.h     **** 		msleep(pause);
   8:helpers.h     **** }
  61               		.loc 1 8 0
  62 001c DF91      		pop r29	 ;  49	popqi	[length = 1]
  63 001e CF91      		pop r28	 ;  50	popqi	[length = 1]
  64 0020 0895      		ret	 ;  51	return_from_epilogue	[length = 1]
  65               		.cfi_endproc
  66               	.LFE3:
  68               		.section	.text.flashLED,"ax",@progbits
  69               	.global	flashLED
  71               	flashLED:
  72               	.LFB4:
   9:helpers.h     **** 
  10:helpers.h     **** void flashLED (int intervall)
  11:helpers.h     **** {
  73               		.loc 1 11 0
  74               		.cfi_startproc
  75               	.LVL7:
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  80 0000 182F      		mov r17,r24	 ;  40	movqi_insn/1	[length = 1]
  81 0002 092F      		mov r16,r25	 ;  41	movqi_insn/1	[length = 1]
  82               	.LVL8:
  83               	.L12:
  84               	.LBB21:
  12:helpers.h     **** 	while (1)
  13:helpers.h     **** 	{
  14:helpers.h     **** 		int status = 0;
  15:helpers.h     **** 		switch (status)
  16:helpers.h     **** 		{
  17:helpers.h     **** 			case 0:
  18:helpers.h     **** 			StatusLED(RED);
  85               		.loc 1 18 0
  86 0004 82E0      		ldi r24,lo8(2)	 ;  8	movqi_insn/2	[length = 1]
  87 0006 00D0      		rcall StatusLED	 ;  9	call_insn/2	[length = 1]
  88               	.LVL9:
  19:helpers.h     **** 			status = 1;
  20:helpers.h     **** 			break;
  21:helpers.h     **** 			
  22:helpers.h     **** 			case 1:
  23:helpers.h     **** 			StatusLED(GREEN);
  24:helpers.h     **** 			status = 2;
  25:helpers.h     **** 			break;
  26:helpers.h     **** 			
  27:helpers.h     **** 			case 2:
  28:helpers.h     **** 			StatusLED(YELLOW);
  29:helpers.h     **** 			status = 0;
  30:helpers.h     **** 			break;
  31:helpers.h     **** 		}
  32:helpers.h     **** 		msleep(intervall);
  89               		.loc 1 32 0
  90 0008 C12F      		mov r28,r17	 ;  47	movqi_insn/1	[length = 1]
  91 000a D02F      		mov r29,r16	 ;  48	movqi_insn/1	[length = 1]
  92               	.LVL10:
  93               	.L10:
  94               	.LBB22:
  95               	.LBB23:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
  96               		.loc 2 345 0
  97 000c 2097      		sbiw r28,0	 ;  24	*cmphi/1	[length = 1]
  98 000e 01F0      		breq .L12	 ;  25	branch	[length = 1]
  99               		.loc 2 346 0
 100 0010 84E2      		ldi r24,lo8(36)	 ;  16	movqi_insn/2	[length = 1]
 101 0012 00D0      		rcall sleep	 ;  17	call_insn/2	[length = 1]
 102               	.LVL11:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 103               		.loc 2 345 0
 104 0014 2197      		sbiw r28,1	 ;  18	addhi3_clobber/1	[length = 1]
 105               	.LVL12:
 106 0016 00C0      		rjmp .L10	 ;  50	jump	[length = 1]
 107               	.LBE23:
 108               	.LBE22:
 109               	.LBE21:
 110               		.cfi_endproc
 111               	.LFE4:
 113               		.section	.text.stopLED,"ax",@progbits
 114               	.global	stopLED
 116               	stopLED:
 117               	.LFB5:
  33:helpers.h     **** 	}
  34:helpers.h     **** }
  35:helpers.h     **** 
  36:helpers.h     **** void stopLED () 
  37:helpers.h     **** {
 118               		.loc 1 37 0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
  38:helpers.h     **** 	StatusLED(OFF);
 124               		.loc 1 38 0
 125 0000 80E0      		ldi r24,0	 ;  5	movqi_insn/1	[length = 1]
 126 0002 00C0      		rjmp StatusLED	 ;  6	call_insn/4	[length = 1]
 127               	.LVL13:
 128               		.cfi_endproc
 129               	.LFE5:
 131               		.section	.text.startup.main,"ax",@progbits
 132               	.global	main
 134               	main:
 135               	.LFB10:
 136               		.file 3 "main.c"
   1:main.c        **** #define SWITCH(X) 1<<X
   2:main.c        **** 
   3:main.c        **** #include <asuro/asuro.h>
   4:main.c        **** #include "helpers.h"
   5:main.c        **** #include <stdlib.h>
   6:main.c        **** 
   7:main.c        **** void main(void) {
 137               		.loc 3 7 0
 138               		.cfi_startproc
 139 0000 CF93      		push r28	 ;  132	pushqi1/1	[length = 1]
 140               	.LCFI2:
 141               		.cfi_def_cfa_offset 3
 142               		.cfi_offset 28, -2
 143 0002 DF93      		push r29	 ;  133	pushqi1/1	[length = 1]
 144               	.LCFI3:
 145               		.cfi_def_cfa_offset 4
 146               		.cfi_offset 29, -3
 147               		 ; SP -= 4	 ;  137	*addhi3_sp	[length = 2]
 148 0004 00D0      		rcall .
 149 0006 00D0      		rcall .
 150               	.LCFI4:
 151               		.cfi_def_cfa_offset 8
 152 0008 CDB7      		in r28,__SP_L__	 ;  138	*movhi/8	[length = 2]
 153 000a DEB7      		in r29,__SP_H__
 154               	.LCFI5:
 155               		.cfi_def_cfa_register 28
 156               	/* prologue: function */
 157               	/* frame size = 4 */
 158               	/* stack size = 6 */
 159               	.L__stack_usage = 6
   8:main.c        ****     Init();
 160               		.loc 3 8 0
 161 000c 00D0      		rcall Init	 ;  7	call_insn/2	[length = 1]
 162               	.LVL14:
 163               	.LBB24:
   9:main.c        ****     int status = 0;
  10:main.c        **** 	//int x = 160;
  11:main.c        **** 	//int y = 200;
  12:main.c        **** 	int i = 0;
  13:main.c        **** 	while (1) {  			//Hauptschleife
  14:main.c        **** 		i++;
  15:main.c        **** 		char sensor = PollSwitch();
 164               		.loc 3 15 0
 165 000e 00D0      		rcall PollSwitch	 ;  11	call_value_insn/2	[length = 1]
 166               	.LVL15:
 167 0010 182F      		mov r17,r24	 ;  12	movqi_insn/1	[length = 1]
 168               	.LVL16:
  16:main.c        **** 		sensor &= 0b00111111;
  17:main.c        **** 		MotorDir(FWD, FWD); //Werkeinstellung
 169               		.loc 3 17 0
 170 0012 60E2      		ldi r22,lo8(32)	 ;  15	movqi_insn/2	[length = 1]
 171 0014 80E2      		ldi r24,lo8(32)	 ;  16	movqi_insn/2	[length = 1]
 172 0016 00D0      		rcall MotorDir	 ;  17	call_insn/2	[length = 1]
 173               	.LVL17:
  18:main.c        **** 		MotorSpeed(230, 200); 
 174               		.loc 3 18 0
 175 0018 68EC      		ldi r22,lo8(-56)	 ;  18	movqi_insn/2	[length = 1]
 176 001a 86EE      		ldi r24,lo8(-26)	 ;  19	movqi_insn/2	[length = 1]
 177 001c 00D0      		rcall MotorSpeed	 ;  20	call_insn/2	[length = 1]
 178               	.LVL18:
  16:main.c        **** 		sensor &= 0b00111111;
 179               		.loc 3 16 0
 180 001e 1F73      		andi r17,lo8(63)	 ;  21	andqi3/2	[length = 1]
 181               	.LVL19:
  19:main.c        **** 		
  20:main.c        **** 		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
 182               		.loc 3 20 0
 183 0020 01F4      		brne .L15	 ;  23	branch	[length = 1]
 184               	.L17:
  21:main.c        **** 		{
  22:main.c        **** 			 MotorDir(BWD, BWD); 
  23:main.c        **** 			 MotorSpeed(60, 150);
  24:main.c        **** 			 msleep(800);
  25:main.c        **** 		}
  26:main.c        **** 		MotorDir(FWD, FWD); 
 185               		.loc 3 26 0
 186 0022 60E2      		ldi r22,lo8(32)	 ;  25	movqi_insn/2	[length = 1]
 187 0024 80E2      		ldi r24,lo8(32)	 ;  26	movqi_insn/2	[length = 1]
 188 0026 00D0      		rcall MotorDir	 ;  27	call_insn/2	[length = 1]
 189               	.LVL20:
  27:main.c        **** 		uint16_t data[] = {0,0};
 190               		.loc 3 27 0
 191 0028 1A82      		std Y+2,__zero_reg__	 ;  28	*movhi/4	[length = 2]
 192 002a 1982      		std Y+1,__zero_reg__
 193 002c 1C82      		std Y+4,__zero_reg__	 ;  29	*movhi/4	[length = 2]
 194 002e 1B82      		std Y+3,__zero_reg__
  28:main.c        **** 		LineData(data);
 195               		.loc 3 28 0
 196 0030 CE01      		movw r24,r28	 ;  129	*movhi/1	[length = 1]
 197 0032 0196      		adiw r24,1	 ;  30	*addhi3/3	[length = 1]
 198 0034 00D0      		rcall LineData	 ;  31	call_insn/2	[length = 1]
 199               	.LVL21:
 200 0036 00C0      		rjmp .L25	 ;  145	jump	[length = 1]
 201               	.L15:
  22:main.c        **** 			 MotorSpeed(60, 150);
 202               		.loc 3 22 0
 203 0038 60E1      		ldi r22,lo8(16)	 ;  38	movqi_insn/2	[length = 1]
 204 003a 80E1      		ldi r24,lo8(16)	 ;  39	movqi_insn/2	[length = 1]
 205 003c 00D0      		rcall MotorDir	 ;  40	call_insn/2	[length = 1]
 206               	.LVL22:
  23:main.c        **** 			 msleep(800);
 207               		.loc 3 23 0
 208 003e 66E9      		ldi r22,lo8(-106)	 ;  41	movqi_insn/2	[length = 1]
 209 0040 8CE3      		ldi r24,lo8(60)	 ;  42	movqi_insn/2	[length = 1]
 210 0042 00D0      		rcall MotorSpeed	 ;  43	call_insn/2	[length = 1]
 211               	.LVL23:
 212 0044 00E2      		ldi r16,lo8(32)	 ;  3	*movhi/5	[length = 2]
 213 0046 13E0      		ldi r17,lo8(3)
 214               	.LVL24:
 215               	.L18:
 216               	.LBB25:
 217               	.LBB26:
 218               		.loc 2 346 0
 219 0048 84E2      		ldi r24,lo8(36)	 ;  48	movqi_insn/2	[length = 1]
 220 004a 00D0      		rcall sleep	 ;  49	call_insn/2	[length = 1]
 221               	.LVL25:
 222 004c 0150      		subi r16,1	 ;  53	addhi3_clobber/2	[length = 2]
 223 004e 1109      		sbc r17,__zero_reg__
 224               	.LVL26:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 225               		.loc 2 345 0
 226 0050 0115      		cp r16,__zero_reg__	 ;  55	*cmphi/2	[length = 2]
 227 0052 1105      		cpc r17,__zero_reg__
 228 0054 01F4      		brne .L18	 ;  56	branch	[length = 1]
 229 0056 00C0      		rjmp .L17	 ;  148	jump	[length = 1]
 230               	.LVL27:
 231               	.L19:
 232               	.LBE26:
 233               	.LBE25:
  29:main.c        **** 		
  30:main.c        **** 		LineData(data);
  31:main.c        **** 		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  32:main.c        **** 		{	
  33:main.c        **** 			stopAsuro(500);
 234               		.loc 3 33 0
 235 0058 84EF      		ldi r24,lo8(-12)	 ;  64	*movhi/5	[length = 2]
 236 005a 91E0      		ldi r25,lo8(1)
 237 005c 00D0      		rcall stopAsuro	 ;  65	call_insn/2	[length = 1]
 238               	.LVL28:
 239               	.L25:
  34:main.c        **** 			LineData(data);
 240               		.loc 3 34 0
 241 005e CE01      		movw r24,r28	 ;  131	*movhi/1	[length = 1]
 242 0060 0196      		adiw r24,1	 ;  66	*addhi3/3	[length = 1]
 243 0062 00D0      		rcall LineData	 ;  67	call_insn/2	[length = 1]
 244               	.LVL29:
  31:main.c        **** 		{	
 245               		.loc 3 31 0
 246 0064 8981      		ldd r24,Y+1	 ;  71	*movhi/3	[length = 2]
 247 0066 9A81      		ldd r25,Y+2
 248 0068 853F      		cpi r24,-11	 ;  72	*cmphi/7	[length = 2]
 249 006a 9140      		sbci r25,1
 250 006c 00F4      		brsh .L19	 ;  73	branch	[length = 1]
  31:main.c        **** 		{	
 251               		.loc 3 31 0 is_stmt 0 discriminator 2
 252 006e 8B81      		ldd r24,Y+3	 ;  75	*movhi/3	[length = 2]
 253 0070 9C81      		ldd r25,Y+4
 254 0072 853F      		cpi r24,-11	 ;  76	*cmphi/7	[length = 2]
 255 0074 9140      		sbci r25,1
 256 0076 00F4      		brsh .L19	 ;  77	branch	[length = 1]
  35:main.c        **** 		} 
  36:main.c        **** 		
  37:main.c        **** 		if ( (i % 3000) == 0) {
  38:main.c        **** 			int ran;
  39:main.c        **** 			ran = rand() % 2;
  40:main.c        **** 			if (ran) {
  41:main.c        **** 				
  42:main.c        **** 				stopAsuro(3000);
  43:main.c        **** 				
  44:main.c        **** 			}
  45:main.c        **** 		}
  46:main.c        **** 		switch (status) {
  47:main.c        **** 			
  48:main.c        **** 			case 0: 
  49:main.c        **** 			MotorSpeed(250, 175);
 257               		.loc 3 49 0 is_stmt 1
 258 0078 6FEA      		ldi r22,lo8(-81)	 ;  79	movqi_insn/2	[length = 1]
 259 007a 8AEF      		ldi r24,lo8(-6)	 ;  80	movqi_insn/2	[length = 1]
 260 007c 00D0      		rcall MotorSpeed	 ;  81	call_insn/2	[length = 1]
 261               	.LVL30:
 262 007e 00EA      		ldi r16,lo8(-96)	 ;  4	*movhi/5	[length = 2]
 263 0080 1FE0      		ldi r17,lo8(15)
 264               	.LVL31:
 265               	.L21:
 266               	.LBB27:
 267               	.LBB28:
 268               		.loc 2 346 0
 269 0082 84E2      		ldi r24,lo8(36)	 ;  87	movqi_insn/2	[length = 1]
 270 0084 00D0      		rcall sleep	 ;  88	call_insn/2	[length = 1]
 271               	.LVL32:
 272 0086 0150      		subi r16,1	 ;  92	addhi3_clobber/2	[length = 2]
 273 0088 1109      		sbc r17,__zero_reg__
 274               	.LVL33:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 275               		.loc 2 345 0
 276 008a 0115      		cp r16,__zero_reg__	 ;  93	*cmphi/2	[length = 2]
 277 008c 1105      		cpc r17,__zero_reg__
 278 008e 01F4      		brne .L21	 ;  94	branch	[length = 1]
 279               	.LBE28:
 280               	.LBE27:
  50:main.c        **** 			status = 1;
  51:main.c        **** 			msleep(4000);
  52:main.c        **** 			break;
  53:main.c        **** 			
  54:main.c        **** 			case 1: 
  55:main.c        **** 			MotorSpeed(80,140);
  56:main.c        **** 			status = 2;
  57:main.c        **** 			msleep(4000);
  58:main.c        **** 			break;
  59:main.c        **** 			
  60:main.c        **** 			case 2: 
  61:main.c        **** 			MotorSpeed(220, 205); 
  62:main.c        **** 			status = 3;
  63:main.c        **** 			msleep(4000);
  64:main.c        **** 			break;
  65:main.c        **** 			
  66:main.c        **** 			case 3: 
  67:main.c        **** 			MotorSpeed(200, 260); 
  68:main.c        **** 			status = 0;
  69:main.c        **** 			msleep(4000);
  70:main.c        **** 			break;
  71:main.c        **** 			
  72:main.c        **** 			default: 
  73:main.c        **** 			MotorDir(BREAK, BREAK);
  74:main.c        **** 		}
  75:main.c        **** 		flashLED(500);
 281               		.loc 3 75 0
 282 0090 84EF      		ldi r24,lo8(-12)	 ;  103	*movhi/5	[length = 2]
 283 0092 91E0      		ldi r25,lo8(1)
 284 0094 00D0      		rcall flashLED	 ;  104	call_insn/2	[length = 1]
 285               	.LVL34:
 286               	.LBE24:
 287               		.cfi_endproc
 288               	.LFE10:
 290               		.text
 291               	.Letext0:
 292               		.file 4 "/usr/lib/avr/include/stdint.h"
 293               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 294               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 295               		.file 7 "../../libtinyasuro/inc/asuro/sensors.h"
 296               		.file 8 "../../libtinyasuro/inc/asuro/switches.h"
 297               		.file 9 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccnadWSv.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccnadWSv.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccnadWSv.s:4      *ABS*:0000003f __SREG__
     /tmp/ccnadWSv.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccnadWSv.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccnadWSv.s:13     .text.stopAsuro:00000000 stopAsuro
     /tmp/ccnadWSv.s:71     .text.flashLED:00000000 flashLED
     /tmp/ccnadWSv.s:116    .text.stopLED:00000000 stopLED
     /tmp/ccnadWSv.s:134    .text.startup.main:00000000 main

UNDEFINED SYMBOLS
MotorSpeed
sleep
StatusLED
Init
PollSwitch
MotorDir
LineData
