
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000708  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  000007a0  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000162b  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  00001fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000840  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  0000328c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a62  00000000  00000000  00003c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  0000467d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	2c c2       	rjmp	.+1112   	; 0x462 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	71 c1       	rjmp	.+738    	; 0x300 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	af 36       	cpi	r26, 0x6F	; 111
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e8 e0       	ldi	r30, 0x08	; 8
  4a:	f7 e0       	ldi	r31, 0x07	; 7
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>
  58:	13 d0       	rcall	.+38     	; 0x80 <main>
  5a:	54 c3       	rjmp	.+1704   	; 0x704 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	18 d1       	rcall	.+560    	; 0x29a <MotorSpeed>
	if (pause > 0)
  6a:	1c 16       	cp	r1, r28
  6c:	1d 06       	cpc	r1, r29
  6e:	2c f4       	brge	.+10     	; 0x7a <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  70:	84 e2       	ldi	r24, 0x24	; 36
  72:	0b d2       	rcall	.+1046   	; 0x48a <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  74:	21 97       	sbiw	r28, 0x01	; 1
  76:	20 97       	sbiw	r28, 0x00	; 0
  78:	d9 f7       	brne	.-10     	; 0x70 <stopAsuro+0x12>
		msleep(pause);
}
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

00000080 <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    Init();
  8c:	c8 d0       	rcall	.+400    	; 0x21e <Init>
	//int x = 160;
	//int y = 200;
	int i = 0;
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
  92:	58 eb       	ldi	r21, 0xB8	; 184
  94:	c5 2e       	mov	r12, r21
  96:	5b e0       	ldi	r21, 0x0B	; 11
  98:	d5 2e       	mov	r13, r21
			int ran;
			ran = rand() % 2;
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	a6 2e       	mov	r10, r22
  9e:	b1 2c       	mov	r11, r1
    Init();
	//int x = 160;
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
  a0:	0f 5f       	subi	r16, 0xFF	; 255
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
		char sensor = PollSwitch();
  a4:	95 d1       	rcall	.+810    	; 0x3d0 <PollSwitch>
  a6:	f8 2e       	mov	r15, r24
		sensor &= 0b00111111;
		
		MotorDir(FWD, FWD); //Werkeinstellung
  a8:	60 e2       	ldi	r22, 0x20	; 32
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	ea d0       	rcall	.+468    	; 0x282 <MotorDir>
		MotorSpeed(230, 190); 
  ae:	6e eb       	ldi	r22, 0xBE	; 190
  b0:	86 ee       	ldi	r24, 0xE6	; 230
  b2:	f3 d0       	rcall	.+486    	; 0x29a <MotorSpeed>
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  b4:	8f 2d       	mov	r24, r15
  b6:	8f 73       	andi	r24, 0x3F	; 63
		
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 190); 
		
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  b8:	69 f4       	brne	.+26     	; 0xd4 <main+0x54>
			 MotorSpeed(60, 150);
			 StatusLED(RED);
			 msleep(800);
		}
		
		uint16_t data[] = {0,0};
  ba:	1a 82       	std	Y+2, r1	; 0x02
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	1c 82       	std	Y+4, r1	; 0x04
  c0:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	03 d1       	rcall	.+518    	; 0x2ce <LineData>
		
		if (((data[LEFT] > 100) || (data[RIGHT] > 100)) && ((data[LEFT] < 400) || (data[RIGHT] < 400))) { 		//Geschwindigkeit geringer bei Licht über 50E
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	85 36       	cpi	r24, 0x65	; 101
  ce:	91 05       	cpc	r25, r1
  d0:	e0 f4       	brcc	.+56     	; 0x10a <main+0x8a>
  d2:	15 c0       	rjmp	.+42     	; 0xfe <main+0x7e>
		MotorSpeed(230, 190); 
		
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  d4:	60 e1       	ldi	r22, 0x10	; 16
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	d4 d0       	rcall	.+424    	; 0x282 <MotorDir>
			 MotorSpeed(60, 150);
  da:	66 e9       	ldi	r22, 0x96	; 150
  dc:	8c e3       	ldi	r24, 0x3C	; 60
  de:	dd d0       	rcall	.+442    	; 0x29a <MotorSpeed>
			 StatusLED(RED);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	a4 d0       	rcall	.+328    	; 0x22c <StatusLED>
  e4:	40 e2       	ldi	r20, 0x20	; 32
  e6:	e4 2e       	mov	r14, r20
  e8:	43 e0       	ldi	r20, 0x03	; 3
  ea:	f4 2e       	mov	r15, r20
        sleep(36);
  ec:	84 e2       	ldi	r24, 0x24	; 36
  ee:	cd d1       	rcall	.+922    	; 0x48a <sleep>
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	e2 1a       	sub	r14, r18
  f4:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  f6:	e1 14       	cp	r14, r1
  f8:	f1 04       	cpc	r15, r1
  fa:	c1 f7       	brne	.-16     	; 0xec <main+0x6c>
  fc:	de cf       	rjmp	.-68     	; 0xba <main+0x3a>
		}
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		if (((data[LEFT] > 100) || (data[RIGHT] > 100)) && ((data[LEFT] < 400) || (data[RIGHT] < 400))) { 		//Geschwindigkeit geringer bei Licht über 50E
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	85 36       	cpi	r24, 0x65	; 101
 104:	91 05       	cpc	r25, r1
 106:	48 f4       	brcc	.+18     	; 0x11a <main+0x9a>
 108:	20 c0       	rjmp	.+64     	; 0x14a <main+0xca>
 10a:	80 39       	cpi	r24, 0x90	; 144
 10c:	91 40       	sbci	r25, 0x01	; 1
 10e:	28 f0       	brcs	.+10     	; 0x11a <main+0x9a>
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	9c 81       	ldd	r25, Y+4	; 0x04
 114:	80 39       	cpi	r24, 0x90	; 144
 116:	91 40       	sbci	r25, 0x01	; 1
 118:	c0 f4       	brcc	.+48     	; 0x14a <main+0xca>
				MotorSpeed(50, 70);
 11a:	66 e4       	ldi	r22, 0x46	; 70
 11c:	82 e3       	ldi	r24, 0x32	; 50
 11e:	bd d0       	rcall	.+378    	; 0x29a <MotorSpeed>
 120:	30 ed       	ldi	r19, 0xD0	; 208
 122:	e3 2e       	mov	r14, r19
 124:	37 e0       	ldi	r19, 0x07	; 7
 126:	f3 2e       	mov	r15, r19
        sleep(36);
 128:	84 e2       	ldi	r24, 0x24	; 36
 12a:	af d1       	rcall	.+862    	; 0x48a <sleep>
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	e4 1a       	sub	r14, r20
 130:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 132:	e1 14       	cp	r14, r1
 134:	f1 04       	cpc	r15, r1
 136:	c1 f7       	brne	.-16     	; 0x128 <main+0xa8>
 138:	08 c0       	rjmp	.+16     	; 0x14a <main+0xca>
				msleep(2000);
		}
		LineData(data);
		while ((data[LEFT] > 400) || (data[RIGHT] > 400)) 	//Geschwindigkeit 0 bei Licht über 100E
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	9c 81       	ldd	r25, Y+4	; 0x04
 13e:	81 39       	cpi	r24, 0x91	; 145
 140:	91 40       	sbci	r25, 0x01	; 1
 142:	60 f0       	brcs	.+24     	; 0x15c <main+0xdc>
		{	
			stopAsuro(500);
 144:	84 ef       	ldi	r24, 0xF4	; 244
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	8a df       	rcall	.-236    	; 0x5e <stopAsuro>
			LineData(data);
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	bf d0       	rcall	.+382    	; 0x2ce <LineData>
		if (((data[LEFT] > 100) || (data[RIGHT] > 100)) && ((data[LEFT] < 400) || (data[RIGHT] < 400))) { 		//Geschwindigkeit geringer bei Licht über 50E
				MotorSpeed(50, 70);
				msleep(2000);
		}
		LineData(data);
		while ((data[LEFT] > 400) || (data[RIGHT] > 400)) 	//Geschwindigkeit 0 bei Licht über 100E
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	81 39       	cpi	r24, 0x91	; 145
 156:	91 40       	sbci	r25, 0x01	; 1
 158:	80 f3       	brcs	.-32     	; 0x13a <main+0xba>
 15a:	f4 cf       	rjmp	.-24     	; 0x144 <main+0xc4>
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
 15c:	c8 01       	movw	r24, r16
 15e:	b6 01       	movw	r22, r12
 160:	0d d2       	rcall	.+1050   	; 0x57c <__divmodhi4>
 162:	89 2b       	or	r24, r25
 164:	51 f4       	brne	.+20     	; 0x17a <main+0xfa>
			int ran;
			ran = rand() % 2;
 166:	66 d2       	rcall	.+1228   	; 0x634 <rand>
 168:	b5 01       	movw	r22, r10
 16a:	08 d2       	rcall	.+1040   	; 0x57c <__divmodhi4>
			if (ran) {
 16c:	89 2b       	or	r24, r25
 16e:	29 f0       	breq	.+10     	; 0x17a <main+0xfa>
				StatusLED(YELLOW);
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	5c d0       	rcall	.+184    	; 0x22c <StatusLED>
				stopAsuro(3000);
 174:	88 eb       	ldi	r24, 0xB8	; 184
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	72 df       	rcall	.-284    	; 0x5e <stopAsuro>
			}
		}
		
		if ((data[LEFT] > data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
 17a:	29 81       	ldd	r18, Y+1	; 0x01
 17c:	3a 81       	ldd	r19, Y+2	; 0x02
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	82 17       	cp	r24, r18
 184:	93 07       	cpc	r25, r19
 186:	40 f0       	brcs	.+16     	; 0x198 <main+0x118>
			MotorSpeed(70, 140);
			LineData(data);
			msleep(100);
		}
		
		if ((data[LEFT] < data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	3a 81       	ldd	r19, Y+2	; 0x02
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	28 17       	cp	r18, r24
 192:	39 07       	cpc	r19, r25
 194:	c8 f0       	brcs	.+50     	; 0x1c8 <main+0x148>
 196:	1e c0       	rjmp	.+60     	; 0x1d4 <main+0x154>
				StatusLED(YELLOW);
				stopAsuro(3000);
			}
		}
		
		if ((data[LEFT] > data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
 198:	20 39       	cpi	r18, 0x90	; 144
 19a:	31 40       	sbci	r19, 0x01	; 1
 19c:	18 f0       	brcs	.+6      	; 0x1a4 <main+0x124>
 19e:	80 39       	cpi	r24, 0x90	; 144
 1a0:	91 40       	sbci	r25, 0x01	; 1
 1a2:	90 f7       	brcc	.-28     	; 0x188 <main+0x108>
		{
			MotorSpeed(70, 140);
 1a4:	6c e8       	ldi	r22, 0x8C	; 140
 1a6:	86 e4       	ldi	r24, 0x46	; 70
 1a8:	78 d0       	rcall	.+240    	; 0x29a <MotorSpeed>
			LineData(data);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	8f d0       	rcall	.+286    	; 0x2ce <LineData>
 1b0:	24 e6       	ldi	r18, 0x64	; 100
 1b2:	e2 2e       	mov	r14, r18
 1b4:	f1 2c       	mov	r15, r1
        sleep(36);
 1b6:	84 e2       	ldi	r24, 0x24	; 36
 1b8:	68 d1       	rcall	.+720    	; 0x48a <sleep>
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	e4 1a       	sub	r14, r20
 1be:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1c0:	e1 14       	cp	r14, r1
 1c2:	f1 04       	cpc	r15, r1
 1c4:	c1 f7       	brne	.-16     	; 0x1b6 <main+0x136>
 1c6:	e0 cf       	rjmp	.-64     	; 0x188 <main+0x108>
			msleep(100);
		}
		
		if ((data[LEFT] < data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
 1c8:	20 39       	cpi	r18, 0x90	; 144
 1ca:	31 40       	sbci	r19, 0x01	; 1
 1cc:	68 f0       	brcs	.+26     	; 0x1e8 <main+0x168>
 1ce:	80 39       	cpi	r24, 0x90	; 144
 1d0:	91 40       	sbci	r25, 0x01	; 1
 1d2:	50 f0       	brcs	.+20     	; 0x1e8 <main+0x168>
		{
			MotorSpeed(180, 90);
			LineData(data);
			msleep(100);
		}
		StatusLED(GREEN);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	2a d0       	rcall	.+84     	; 0x22c <StatusLED>
		BackLED(OFF, OFF);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	47 d0       	rcall	.+142    	; 0x26c <BackLED>
 1de:	90 e2       	ldi	r25, 0x20	; 32
 1e0:	e9 2e       	mov	r14, r25
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	f9 2e       	mov	r15, r25
 1e6:	12 c0       	rjmp	.+36     	; 0x20c <main+0x18c>
			msleep(100);
		}
		
		if ((data[LEFT] < data[RIGHT]) && ((data[LEFT] < 400) || (data[RIGHT] < 400)))
		{
			MotorSpeed(180, 90);
 1e8:	6a e5       	ldi	r22, 0x5A	; 90
 1ea:	84 eb       	ldi	r24, 0xB4	; 180
 1ec:	56 d0       	rcall	.+172    	; 0x29a <MotorSpeed>
			LineData(data);
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	6d d0       	rcall	.+218    	; 0x2ce <LineData>
 1f4:	84 e6       	ldi	r24, 0x64	; 100
 1f6:	e8 2e       	mov	r14, r24
 1f8:	f1 2c       	mov	r15, r1
        sleep(36);
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	46 d1       	rcall	.+652    	; 0x48a <sleep>
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	e4 1a       	sub	r14, r20
 202:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 204:	e1 14       	cp	r14, r1
 206:	f1 04       	cpc	r15, r1
 208:	c1 f7       	brne	.-16     	; 0x1fa <main+0x17a>
 20a:	e4 cf       	rjmp	.-56     	; 0x1d4 <main+0x154>
        sleep(36);
 20c:	84 e2       	ldi	r24, 0x24	; 36
 20e:	3d d1       	rcall	.+634    	; 0x48a <sleep>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	e8 1a       	sub	r14, r24
 214:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 216:	e1 14       	cp	r14, r1
 218:	f1 04       	cpc	r15, r1
 21a:	c1 f7       	brne	.-16     	; 0x20c <main+0x18c>
 21c:	41 cf       	rjmp	.-382    	; 0xa0 <main+0x20>

0000021e <Init>:
 21e:	13 d1       	rcall	.+550    	; 0x446 <Timer2Init>
 220:	43 d0       	rcall	.+134    	; 0x2a8 <MotorInit>
 222:	18 d0       	rcall	.+48     	; 0x254 <LEDInit>
 224:	47 d1       	rcall	.+654    	; 0x4b4 <ADCInit>
 226:	c1 d0       	rcall	.+386    	; 0x3aa <SwitchInit>
 228:	78 94       	sei
 22a:	08 95       	ret

0000022c <StatusLED>:
 22c:	c0 98       	cbi	0x18, 0	; 24
 22e:	92 98       	cbi	0x12, 2	; 18
 230:	80 fd       	sbrc	r24, 0
 232:	c0 9a       	sbi	0x18, 0	; 24
 234:	81 fd       	sbrc	r24, 1
 236:	92 9a       	sbi	0x12, 2	; 18
 238:	08 95       	ret

0000023a <BackLEDFast>:
 23a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 23c:	f8 94       	cli
 23e:	88 23       	and	r24, r24
 240:	19 f0       	breq	.+6      	; 0x248 <BackLEDFast+0xe>
 242:	97 98       	cbi	0x12, 7	; 18
 244:	a1 9a       	sbi	0x14, 1	; 20
 246:	a0 9a       	sbi	0x14, 0	; 20
 248:	95 b3       	in	r25, 0x15	; 21
 24a:	9c 7f       	andi	r25, 0xFC	; 252
 24c:	98 2b       	or	r25, r24
 24e:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 250:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 252:	08 95       	ret

00000254 <LEDInit>:
 254:	b8 9a       	sbi	0x17, 0	; 23
 256:	81 b3       	in	r24, 0x11	; 17
 258:	84 6c       	ori	r24, 0xC4	; 196
 25a:	81 bb       	out	0x11, r24	; 17
 25c:	96 98       	cbi	0x12, 6	; 18
 25e:	97 98       	cbi	0x12, 7	; 18
 260:	a1 9a       	sbi	0x14, 1	; 20
 262:	a0 9a       	sbi	0x14, 0	; 20
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	e9 df       	rcall	.-46     	; 0x23a <BackLEDFast>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	e0 cf       	rjmp	.-64     	; 0x22c <StatusLED>

0000026c <BackLED>:
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <BackLED+0x8>
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	01 c0       	rjmp	.+2      	; 0x276 <BackLED+0xa>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	61 11       	cpse	r22, r1
 27a:	01 c0       	rjmp	.+2      	; 0x27e <BackLED+0x12>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	89 2b       	or	r24, r25
 280:	dc cf       	rjmp	.-72     	; 0x23a <BackLEDFast>

00000282 <MotorDir>:
 282:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 284:	f8 94       	cli
 286:	92 b3       	in	r25, 0x12	; 18
 288:	9f 7c       	andi	r25, 0xCF	; 207
 28a:	89 2b       	or	r24, r25
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	88 b3       	in	r24, 0x18	; 24
 290:	8f 7c       	andi	r24, 0xCF	; 207
 292:	68 2b       	or	r22, r24
 294:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 296:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 298:	08 95       	ret

0000029a <MotorSpeed>:
 29a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 29c:	f8 94       	cli
 29e:	1b bc       	out	0x2b, r1	; 43
 2a0:	8a bd       	out	0x2a, r24	; 42
 2a2:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2a4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 2a6:	08 95       	ret

000002a8 <MotorInit>:
 2a8:	87 b3       	in	r24, 0x17	; 23
 2aa:	86 63       	ori	r24, 0x36	; 54
 2ac:	87 bb       	out	0x17, r24	; 23
 2ae:	81 b3       	in	r24, 0x11	; 17
 2b0:	80 63       	ori	r24, 0x30	; 48
 2b2:	81 bb       	out	0x11, r24	; 17
 2b4:	81 ea       	ldi	r24, 0xA1	; 161
 2b6:	8f bd       	out	0x2f, r24	; 47
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	8e bd       	out	0x2e, r24	; 46
 2bc:	89 b7       	in	r24, 0x39	; 57
 2be:	83 7c       	andi	r24, 0xC3	; 195
 2c0:	89 bf       	out	0x39, r24	; 57
 2c2:	60 e2       	ldi	r22, 0x20	; 32
 2c4:	80 e2       	ldi	r24, 0x20	; 32
 2c6:	dd df       	rcall	.-70     	; 0x282 <MotorDir>
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	e6 cf       	rjmp	.-52     	; 0x29a <MotorSpeed>

000002ce <LineData>:
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
 2d6:	f4 d0       	rcall	.+488    	; 0x4c0 <__ADCBlockEnter>
 2d8:	18 2f       	mov	r17, r24
 2da:	83 e4       	ldi	r24, 0x43	; 67
 2dc:	19 d1       	rcall	.+562    	; 0x510 <ADCSelectChannel>
 2de:	21 d1       	rcall	.+578    	; 0x522 <ADCMeasure>
 2e0:	24 b1       	in	r18, 0x04	; 4
 2e2:	35 b1       	in	r19, 0x05	; 5
 2e4:	39 83       	std	Y+1, r19	; 0x01
 2e6:	28 83       	st	Y, r18
 2e8:	82 e4       	ldi	r24, 0x42	; 66
 2ea:	12 d1       	rcall	.+548    	; 0x510 <ADCSelectChannel>
 2ec:	1a d1       	rcall	.+564    	; 0x522 <ADCMeasure>
 2ee:	24 b1       	in	r18, 0x04	; 4
 2f0:	35 b1       	in	r19, 0x05	; 5
 2f2:	3b 83       	std	Y+3, r19	; 0x03
 2f4:	2a 83       	std	Y+2, r18	; 0x02
 2f6:	81 2f       	mov	r24, r17
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	f2 c0       	rjmp	.+484    	; 0x4e4 <__ADCBlockLeave>

00000300 <__vector_14>:
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
 322:	87 b1       	in	r24, 0x07	; 7
 324:	78 94       	sei
 326:	81 36       	cpi	r24, 0x61	; 97
 328:	19 f0       	breq	.+6      	; 0x330 <__vector_14+0x30>
 32a:	83 36       	cpi	r24, 0x63	; 99
 32c:	a1 f0       	breq	.+40     	; 0x356 <__vector_14+0x56>
 32e:	27 c0       	rjmp	.+78     	; 0x37e <__vector_14+0x7e>
 330:	80 91 67 00 	lds	r24, 0x0067
 334:	82 fd       	sbrc	r24, 2
 336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_14+0x3c>
 338:	80 e6       	ldi	r24, 0x60	; 96
 33a:	01 c0       	rjmp	.+2      	; 0x33e <__vector_14+0x3e>
 33c:	82 e6       	ldi	r24, 0x62	; 98
 33e:	f8 94       	cli
 340:	95 b1       	in	r25, 0x05	; 5
 342:	90 93 69 00 	sts	0x0069, r25
 346:	90 91 64 00 	lds	r25, 0x0064
 34a:	90 93 68 00 	sts	0x0068, r25
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	90 93 6c 00 	sts	0x006C, r25
 354:	12 c0       	rjmp	.+36     	; 0x37a <__vector_14+0x7a>
 356:	80 91 67 00 	lds	r24, 0x0067
 35a:	80 ff       	sbrs	r24, 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <__vector_14+0x62>
 35e:	80 e6       	ldi	r24, 0x60	; 96
 360:	01 c0       	rjmp	.+2      	; 0x364 <__vector_14+0x64>
 362:	82 e6       	ldi	r24, 0x62	; 98
 364:	f8 94       	cli
 366:	95 b1       	in	r25, 0x05	; 5
 368:	90 93 6b 00 	sts	0x006B, r25
 36c:	90 91 64 00 	lds	r25, 0x0064
 370:	90 93 6a 00 	sts	0x006A, r25
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	90 93 66 00 	sts	0x0066, r25
 37a:	78 94       	sei
 37c:	04 c0       	rjmp	.+8      	; 0x386 <__vector_14+0x86>
 37e:	95 b1       	in	r25, 0x05	; 5
 380:	90 93 64 00 	sts	0x0064, r25
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	d1 d0       	rcall	.+418    	; 0x52a <ADCInterruptEnable>
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <SwitchInit>:
 3aa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3ac:	f8 94       	cli
 3ae:	8b b7       	in	r24, 0x3b	; 59
 3b0:	8f 77       	andi	r24, 0x7F	; 127
 3b2:	8b bf       	out	0x3b, r24	; 59
 3b4:	85 b7       	in	r24, 0x35	; 53
 3b6:	87 7f       	andi	r24, 0xF7	; 247
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3bc:	9f bf       	out	0x3f, r25	; 63
 3be:	a4 98       	cbi	0x14, 4	; 20
 3c0:	85 b3       	in	r24, 0x15	; 21
 3c2:	80 71       	andi	r24, 0x10	; 16
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	8b 98       	cbi	0x11, 3	; 17
 3c8:	93 98       	cbi	0x12, 3	; 18
 3ca:	10 92 6d 00 	sts	0x006D, r1
 3ce:	08 95       	ret

000003d0 <PollSwitch>:
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	93 9a       	sbi	0x12, 3	; 18
 3da:	8b 9a       	sbi	0x11, 3	; 17
 3dc:	71 d0       	rcall	.+226    	; 0x4c0 <__ADCBlockEnter>
 3de:	08 2f       	mov	r16, r24
 3e0:	84 e4       	ldi	r24, 0x44	; 68
 3e2:	96 d0       	rcall	.+300    	; 0x510 <ADCSelectChannel>
 3e4:	14 e0       	ldi	r17, 0x04	; 4
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	9b d0       	rcall	.+310    	; 0x522 <ADCMeasure>
 3ec:	24 b1       	in	r18, 0x04	; 4
 3ee:	35 b1       	in	r19, 0x05	; 5
 3f0:	c2 0f       	add	r28, r18
 3f2:	d3 1f       	adc	r29, r19
 3f4:	11 50       	subi	r17, 0x01	; 1
 3f6:	c9 f7       	brne	.-14     	; 0x3ea <PollSwitch+0x1a>
 3f8:	80 2f       	mov	r24, r16
 3fa:	74 d0       	rcall	.+232    	; 0x4e4 <__ADCBlockLeave>
 3fc:	8b 98       	cbi	0x11, 3	; 17
 3fe:	93 98       	cbi	0x12, 3	; 18
 400:	be 01       	movw	r22, r28
 402:	76 95       	lsr	r23
 404:	67 95       	ror	r22
 406:	76 95       	lsr	r23
 408:	67 95       	ror	r22
 40a:	cb 01       	movw	r24, r22
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	98 50       	subi	r25, 0x08	; 8
 412:	a0 d0       	rcall	.+320    	; 0x554 <__udivmodhi4>
 414:	82 ec       	ldi	r24, 0xC2	; 194
 416:	86 0f       	add	r24, r22
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	08 95       	ret

00000422 <__vector_2>:
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	8f 93       	push	r24
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 6d 00 	sts	0x006D, r24
 434:	8b b7       	in	r24, 0x3b	; 59
 436:	8f 77       	andi	r24, 0x7F	; 127
 438:	8b bf       	out	0x3b, r24	; 59
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <Timer2Init>:
 446:	12 bc       	out	0x22, r1	; 34
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	85 bd       	out	0x25, r24	; 37
 44c:	89 b7       	in	r24, 0x39	; 57
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	89 bf       	out	0x39, r24	; 57
 452:	81 e9       	ldi	r24, 0x91	; 145
 454:	83 bd       	out	0x23, r24	; 35
 456:	85 b5       	in	r24, 0x25	; 37
 458:	87 78       	andi	r24, 0x87	; 135
 45a:	85 bd       	out	0x25, r24	; 37
 45c:	bb 9a       	sbi	0x17, 3	; 23
 45e:	c3 98       	cbi	0x18, 3	; 24
 460:	08 95       	ret

00000462 <__vector_4>:
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	8f 93       	push	r24
 46e:	84 b5       	in	r24, 0x24	; 36
 470:	8b 5d       	subi	r24, 0xDB	; 219
 472:	84 bd       	out	0x24, r24	; 36
 474:	80 91 6e 00 	lds	r24, 0x006E
 478:	8f 5f       	subi	r24, 0xFF	; 255
 47a:	80 93 6e 00 	sts	0x006E, r24
 47e:	8f 91       	pop	r24
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <sleep>:
 48a:	f8 94       	cli
 48c:	95 b7       	in	r25, 0x35	; 53
 48e:	9f 70       	andi	r25, 0x0F	; 15
 490:	90 68       	ori	r25, 0x80	; 128
 492:	95 bf       	out	0x35, r25	; 53
 494:	78 94       	sei
 496:	90 91 6e 00 	lds	r25, 0x006E
 49a:	89 0f       	add	r24, r25
 49c:	90 91 6e 00 	lds	r25, 0x006E
 4a0:	98 17       	cp	r25, r24
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <sleep+0x1e>
 4a4:	88 95       	sleep
 4a6:	fa cf       	rjmp	.-12     	; 0x49c <sleep+0x12>
 4a8:	f8 94       	cli
 4aa:	85 b7       	in	r24, 0x35	; 53
 4ac:	8f 77       	andi	r24, 0x7F	; 127
 4ae:	85 bf       	out	0x35, r24	; 53
 4b0:	78 94       	sei
 4b2:	08 95       	ret

000004b4 <ADCInit>:
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	80 93 65 00 	sts	0x0065, r24
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	86 b9       	out	0x06, r24	; 6
 4be:	08 95       	ret

000004c0 <__ADCBlockEnter>:
 4c0:	2f b7       	in	r18, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	87 b1       	in	r24, 0x07	; 7
 4c6:	96 b1       	in	r25, 0x06	; 6
 4c8:	39 2f       	mov	r19, r25
 4ca:	38 78       	andi	r19, 0x88	; 136
 4cc:	31 f0       	breq	.+12     	; 0x4da <__ADCBlockEnter+0x1a>
 4ce:	93 ff       	sbrs	r25, 3
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__ADCBlockEnter+0x1c>
 4d2:	80 93 65 00 	sts	0x0065, r24
 4d6:	86 e8       	ldi	r24, 0x86	; 134
 4d8:	86 b9       	out	0x06, r24	; 6
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	2f bf       	out	0x3f, r18	; 63
 4de:	36 99       	sbic	0x06, 6	; 6
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <__ADCBlockEnter+0x1e>
 4e2:	08 95       	ret

000004e4 <__ADCBlockLeave>:
 4e4:	3f b7       	in	r19, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	8f 3f       	cpi	r24, 0xFF	; 255
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <__ADCBlockLeave+0x14>
 4ec:	80 91 65 00 	lds	r24, 0x0065
 4f0:	8f 3f       	cpi	r24, 0xFF	; 255
 4f2:	51 f0       	breq	.+20     	; 0x508 <__ADCBlockLeave+0x24>
 4f4:	2e ed       	ldi	r18, 0xDE	; 222
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__ADCBlockLeave+0x16>
 4f8:	26 ed       	ldi	r18, 0xD6	; 214
 4fa:	97 b1       	in	r25, 0x07	; 7
 4fc:	98 27       	eor	r25, r24
 4fe:	90 7c       	andi	r25, 0xC0	; 192
 500:	09 f0       	breq	.+2      	; 0x504 <__ADCBlockLeave+0x20>
 502:	16 b8       	out	0x06, r1	; 6
 504:	87 b9       	out	0x07, r24	; 7
 506:	01 c0       	rjmp	.+2      	; 0x50a <__ADCBlockLeave+0x26>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	26 b9       	out	0x06, r18	; 6
 50c:	3f bf       	out	0x3f, r19	; 63
 50e:	08 95       	ret

00000510 <ADCSelectChannel>:
 510:	97 b1       	in	r25, 0x07	; 7
 512:	98 27       	eor	r25, r24
 514:	90 7c       	andi	r25, 0xC0	; 192
 516:	09 f0       	breq	.+2      	; 0x51a <ADCSelectChannel+0xa>
 518:	16 b8       	out	0x06, r1	; 6
 51a:	96 e8       	ldi	r25, 0x86	; 134
 51c:	96 b9       	out	0x06, r25	; 6
 51e:	87 b9       	out	0x07, r24	; 7
 520:	08 95       	ret

00000522 <ADCMeasure>:
 522:	36 9a       	sbi	0x06, 6	; 6
 524:	36 99       	sbic	0x06, 6	; 6
 526:	fe cf       	rjmp	.-4      	; 0x524 <ADCMeasure+0x2>
 528:	08 95       	ret

0000052a <ADCInterruptEnable>:
 52a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 52c:	f8 94       	cli
 52e:	96 b1       	in	r25, 0x06	; 6
 530:	97 ff       	sbrs	r25, 7
 532:	02 c0       	rjmp	.+4      	; 0x538 <ADCInterruptEnable+0xe>
 534:	93 ff       	sbrs	r25, 3
 536:	0a c0       	rjmp	.+20     	; 0x54c <ADCInterruptEnable+0x22>
 538:	97 b1       	in	r25, 0x07	; 7
 53a:	98 27       	eor	r25, r24
 53c:	90 7c       	andi	r25, 0xC0	; 192
 53e:	09 f0       	breq	.+2      	; 0x542 <ADCInterruptEnable+0x18>
 540:	16 b8       	out	0x06, r1	; 6
 542:	36 99       	sbic	0x06, 6	; 6
 544:	16 b8       	out	0x06, r1	; 6
 546:	87 b9       	out	0x07, r24	; 7
 548:	9e ed       	ldi	r25, 0xDE	; 222
 54a:	96 b9       	out	0x06, r25	; 6
 54c:	80 93 65 00 	sts	0x0065, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 550:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 552:	08 95       	ret

00000554 <__udivmodhi4>:
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	51 e1       	ldi	r21, 0x11	; 17
 55a:	07 c0       	rjmp	.+14     	; 0x56a <__udivmodhi4_ep>

0000055c <__udivmodhi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	a6 17       	cp	r26, r22
 562:	b7 07       	cpc	r27, r23
 564:	10 f0       	brcs	.+4      	; 0x56a <__udivmodhi4_ep>
 566:	a6 1b       	sub	r26, r22
 568:	b7 0b       	sbc	r27, r23

0000056a <__udivmodhi4_ep>:
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	5a 95       	dec	r21
 570:	a9 f7       	brne	.-22     	; 0x55c <__udivmodhi4_loop>
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	bc 01       	movw	r22, r24
 578:	cd 01       	movw	r24, r26
 57a:	08 95       	ret

0000057c <__divmodhi4>:
 57c:	97 fb       	bst	r25, 7
 57e:	07 2e       	mov	r0, r23
 580:	16 f4       	brtc	.+4      	; 0x586 <__divmodhi4+0xa>
 582:	00 94       	com	r0
 584:	06 d0       	rcall	.+12     	; 0x592 <__divmodhi4_neg1>
 586:	77 fd       	sbrc	r23, 7
 588:	08 d0       	rcall	.+16     	; 0x59a <__divmodhi4_neg2>
 58a:	e4 df       	rcall	.-56     	; 0x554 <__udivmodhi4>
 58c:	07 fc       	sbrc	r0, 7
 58e:	05 d0       	rcall	.+10     	; 0x59a <__divmodhi4_neg2>
 590:	3e f4       	brtc	.+14     	; 0x5a0 <__divmodhi4_exit>

00000592 <__divmodhi4_neg1>:
 592:	90 95       	com	r25
 594:	81 95       	neg	r24
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__divmodhi4_neg2>:
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255

000005a0 <__divmodhi4_exit>:
 5a0:	08 95       	ret

000005a2 <do_rand>:
 5a2:	8f 92       	push	r8
 5a4:	9f 92       	push	r9
 5a6:	af 92       	push	r10
 5a8:	bf 92       	push	r11
 5aa:	cf 92       	push	r12
 5ac:	df 92       	push	r13
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
 5b8:	68 81       	ld	r22, Y
 5ba:	79 81       	ldd	r23, Y+1	; 0x01
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	9b 81       	ldd	r25, Y+3	; 0x03
 5c0:	61 15       	cp	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	81 05       	cpc	r24, r1
 5c6:	91 05       	cpc	r25, r1
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <do_rand+0x30>
 5ca:	64 e2       	ldi	r22, 0x24	; 36
 5cc:	79 ed       	ldi	r23, 0xD9	; 217
 5ce:	8b e5       	ldi	r24, 0x5B	; 91
 5d0:	97 e0       	ldi	r25, 0x07	; 7
 5d2:	2d e1       	ldi	r18, 0x1D	; 29
 5d4:	33 ef       	ldi	r19, 0xF3	; 243
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	3a d0       	rcall	.+116    	; 0x650 <__divmodsi4>
 5dc:	49 01       	movw	r8, r18
 5de:	5a 01       	movw	r10, r20
 5e0:	9b 01       	movw	r18, r22
 5e2:	ac 01       	movw	r20, r24
 5e4:	a7 ea       	ldi	r26, 0xA7	; 167
 5e6:	b1 e4       	ldi	r27, 0x41	; 65
 5e8:	4f d0       	rcall	.+158    	; 0x688 <__muluhisi3>
 5ea:	6b 01       	movw	r12, r22
 5ec:	7c 01       	movw	r14, r24
 5ee:	ac ee       	ldi	r26, 0xEC	; 236
 5f0:	b4 ef       	ldi	r27, 0xF4	; 244
 5f2:	a5 01       	movw	r20, r10
 5f4:	94 01       	movw	r18, r8
 5f6:	54 d0       	rcall	.+168    	; 0x6a0 <__mulohisi3>
 5f8:	c6 0e       	add	r12, r22
 5fa:	d7 1e       	adc	r13, r23
 5fc:	e8 1e       	adc	r14, r24
 5fe:	f9 1e       	adc	r15, r25
 600:	f7 fe       	sbrs	r15, 7
 602:	06 c0       	rjmp	.+12     	; 0x610 <do_rand+0x6e>
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	c8 1a       	sub	r12, r24
 608:	d1 08       	sbc	r13, r1
 60a:	e1 08       	sbc	r14, r1
 60c:	80 e8       	ldi	r24, 0x80	; 128
 60e:	f8 0a       	sbc	r15, r24
 610:	c8 82       	st	Y, r12
 612:	d9 82       	std	Y+1, r13	; 0x01
 614:	ea 82       	std	Y+2, r14	; 0x02
 616:	fb 82       	std	Y+3, r15	; 0x03
 618:	c6 01       	movw	r24, r12
 61a:	9f 77       	andi	r25, 0x7F	; 127
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	ff 90       	pop	r15
 622:	ef 90       	pop	r14
 624:	df 90       	pop	r13
 626:	cf 90       	pop	r12
 628:	bf 90       	pop	r11
 62a:	af 90       	pop	r10
 62c:	9f 90       	pop	r9
 62e:	8f 90       	pop	r8
 630:	08 95       	ret

00000632 <rand_r>:
 632:	b7 cf       	rjmp	.-146    	; 0x5a2 <do_rand>

00000634 <rand>:
 634:	80 e6       	ldi	r24, 0x60	; 96
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	b4 cf       	rjmp	.-152    	; 0x5a2 <do_rand>

0000063a <srand>:
 63a:	a0 e0       	ldi	r26, 0x00	; 0
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	80 93 60 00 	sts	0x0060, r24
 642:	90 93 61 00 	sts	0x0061, r25
 646:	a0 93 62 00 	sts	0x0062, r26
 64a:	b0 93 63 00 	sts	0x0063, r27
 64e:	08 95       	ret

00000650 <__divmodsi4>:
 650:	05 2e       	mov	r0, r21
 652:	97 fb       	bst	r25, 7
 654:	16 f4       	brtc	.+4      	; 0x65a <__divmodsi4+0xa>
 656:	00 94       	com	r0
 658:	0f d0       	rcall	.+30     	; 0x678 <__negsi2>
 65a:	57 fd       	sbrc	r21, 7
 65c:	05 d0       	rcall	.+10     	; 0x668 <__divmodsi4_neg2>
 65e:	24 d0       	rcall	.+72     	; 0x6a8 <__udivmodsi4>
 660:	07 fc       	sbrc	r0, 7
 662:	02 d0       	rcall	.+4      	; 0x668 <__divmodsi4_neg2>
 664:	46 f4       	brtc	.+16     	; 0x676 <__divmodsi4_exit>
 666:	08 c0       	rjmp	.+16     	; 0x678 <__negsi2>

00000668 <__divmodsi4_neg2>:
 668:	50 95       	com	r21
 66a:	40 95       	com	r20
 66c:	30 95       	com	r19
 66e:	21 95       	neg	r18
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	4f 4f       	sbci	r20, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255

00000676 <__divmodsi4_exit>:
 676:	08 95       	ret

00000678 <__negsi2>:
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__muluhisi3>:
 688:	31 d0       	rcall	.+98     	; 0x6ec <__umulhisi3>
 68a:	a5 9f       	mul	r26, r21
 68c:	90 0d       	add	r25, r0
 68e:	b4 9f       	mul	r27, r20
 690:	90 0d       	add	r25, r0
 692:	a4 9f       	mul	r26, r20
 694:	80 0d       	add	r24, r0
 696:	91 1d       	adc	r25, r1
 698:	11 24       	eor	r1, r1
 69a:	08 95       	ret

0000069c <__mulshisi3>:
 69c:	b7 ff       	sbrs	r27, 7
 69e:	f4 cf       	rjmp	.-24     	; 0x688 <__muluhisi3>

000006a0 <__mulohisi3>:
 6a0:	f3 df       	rcall	.-26     	; 0x688 <__muluhisi3>
 6a2:	82 1b       	sub	r24, r18
 6a4:	93 0b       	sbc	r25, r19
 6a6:	08 95       	ret

000006a8 <__udivmodsi4>:
 6a8:	a1 e2       	ldi	r26, 0x21	; 33
 6aa:	1a 2e       	mov	r1, r26
 6ac:	aa 1b       	sub	r26, r26
 6ae:	bb 1b       	sub	r27, r27
 6b0:	fd 01       	movw	r30, r26
 6b2:	0d c0       	rjmp	.+26     	; 0x6ce <__udivmodsi4_ep>

000006b4 <__udivmodsi4_loop>:
 6b4:	aa 1f       	adc	r26, r26
 6b6:	bb 1f       	adc	r27, r27
 6b8:	ee 1f       	adc	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	a2 17       	cp	r26, r18
 6be:	b3 07       	cpc	r27, r19
 6c0:	e4 07       	cpc	r30, r20
 6c2:	f5 07       	cpc	r31, r21
 6c4:	20 f0       	brcs	.+8      	; 0x6ce <__udivmodsi4_ep>
 6c6:	a2 1b       	sub	r26, r18
 6c8:	b3 0b       	sbc	r27, r19
 6ca:	e4 0b       	sbc	r30, r20
 6cc:	f5 0b       	sbc	r31, r21

000006ce <__udivmodsi4_ep>:
 6ce:	66 1f       	adc	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	1a 94       	dec	r1
 6d8:	69 f7       	brne	.-38     	; 0x6b4 <__udivmodsi4_loop>
 6da:	60 95       	com	r22
 6dc:	70 95       	com	r23
 6de:	80 95       	com	r24
 6e0:	90 95       	com	r25
 6e2:	9b 01       	movw	r18, r22
 6e4:	ac 01       	movw	r20, r24
 6e6:	bd 01       	movw	r22, r26
 6e8:	cf 01       	movw	r24, r30
 6ea:	08 95       	ret

000006ec <__umulhisi3>:
 6ec:	a2 9f       	mul	r26, r18
 6ee:	b0 01       	movw	r22, r0
 6f0:	b3 9f       	mul	r27, r19
 6f2:	c0 01       	movw	r24, r0
 6f4:	a3 9f       	mul	r26, r19
 6f6:	01 d0       	rcall	.+2      	; 0x6fa <__umulhisi3+0xe>
 6f8:	b2 9f       	mul	r27, r18
 6fa:	70 0d       	add	r23, r0
 6fc:	81 1d       	adc	r24, r1
 6fe:	11 24       	eor	r1, r1
 700:	91 1d       	adc	r25, r1
 702:	08 95       	ret

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>
