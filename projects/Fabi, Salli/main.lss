
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000692  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  0000072a  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000159e  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000826  00000000  00000000  00002949  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00003170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009de  00000000  00000000  00003aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  000044dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	d3 c1       	rjmp	.+934    	; 0x3ac <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	f1 c1       	rjmp	.+994    	; 0x3ec <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	36 c1       	rjmp	.+620    	; 0x28a <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	af 36       	cpi	r26, 0x6F	; 111
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e2 e9       	ldi	r30, 0x92	; 146
  4a:	f6 e0       	ldi	r31, 0x06	; 6
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>
  58:	13 d0       	rcall	.+38     	; 0x80 <main>
  5a:	19 c3       	rjmp	.+1586   	; 0x68e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	dd d0       	rcall	.+442    	; 0x224 <MotorSpeed>
	if (pause > 0)
  6a:	1c 16       	cp	r1, r28
  6c:	1d 06       	cpc	r1, r29
  6e:	2c f4       	brge	.+10     	; 0x7a <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  70:	84 e2       	ldi	r24, 0x24	; 36
  72:	d0 d1       	rcall	.+928    	; 0x414 <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  74:	21 97       	sbiw	r28, 0x01	; 1
  76:	20 97       	sbiw	r28, 0x00	; 0
  78:	d9 f7       	brne	.-10     	; 0x70 <stopAsuro+0x12>
		msleep(pause);
}
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

00000080 <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    Init();
  8c:	8d d0       	rcall	.+282    	; 0x1a8 <Init>
	//int x = 160;
	//int y = 200;
	int i = 0;
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
  92:	38 eb       	ldi	r19, 0xB8	; 184
  94:	c3 2e       	mov	r12, r19
  96:	3b e0       	ldi	r19, 0x0B	; 11
  98:	d3 2e       	mov	r13, r19
			int ran;
			ran = rand() % 2;
  9a:	42 e0       	ldi	r20, 0x02	; 2
  9c:	a4 2e       	mov	r10, r20
  9e:	b1 2c       	mov	r11, r1
	//int x = 160;
	//int y = 200;
	int i = 0;
	
	while (1) {  	//Hauptschleife
		i++;
  a0:	0f 5f       	subi	r16, 0xFF	; 255
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
		char sensor = PollSwitch();
  a4:	5a d1       	rcall	.+692    	; 0x35a <PollSwitch>
  a6:	f8 2e       	mov	r15, r24
		sensor &= 0b00111111;
		
		MotorDir(FWD, FWD); //Werkeinstellung
  a8:	60 e2       	ldi	r22, 0x20	; 32
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	af d0       	rcall	.+350    	; 0x20c <MotorDir>
		MotorSpeed(170, 130); 
  ae:	62 e8       	ldi	r22, 0x82	; 130
  b0:	8a ea       	ldi	r24, 0xAA	; 170
  b2:	b8 d0       	rcall	.+368    	; 0x224 <MotorSpeed>
	int i = 0;
	
	while (1) {  	//Hauptschleife
		i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  b4:	8f 2d       	mov	r24, r15
  b6:	8f 73       	andi	r24, 0x3F	; 63
		
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(170, 130); 
		
		
		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
  b8:	69 f4       	brne	.+26     	; 0xd4 <main+0x54>
			 MotorSpeed(60, 150);
			 StatusLED(RED);
			 msleep(800);
		}
		
		uint16_t data[] = {0,0};
  ba:	1a 82       	std	Y+2, r1	; 0x02
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	1c 82       	std	Y+4, r1	; 0x04
  c0:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	c8 d0       	rcall	.+400    	; 0x258 <LineData>
		
		if (((data[LEFT] > 50) || (data[RIGHT] > 50)) && ((data[LEFT] < 150) || (data[RIGHT] < 150))) { 		//Geschwindigkeit geringer bei Licht über 50E
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	83 33       	cpi	r24, 0x33	; 51
  ce:	91 05       	cpc	r25, r1
  d0:	d8 f4       	brcc	.+54     	; 0x108 <main+0x88>
  d2:	15 c0       	rjmp	.+42     	; 0xfe <main+0x7e>
		MotorSpeed(170, 130); 
		
		
		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  d4:	60 e1       	ldi	r22, 0x10	; 16
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	99 d0       	rcall	.+306    	; 0x20c <MotorDir>
			 MotorSpeed(60, 150);
  da:	66 e9       	ldi	r22, 0x96	; 150
  dc:	8c e3       	ldi	r24, 0x3C	; 60
  de:	a2 d0       	rcall	.+324    	; 0x224 <MotorSpeed>
			 StatusLED(RED);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	69 d0       	rcall	.+210    	; 0x1b6 <StatusLED>
  e4:	20 e2       	ldi	r18, 0x20	; 32
  e6:	e2 2e       	mov	r14, r18
  e8:	23 e0       	ldi	r18, 0x03	; 3
  ea:	f2 2e       	mov	r15, r18
        sleep(36);
  ec:	84 e2       	ldi	r24, 0x24	; 36
  ee:	92 d1       	rcall	.+804    	; 0x414 <sleep>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	e8 1a       	sub	r14, r24
  f4:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  f6:	e1 14       	cp	r14, r1
  f8:	f1 04       	cpc	r15, r1
  fa:	c1 f7       	brne	.-16     	; 0xec <main+0x6c>
  fc:	de cf       	rjmp	.-68     	; 0xba <main+0x3a>
		}
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		if (((data[LEFT] > 50) || (data[RIGHT] > 50)) && ((data[LEFT] < 150) || (data[RIGHT] < 150))) { 		//Geschwindigkeit geringer bei Licht über 50E
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	c3 97       	sbiw	r24, 0x33	; 51
 104:	48 f4       	brcc	.+18     	; 0x118 <main+0x98>
 106:	26 c0       	rjmp	.+76     	; 0x154 <main+0xd4>
 108:	86 39       	cpi	r24, 0x96	; 150
 10a:	91 05       	cpc	r25, r1
 10c:	28 f0       	brcs	.+10     	; 0x118 <main+0x98>
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	86 39       	cpi	r24, 0x96	; 150
 114:	91 05       	cpc	r25, r1
 116:	f0 f4       	brcc	.+60     	; 0x154 <main+0xd4>
				MotorSpeed(60, 80);
 118:	60 e5       	ldi	r22, 0x50	; 80
 11a:	8c e3       	ldi	r24, 0x3C	; 60
 11c:	83 d0       	rcall	.+262    	; 0x224 <MotorSpeed>
				LineData(data);
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	9a d0       	rcall	.+308    	; 0x258 <LineData>
 124:	90 ed       	ldi	r25, 0xD0	; 208
 126:	e9 2e       	mov	r14, r25
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	f9 2e       	mov	r15, r25
        sleep(36);
 12c:	84 e2       	ldi	r24, 0x24	; 36
 12e:	72 d1       	rcall	.+740    	; 0x414 <sleep>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	e8 1a       	sub	r14, r24
 134:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 136:	e1 14       	cp	r14, r1
 138:	f1 04       	cpc	r15, r1
 13a:	c1 f7       	brne	.-16     	; 0x12c <main+0xac>
 13c:	0b c0       	rjmp	.+22     	; 0x154 <main+0xd4>
				msleep(2000);
		}
		while ((data[LEFT] > 150) || (data[RIGHT] > 150)) 	//Geschwindigkeit 0 bei Licht über 100E
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	9c 81       	ldd	r25, Y+4	; 0x04
 142:	87 39       	cpi	r24, 0x97	; 151
 144:	91 05       	cpc	r25, r1
 146:	60 f0       	brcs	.+24     	; 0x160 <main+0xe0>
		{	
			stopAsuro(500);
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	88 df       	rcall	.-240    	; 0x5e <stopAsuro>
			LineData(data);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	82 d0       	rcall	.+260    	; 0x258 <LineData>
		if (((data[LEFT] > 50) || (data[RIGHT] > 50)) && ((data[LEFT] < 150) || (data[RIGHT] < 150))) { 		//Geschwindigkeit geringer bei Licht über 50E
				MotorSpeed(60, 80);
				LineData(data);
				msleep(2000);
		}
		while ((data[LEFT] > 150) || (data[RIGHT] > 150)) 	//Geschwindigkeit 0 bei Licht über 100E
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	87 39       	cpi	r24, 0x97	; 151
 15a:	91 05       	cpc	r25, r1
 15c:	80 f3       	brcs	.-32     	; 0x13e <main+0xbe>
 15e:	f4 cf       	rjmp	.-24     	; 0x148 <main+0xc8>
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
 160:	c8 01       	movw	r24, r16
 162:	b6 01       	movw	r22, r12
 164:	d0 d1       	rcall	.+928    	; 0x506 <__divmodhi4>
 166:	89 2b       	or	r24, r25
 168:	51 f4       	brne	.+20     	; 0x17e <main+0xfe>
			int ran;
			ran = rand() % 2;
 16a:	29 d2       	rcall	.+1106   	; 0x5be <rand>
 16c:	b5 01       	movw	r22, r10
 16e:	cb d1       	rcall	.+918    	; 0x506 <__divmodhi4>
			if (ran) {
 170:	89 2b       	or	r24, r25
 172:	29 f0       	breq	.+10     	; 0x17e <main+0xfe>
				StatusLED(YELLOW);
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	1f d0       	rcall	.+62     	; 0x1b6 <StatusLED>
				stopAsuro(3000);
 178:	88 eb       	ldi	r24, 0xB8	; 184
 17a:	9b e0       	ldi	r25, 0x0B	; 11
 17c:	70 df       	rcall	.-288    	; 0x5e <stopAsuro>
			}
		}
		MotorSpeed(160, 220);
 17e:	6c ed       	ldi	r22, 0xDC	; 220
 180:	80 ea       	ldi	r24, 0xA0	; 160
 182:	50 d0       	rcall	.+160    	; 0x224 <MotorSpeed>
		StatusLED(GREEN);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	17 d0       	rcall	.+46     	; 0x1b6 <StatusLED>
		BackLED(OFF, OFF);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	34 d0       	rcall	.+104    	; 0x1f6 <BackLED>
 18e:	88 ee       	ldi	r24, 0xE8	; 232
 190:	e8 2e       	mov	r14, r24
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	f8 2e       	mov	r15, r24
        sleep(36);
 196:	84 e2       	ldi	r24, 0x24	; 36
 198:	3d d1       	rcall	.+634    	; 0x414 <sleep>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	e8 1a       	sub	r14, r24
 19e:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1a0:	e1 14       	cp	r14, r1
 1a2:	f1 04       	cpc	r15, r1
 1a4:	c1 f7       	brne	.-16     	; 0x196 <main+0x116>
 1a6:	7c cf       	rjmp	.-264    	; 0xa0 <main+0x20>

000001a8 <Init>:
 1a8:	13 d1       	rcall	.+550    	; 0x3d0 <Timer2Init>
 1aa:	43 d0       	rcall	.+134    	; 0x232 <MotorInit>
 1ac:	18 d0       	rcall	.+48     	; 0x1de <LEDInit>
 1ae:	47 d1       	rcall	.+654    	; 0x43e <ADCInit>
 1b0:	c1 d0       	rcall	.+386    	; 0x334 <SwitchInit>
 1b2:	78 94       	sei
 1b4:	08 95       	ret

000001b6 <StatusLED>:
 1b6:	c0 98       	cbi	0x18, 0	; 24
 1b8:	92 98       	cbi	0x12, 2	; 18
 1ba:	80 fd       	sbrc	r24, 0
 1bc:	c0 9a       	sbi	0x18, 0	; 24
 1be:	81 fd       	sbrc	r24, 1
 1c0:	92 9a       	sbi	0x12, 2	; 18
 1c2:	08 95       	ret

000001c4 <BackLEDFast>:
 1c4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1c6:	f8 94       	cli
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <BackLEDFast+0xe>
 1cc:	97 98       	cbi	0x12, 7	; 18
 1ce:	a1 9a       	sbi	0x14, 1	; 20
 1d0:	a0 9a       	sbi	0x14, 0	; 20
 1d2:	95 b3       	in	r25, 0x15	; 21
 1d4:	9c 7f       	andi	r25, 0xFC	; 252
 1d6:	98 2b       	or	r25, r24
 1d8:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1da:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1dc:	08 95       	ret

000001de <LEDInit>:
 1de:	b8 9a       	sbi	0x17, 0	; 23
 1e0:	81 b3       	in	r24, 0x11	; 17
 1e2:	84 6c       	ori	r24, 0xC4	; 196
 1e4:	81 bb       	out	0x11, r24	; 17
 1e6:	96 98       	cbi	0x12, 6	; 18
 1e8:	97 98       	cbi	0x12, 7	; 18
 1ea:	a1 9a       	sbi	0x14, 1	; 20
 1ec:	a0 9a       	sbi	0x14, 0	; 20
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	e9 df       	rcall	.-46     	; 0x1c4 <BackLEDFast>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	e0 cf       	rjmp	.-64     	; 0x1b6 <StatusLED>

000001f6 <BackLED>:
 1f6:	88 23       	and	r24, r24
 1f8:	11 f0       	breq	.+4      	; 0x1fe <BackLED+0x8>
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <BackLED+0xa>
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	61 11       	cpse	r22, r1
 204:	01 c0       	rjmp	.+2      	; 0x208 <BackLED+0x12>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	89 2b       	or	r24, r25
 20a:	dc cf       	rjmp	.-72     	; 0x1c4 <BackLEDFast>

0000020c <MotorDir>:
 20c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 20e:	f8 94       	cli
 210:	92 b3       	in	r25, 0x12	; 18
 212:	9f 7c       	andi	r25, 0xCF	; 207
 214:	89 2b       	or	r24, r25
 216:	82 bb       	out	0x12, r24	; 18
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	8f 7c       	andi	r24, 0xCF	; 207
 21c:	68 2b       	or	r22, r24
 21e:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 220:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 222:	08 95       	ret

00000224 <MotorSpeed>:
 224:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 226:	f8 94       	cli
 228:	1b bc       	out	0x2b, r1	; 43
 22a:	8a bd       	out	0x2a, r24	; 42
 22c:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 22e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 230:	08 95       	ret

00000232 <MotorInit>:
 232:	87 b3       	in	r24, 0x17	; 23
 234:	86 63       	ori	r24, 0x36	; 54
 236:	87 bb       	out	0x17, r24	; 23
 238:	81 b3       	in	r24, 0x11	; 17
 23a:	80 63       	ori	r24, 0x30	; 48
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	81 ea       	ldi	r24, 0xA1	; 161
 240:	8f bd       	out	0x2f, r24	; 47
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	8e bd       	out	0x2e, r24	; 46
 246:	89 b7       	in	r24, 0x39	; 57
 248:	83 7c       	andi	r24, 0xC3	; 195
 24a:	89 bf       	out	0x39, r24	; 57
 24c:	60 e2       	ldi	r22, 0x20	; 32
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	dd df       	rcall	.-70     	; 0x20c <MotorDir>
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	e6 cf       	rjmp	.-52     	; 0x224 <MotorSpeed>

00000258 <LineData>:
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	f4 d0       	rcall	.+488    	; 0x44a <__ADCBlockEnter>
 262:	18 2f       	mov	r17, r24
 264:	83 e4       	ldi	r24, 0x43	; 67
 266:	19 d1       	rcall	.+562    	; 0x49a <ADCSelectChannel>
 268:	21 d1       	rcall	.+578    	; 0x4ac <ADCMeasure>
 26a:	24 b1       	in	r18, 0x04	; 4
 26c:	35 b1       	in	r19, 0x05	; 5
 26e:	39 83       	std	Y+1, r19	; 0x01
 270:	28 83       	st	Y, r18
 272:	82 e4       	ldi	r24, 0x42	; 66
 274:	12 d1       	rcall	.+548    	; 0x49a <ADCSelectChannel>
 276:	1a d1       	rcall	.+564    	; 0x4ac <ADCMeasure>
 278:	24 b1       	in	r18, 0x04	; 4
 27a:	35 b1       	in	r19, 0x05	; 5
 27c:	3b 83       	std	Y+3, r19	; 0x03
 27e:	2a 83       	std	Y+2, r18	; 0x02
 280:	81 2f       	mov	r24, r17
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	f2 c0       	rjmp	.+484    	; 0x46e <__ADCBlockLeave>

0000028a <__vector_14>:
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
 2ac:	87 b1       	in	r24, 0x07	; 7
 2ae:	78 94       	sei
 2b0:	81 36       	cpi	r24, 0x61	; 97
 2b2:	19 f0       	breq	.+6      	; 0x2ba <__vector_14+0x30>
 2b4:	83 36       	cpi	r24, 0x63	; 99
 2b6:	a1 f0       	breq	.+40     	; 0x2e0 <__vector_14+0x56>
 2b8:	27 c0       	rjmp	.+78     	; 0x308 <__vector_14+0x7e>
 2ba:	80 91 67 00 	lds	r24, 0x0067
 2be:	82 fd       	sbrc	r24, 2
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__vector_14+0x3c>
 2c2:	80 e6       	ldi	r24, 0x60	; 96
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <__vector_14+0x3e>
 2c6:	82 e6       	ldi	r24, 0x62	; 98
 2c8:	f8 94       	cli
 2ca:	95 b1       	in	r25, 0x05	; 5
 2cc:	90 93 69 00 	sts	0x0069, r25
 2d0:	90 91 64 00 	lds	r25, 0x0064
 2d4:	90 93 68 00 	sts	0x0068, r25
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	90 93 6c 00 	sts	0x006C, r25
 2de:	12 c0       	rjmp	.+36     	; 0x304 <__vector_14+0x7a>
 2e0:	80 91 67 00 	lds	r24, 0x0067
 2e4:	80 ff       	sbrs	r24, 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_14+0x62>
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <__vector_14+0x64>
 2ec:	82 e6       	ldi	r24, 0x62	; 98
 2ee:	f8 94       	cli
 2f0:	95 b1       	in	r25, 0x05	; 5
 2f2:	90 93 6b 00 	sts	0x006B, r25
 2f6:	90 91 64 00 	lds	r25, 0x0064
 2fa:	90 93 6a 00 	sts	0x006A, r25
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	90 93 66 00 	sts	0x0066, r25
 304:	78 94       	sei
 306:	04 c0       	rjmp	.+8      	; 0x310 <__vector_14+0x86>
 308:	95 b1       	in	r25, 0x05	; 5
 30a:	90 93 64 00 	sts	0x0064, r25
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	d1 d0       	rcall	.+418    	; 0x4b4 <ADCInterruptEnable>
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <SwitchInit>:
 334:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 336:	f8 94       	cli
 338:	8b b7       	in	r24, 0x3b	; 59
 33a:	8f 77       	andi	r24, 0x7F	; 127
 33c:	8b bf       	out	0x3b, r24	; 59
 33e:	85 b7       	in	r24, 0x35	; 53
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	84 60       	ori	r24, 0x04	; 4
 344:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 346:	9f bf       	out	0x3f, r25	; 63
 348:	a4 98       	cbi	0x14, 4	; 20
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	80 71       	andi	r24, 0x10	; 16
 34e:	85 bb       	out	0x15, r24	; 21
 350:	8b 98       	cbi	0x11, 3	; 17
 352:	93 98       	cbi	0x12, 3	; 18
 354:	10 92 6d 00 	sts	0x006D, r1
 358:	08 95       	ret

0000035a <PollSwitch>:
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	93 9a       	sbi	0x12, 3	; 18
 364:	8b 9a       	sbi	0x11, 3	; 17
 366:	71 d0       	rcall	.+226    	; 0x44a <__ADCBlockEnter>
 368:	08 2f       	mov	r16, r24
 36a:	84 e4       	ldi	r24, 0x44	; 68
 36c:	96 d0       	rcall	.+300    	; 0x49a <ADCSelectChannel>
 36e:	14 e0       	ldi	r17, 0x04	; 4
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	9b d0       	rcall	.+310    	; 0x4ac <ADCMeasure>
 376:	24 b1       	in	r18, 0x04	; 4
 378:	35 b1       	in	r19, 0x05	; 5
 37a:	c2 0f       	add	r28, r18
 37c:	d3 1f       	adc	r29, r19
 37e:	11 50       	subi	r17, 0x01	; 1
 380:	c9 f7       	brne	.-14     	; 0x374 <PollSwitch+0x1a>
 382:	80 2f       	mov	r24, r16
 384:	74 d0       	rcall	.+232    	; 0x46e <__ADCBlockLeave>
 386:	8b 98       	cbi	0x11, 3	; 17
 388:	93 98       	cbi	0x12, 3	; 18
 38a:	be 01       	movw	r22, r28
 38c:	76 95       	lsr	r23
 38e:	67 95       	ror	r22
 390:	76 95       	lsr	r23
 392:	67 95       	ror	r22
 394:	cb 01       	movw	r24, r22
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	98 50       	subi	r25, 0x08	; 8
 39c:	a0 d0       	rcall	.+320    	; 0x4de <__udivmodhi4>
 39e:	82 ec       	ldi	r24, 0xC2	; 194
 3a0:	86 0f       	add	r24, r22
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <__vector_2>:
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 6d 00 	sts	0x006D, r24
 3be:	8b b7       	in	r24, 0x3b	; 59
 3c0:	8f 77       	andi	r24, 0x7F	; 127
 3c2:	8b bf       	out	0x3b, r24	; 59
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <Timer2Init>:
 3d0:	12 bc       	out	0x22, r1	; 34
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	85 bd       	out	0x25, r24	; 37
 3d6:	89 b7       	in	r24, 0x39	; 57
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	89 bf       	out	0x39, r24	; 57
 3dc:	81 e9       	ldi	r24, 0x91	; 145
 3de:	83 bd       	out	0x23, r24	; 35
 3e0:	85 b5       	in	r24, 0x25	; 37
 3e2:	87 78       	andi	r24, 0x87	; 135
 3e4:	85 bd       	out	0x25, r24	; 37
 3e6:	bb 9a       	sbi	0x17, 3	; 23
 3e8:	c3 98       	cbi	0x18, 3	; 24
 3ea:	08 95       	ret

000003ec <__vector_4>:
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	84 b5       	in	r24, 0x24	; 36
 3fa:	8b 5d       	subi	r24, 0xDB	; 219
 3fc:	84 bd       	out	0x24, r24	; 36
 3fe:	80 91 6e 00 	lds	r24, 0x006E
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	80 93 6e 00 	sts	0x006E, r24
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <sleep>:
 414:	f8 94       	cli
 416:	95 b7       	in	r25, 0x35	; 53
 418:	9f 70       	andi	r25, 0x0F	; 15
 41a:	90 68       	ori	r25, 0x80	; 128
 41c:	95 bf       	out	0x35, r25	; 53
 41e:	78 94       	sei
 420:	90 91 6e 00 	lds	r25, 0x006E
 424:	89 0f       	add	r24, r25
 426:	90 91 6e 00 	lds	r25, 0x006E
 42a:	98 17       	cp	r25, r24
 42c:	11 f0       	breq	.+4      	; 0x432 <sleep+0x1e>
 42e:	88 95       	sleep
 430:	fa cf       	rjmp	.-12     	; 0x426 <sleep+0x12>
 432:	f8 94       	cli
 434:	85 b7       	in	r24, 0x35	; 53
 436:	8f 77       	andi	r24, 0x7F	; 127
 438:	85 bf       	out	0x35, r24	; 53
 43a:	78 94       	sei
 43c:	08 95       	ret

0000043e <ADCInit>:
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	80 93 65 00 	sts	0x0065, r24
 444:	86 e0       	ldi	r24, 0x06	; 6
 446:	86 b9       	out	0x06, r24	; 6
 448:	08 95       	ret

0000044a <__ADCBlockEnter>:
 44a:	2f b7       	in	r18, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	87 b1       	in	r24, 0x07	; 7
 450:	96 b1       	in	r25, 0x06	; 6
 452:	39 2f       	mov	r19, r25
 454:	38 78       	andi	r19, 0x88	; 136
 456:	31 f0       	breq	.+12     	; 0x464 <__stack+0x5>
 458:	93 ff       	sbrs	r25, 3
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__stack+0x7>
 45c:	80 93 65 00 	sts	0x0065, r24
 460:	86 e8       	ldi	r24, 0x86	; 134
 462:	86 b9       	out	0x06, r24	; 6
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	2f bf       	out	0x3f, r18	; 63
 468:	36 99       	sbic	0x06, 6	; 6
 46a:	fe cf       	rjmp	.-4      	; 0x468 <__stack+0x9>
 46c:	08 95       	ret

0000046e <__ADCBlockLeave>:
 46e:	3f b7       	in	r19, 0x3f	; 63
 470:	f8 94       	cli
 472:	8f 3f       	cpi	r24, 0xFF	; 255
 474:	31 f4       	brne	.+12     	; 0x482 <__ADCBlockLeave+0x14>
 476:	80 91 65 00 	lds	r24, 0x0065
 47a:	8f 3f       	cpi	r24, 0xFF	; 255
 47c:	51 f0       	breq	.+20     	; 0x492 <__ADCBlockLeave+0x24>
 47e:	2e ed       	ldi	r18, 0xDE	; 222
 480:	01 c0       	rjmp	.+2      	; 0x484 <__ADCBlockLeave+0x16>
 482:	26 ed       	ldi	r18, 0xD6	; 214
 484:	97 b1       	in	r25, 0x07	; 7
 486:	98 27       	eor	r25, r24
 488:	90 7c       	andi	r25, 0xC0	; 192
 48a:	09 f0       	breq	.+2      	; 0x48e <__ADCBlockLeave+0x20>
 48c:	16 b8       	out	0x06, r1	; 6
 48e:	87 b9       	out	0x07, r24	; 7
 490:	01 c0       	rjmp	.+2      	; 0x494 <__ADCBlockLeave+0x26>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	26 b9       	out	0x06, r18	; 6
 496:	3f bf       	out	0x3f, r19	; 63
 498:	08 95       	ret

0000049a <ADCSelectChannel>:
 49a:	97 b1       	in	r25, 0x07	; 7
 49c:	98 27       	eor	r25, r24
 49e:	90 7c       	andi	r25, 0xC0	; 192
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <ADCSelectChannel+0xa>
 4a2:	16 b8       	out	0x06, r1	; 6
 4a4:	96 e8       	ldi	r25, 0x86	; 134
 4a6:	96 b9       	out	0x06, r25	; 6
 4a8:	87 b9       	out	0x07, r24	; 7
 4aa:	08 95       	ret

000004ac <ADCMeasure>:
 4ac:	36 9a       	sbi	0x06, 6	; 6
 4ae:	36 99       	sbic	0x06, 6	; 6
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <ADCMeasure+0x2>
 4b2:	08 95       	ret

000004b4 <ADCInterruptEnable>:
 4b4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4b6:	f8 94       	cli
 4b8:	96 b1       	in	r25, 0x06	; 6
 4ba:	97 ff       	sbrs	r25, 7
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <ADCInterruptEnable+0xe>
 4be:	93 ff       	sbrs	r25, 3
 4c0:	0a c0       	rjmp	.+20     	; 0x4d6 <ADCInterruptEnable+0x22>
 4c2:	97 b1       	in	r25, 0x07	; 7
 4c4:	98 27       	eor	r25, r24
 4c6:	90 7c       	andi	r25, 0xC0	; 192
 4c8:	09 f0       	breq	.+2      	; 0x4cc <ADCInterruptEnable+0x18>
 4ca:	16 b8       	out	0x06, r1	; 6
 4cc:	36 99       	sbic	0x06, 6	; 6
 4ce:	16 b8       	out	0x06, r1	; 6
 4d0:	87 b9       	out	0x07, r24	; 7
 4d2:	9e ed       	ldi	r25, 0xDE	; 222
 4d4:	96 b9       	out	0x06, r25	; 6
 4d6:	80 93 65 00 	sts	0x0065, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4da:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 4dc:	08 95       	ret

000004de <__udivmodhi4>:
 4de:	aa 1b       	sub	r26, r26
 4e0:	bb 1b       	sub	r27, r27
 4e2:	51 e1       	ldi	r21, 0x11	; 17
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <__udivmodhi4_ep>

000004e6 <__udivmodhi4_loop>:
 4e6:	aa 1f       	adc	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	a6 17       	cp	r26, r22
 4ec:	b7 07       	cpc	r27, r23
 4ee:	10 f0       	brcs	.+4      	; 0x4f4 <__udivmodhi4_ep>
 4f0:	a6 1b       	sub	r26, r22
 4f2:	b7 0b       	sbc	r27, r23

000004f4 <__udivmodhi4_ep>:
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	5a 95       	dec	r21
 4fa:	a9 f7       	brne	.-22     	; 0x4e6 <__udivmodhi4_loop>
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	bc 01       	movw	r22, r24
 502:	cd 01       	movw	r24, r26
 504:	08 95       	ret

00000506 <__divmodhi4>:
 506:	97 fb       	bst	r25, 7
 508:	07 2e       	mov	r0, r23
 50a:	16 f4       	brtc	.+4      	; 0x510 <__divmodhi4+0xa>
 50c:	00 94       	com	r0
 50e:	06 d0       	rcall	.+12     	; 0x51c <__divmodhi4_neg1>
 510:	77 fd       	sbrc	r23, 7
 512:	08 d0       	rcall	.+16     	; 0x524 <__divmodhi4_neg2>
 514:	e4 df       	rcall	.-56     	; 0x4de <__udivmodhi4>
 516:	07 fc       	sbrc	r0, 7
 518:	05 d0       	rcall	.+10     	; 0x524 <__divmodhi4_neg2>
 51a:	3e f4       	brtc	.+14     	; 0x52a <__divmodhi4_exit>

0000051c <__divmodhi4_neg1>:
 51c:	90 95       	com	r25
 51e:	81 95       	neg	r24
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__divmodhi4_neg2>:
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255

0000052a <__divmodhi4_exit>:
 52a:	08 95       	ret

0000052c <do_rand>:
 52c:	8f 92       	push	r8
 52e:	9f 92       	push	r9
 530:	af 92       	push	r10
 532:	bf 92       	push	r11
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	ec 01       	movw	r28, r24
 542:	68 81       	ld	r22, Y
 544:	79 81       	ldd	r23, Y+1	; 0x01
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	9b 81       	ldd	r25, Y+3	; 0x03
 54a:	61 15       	cp	r22, r1
 54c:	71 05       	cpc	r23, r1
 54e:	81 05       	cpc	r24, r1
 550:	91 05       	cpc	r25, r1
 552:	21 f4       	brne	.+8      	; 0x55c <do_rand+0x30>
 554:	64 e2       	ldi	r22, 0x24	; 36
 556:	79 ed       	ldi	r23, 0xD9	; 217
 558:	8b e5       	ldi	r24, 0x5B	; 91
 55a:	97 e0       	ldi	r25, 0x07	; 7
 55c:	2d e1       	ldi	r18, 0x1D	; 29
 55e:	33 ef       	ldi	r19, 0xF3	; 243
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	3a d0       	rcall	.+116    	; 0x5da <__divmodsi4>
 566:	49 01       	movw	r8, r18
 568:	5a 01       	movw	r10, r20
 56a:	9b 01       	movw	r18, r22
 56c:	ac 01       	movw	r20, r24
 56e:	a7 ea       	ldi	r26, 0xA7	; 167
 570:	b1 e4       	ldi	r27, 0x41	; 65
 572:	4f d0       	rcall	.+158    	; 0x612 <__muluhisi3>
 574:	6b 01       	movw	r12, r22
 576:	7c 01       	movw	r14, r24
 578:	ac ee       	ldi	r26, 0xEC	; 236
 57a:	b4 ef       	ldi	r27, 0xF4	; 244
 57c:	a5 01       	movw	r20, r10
 57e:	94 01       	movw	r18, r8
 580:	54 d0       	rcall	.+168    	; 0x62a <__mulohisi3>
 582:	c6 0e       	add	r12, r22
 584:	d7 1e       	adc	r13, r23
 586:	e8 1e       	adc	r14, r24
 588:	f9 1e       	adc	r15, r25
 58a:	f7 fe       	sbrs	r15, 7
 58c:	06 c0       	rjmp	.+12     	; 0x59a <do_rand+0x6e>
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	c8 1a       	sub	r12, r24
 592:	d1 08       	sbc	r13, r1
 594:	e1 08       	sbc	r14, r1
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	f8 0a       	sbc	r15, r24
 59a:	c8 82       	st	Y, r12
 59c:	d9 82       	std	Y+1, r13	; 0x01
 59e:	ea 82       	std	Y+2, r14	; 0x02
 5a0:	fb 82       	std	Y+3, r15	; 0x03
 5a2:	c6 01       	movw	r24, r12
 5a4:	9f 77       	andi	r25, 0x7F	; 127
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	cf 90       	pop	r12
 5b2:	bf 90       	pop	r11
 5b4:	af 90       	pop	r10
 5b6:	9f 90       	pop	r9
 5b8:	8f 90       	pop	r8
 5ba:	08 95       	ret

000005bc <rand_r>:
 5bc:	b7 cf       	rjmp	.-146    	; 0x52c <do_rand>

000005be <rand>:
 5be:	80 e6       	ldi	r24, 0x60	; 96
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	b4 cf       	rjmp	.-152    	; 0x52c <do_rand>

000005c4 <srand>:
 5c4:	a0 e0       	ldi	r26, 0x00	; 0
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	80 93 60 00 	sts	0x0060, r24
 5cc:	90 93 61 00 	sts	0x0061, r25
 5d0:	a0 93 62 00 	sts	0x0062, r26
 5d4:	b0 93 63 00 	sts	0x0063, r27
 5d8:	08 95       	ret

000005da <__divmodsi4>:
 5da:	05 2e       	mov	r0, r21
 5dc:	97 fb       	bst	r25, 7
 5de:	16 f4       	brtc	.+4      	; 0x5e4 <__divmodsi4+0xa>
 5e0:	00 94       	com	r0
 5e2:	0f d0       	rcall	.+30     	; 0x602 <__negsi2>
 5e4:	57 fd       	sbrc	r21, 7
 5e6:	05 d0       	rcall	.+10     	; 0x5f2 <__divmodsi4_neg2>
 5e8:	24 d0       	rcall	.+72     	; 0x632 <__udivmodsi4>
 5ea:	07 fc       	sbrc	r0, 7
 5ec:	02 d0       	rcall	.+4      	; 0x5f2 <__divmodsi4_neg2>
 5ee:	46 f4       	brtc	.+16     	; 0x600 <__divmodsi4_exit>
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <__negsi2>

000005f2 <__divmodsi4_neg2>:
 5f2:	50 95       	com	r21
 5f4:	40 95       	com	r20
 5f6:	30 95       	com	r19
 5f8:	21 95       	neg	r18
 5fa:	3f 4f       	sbci	r19, 0xFF	; 255
 5fc:	4f 4f       	sbci	r20, 0xFF	; 255
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255

00000600 <__divmodsi4_exit>:
 600:	08 95       	ret

00000602 <__negsi2>:
 602:	90 95       	com	r25
 604:	80 95       	com	r24
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	08 95       	ret

00000612 <__muluhisi3>:
 612:	31 d0       	rcall	.+98     	; 0x676 <__umulhisi3>
 614:	a5 9f       	mul	r26, r21
 616:	90 0d       	add	r25, r0
 618:	b4 9f       	mul	r27, r20
 61a:	90 0d       	add	r25, r0
 61c:	a4 9f       	mul	r26, r20
 61e:	80 0d       	add	r24, r0
 620:	91 1d       	adc	r25, r1
 622:	11 24       	eor	r1, r1
 624:	08 95       	ret

00000626 <__mulshisi3>:
 626:	b7 ff       	sbrs	r27, 7
 628:	f4 cf       	rjmp	.-24     	; 0x612 <__muluhisi3>

0000062a <__mulohisi3>:
 62a:	f3 df       	rcall	.-26     	; 0x612 <__muluhisi3>
 62c:	82 1b       	sub	r24, r18
 62e:	93 0b       	sbc	r25, r19
 630:	08 95       	ret

00000632 <__udivmodsi4>:
 632:	a1 e2       	ldi	r26, 0x21	; 33
 634:	1a 2e       	mov	r1, r26
 636:	aa 1b       	sub	r26, r26
 638:	bb 1b       	sub	r27, r27
 63a:	fd 01       	movw	r30, r26
 63c:	0d c0       	rjmp	.+26     	; 0x658 <__udivmodsi4_ep>

0000063e <__udivmodsi4_loop>:
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	ee 1f       	adc	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	a2 17       	cp	r26, r18
 648:	b3 07       	cpc	r27, r19
 64a:	e4 07       	cpc	r30, r20
 64c:	f5 07       	cpc	r31, r21
 64e:	20 f0       	brcs	.+8      	; 0x658 <__udivmodsi4_ep>
 650:	a2 1b       	sub	r26, r18
 652:	b3 0b       	sbc	r27, r19
 654:	e4 0b       	sbc	r30, r20
 656:	f5 0b       	sbc	r31, r21

00000658 <__udivmodsi4_ep>:
 658:	66 1f       	adc	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	1a 94       	dec	r1
 662:	69 f7       	brne	.-38     	; 0x63e <__udivmodsi4_loop>
 664:	60 95       	com	r22
 666:	70 95       	com	r23
 668:	80 95       	com	r24
 66a:	90 95       	com	r25
 66c:	9b 01       	movw	r18, r22
 66e:	ac 01       	movw	r20, r24
 670:	bd 01       	movw	r22, r26
 672:	cf 01       	movw	r24, r30
 674:	08 95       	ret

00000676 <__umulhisi3>:
 676:	a2 9f       	mul	r26, r18
 678:	b0 01       	movw	r22, r0
 67a:	b3 9f       	mul	r27, r19
 67c:	c0 01       	movw	r24, r0
 67e:	a3 9f       	mul	r26, r19
 680:	01 d0       	rcall	.+2      	; 0x684 <__umulhisi3+0xe>
 682:	b2 9f       	mul	r27, r18
 684:	70 0d       	add	r23, r0
 686:	81 1d       	adc	r24, r1
 688:	11 24       	eor	r1, r1
 68a:	91 1d       	adc	r25, r1
 68c:	08 95       	ret

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
