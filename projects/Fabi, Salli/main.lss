
main.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         000004a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000051c  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ed  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7d  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f0  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00002e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e2  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ca  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	a2 c1       	rjmp	.+836    	; 0x34a <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	c0 c1       	rjmp	.+896    	; 0x38a <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	2f c2       	rjmp	.+1118   	; 0x4a4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void) {
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	78 d0       	rcall	.+240    	; 0x146 <Init>
	int status = 0;
	int x = 160;
	int y = 200;
  56:	48 ec       	ldi	r20, 0xC8	; 200
  58:	c4 2e       	mov	r12, r20
  5a:	d1 2c       	mov	r13, r1
#include <asuro/asuro.h>

void main(void) {
    Init();
	int status = 0;
	int x = 160;
  5c:	00 ea       	ldi	r16, 0xA0	; 160
  5e:	10 e0       	ldi	r17, 0x00	; 0

#include <asuro/asuro.h>

void main(void) {
    Init();
	int status = 0;
  60:	e1 2c       	mov	r14, r1
  62:	f1 2c       	mov	r15, r1
	int x = 160;
	int y = 200;
	while (1) {
		char sensor = PollSwitch();
  64:	49 d1       	rcall	.+658    	; 0x2f8 <PollSwitch>
  66:	b8 2e       	mov	r11, r24
		sensor &= 0b00111111;
		
		MotorDir(FWD, FWD);
  68:	60 e2       	ldi	r22, 0x20	; 32
  6a:	80 e2       	ldi	r24, 0x20	; 32
  6c:	9e d0       	rcall	.+316    	; 0x1aa <MotorDir>
		MotorSpeed(160, 200);
  6e:	68 ec       	ldi	r22, 0xC8	; 200
  70:	80 ea       	ldi	r24, 0xA0	; 160
  72:	a7 d0       	rcall	.+334    	; 0x1c2 <MotorSpeed>
	int status = 0;
	int x = 160;
	int y = 200;
	while (1) {
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  74:	8b 2d       	mov	r24, r11
  76:	8f 73       	andi	r24, 0x3F	; 63
		
		MotorDir(FWD, FWD);
		MotorSpeed(160, 200);
		
		
		if (sensor > 0)
  78:	41 f0       	breq	.+16     	; 0x8a <main+0x42>
		{
			 MotorDir(BWD, BWD);
  7a:	60 e1       	ldi	r22, 0x10	; 16
  7c:	80 e1       	ldi	r24, 0x10	; 16
  7e:	95 d0       	rcall	.+298    	; 0x1aa <MotorDir>
			 MotorSpeed(40, 100);
  80:	64 e6       	ldi	r22, 0x64	; 100
  82:	88 e2       	ldi	r24, 0x28	; 40
  84:	9e d0       	rcall	.+316    	; 0x1c2 <MotorSpeed>
			 StatusLED(RED);
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	65 d0       	rcall	.+202    	; 0x154 <StatusLED>

#include <asuro/asuro.h>

void main(void) {
    Init();
	int status = 0;
  8a:	38 ee       	ldi	r19, 0xE8	; 232
  8c:	a3 2e       	mov	r10, r19
  8e:	33 e0       	ldi	r19, 0x03	; 3
  90:	b3 2e       	mov	r11, r19
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	8e d1       	rcall	.+796    	; 0x3b2 <sleep>
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	a8 1a       	sub	r10, r24
  9a:	b1 08       	sbc	r11, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  9c:	d1 f7       	brne	.-12     	; 0x92 <main+0x4a>
			 MotorDir(BWD, BWD);
			 MotorSpeed(40, 100);
			 StatusLED(RED);
		}
		msleep(1000);
		uint16_t data[] = {0,0};
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	1c 82       	std	Y+4, r1	; 0x04
  a4:	1b 82       	std	Y+3, r1	; 0x03
		while (((data[LEFT] > 40) || (data[RIGHT] > 40)) && (x > 10))
		{	
			MotorSpeed(x, y);
			x -= 5;
			y -= 5;
			LineData(data);
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	a5 d0       	rcall	.+330    	; 0x1f6 <LineData>
			 StatusLED(RED);
		}
		msleep(1000);
		uint16_t data[] = {0,0};
		LineData(data);
		while (((data[LEFT] > 40) || (data[RIGHT] > 40)) && (x > 10))
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	89 97       	sbiw	r24, 0x29	; 41
  b2:	20 f4       	brcc	.+8      	; 0xbc <main+0x74>
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	9c 81       	ldd	r25, Y+4	; 0x04
  b8:	89 97       	sbiw	r24, 0x29	; 41
  ba:	18 f1       	brcs	.+70     	; 0x102 <main+0xba>
  bc:	0b 30       	cpi	r16, 0x0B	; 11
  be:	11 05       	cpc	r17, r1
  c0:	04 f1       	brlt	.+64     	; 0x102 <main+0xba>
		{	
			MotorSpeed(x, y);
  c2:	6c 2d       	mov	r22, r12
  c4:	80 2f       	mov	r24, r16
  c6:	7d d0       	rcall	.+250    	; 0x1c2 <MotorSpeed>
			x -= 5;
  c8:	05 50       	subi	r16, 0x05	; 5
  ca:	11 09       	sbc	r17, r1
			y -= 5;
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	c8 1a       	sub	r12, r24
  d0:	d1 08       	sbc	r13, r1
  d2:	e9 cf       	rjmp	.-46     	; 0xa6 <main+0x5e>
			LineData(data);
		} 
		while ((data[LEFT] > 100) || (data[RIGHT] > 100))
		{	
			MotorSpeed(0, 0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	74 d0       	rcall	.+232    	; 0x1c2 <MotorSpeed>
			if (status) {
  da:	ef 28       	or	r14, r15
  dc:	c1 f0       	breq	.+48     	; 0x10e <main+0xc6>
				BackLED(ON, OFF);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	58 d0       	rcall	.+176    	; 0x194 <BackLED>
				status = 0;
  e4:	e1 2c       	mov	r14, r1
  e6:	f1 2c       	mov	r15, r1
			} else {
				BackLED(OFF, ON);
				status = 1;
  e8:	94 ef       	ldi	r25, 0xF4	; 244
  ea:	a9 2e       	mov	r10, r25
  ec:	bb 24       	eor	r11, r11
  ee:	b3 94       	inc	r11
        sleep(36);
  f0:	84 e2       	ldi	r24, 0x24	; 36
  f2:	5f d1       	rcall	.+702    	; 0x3b2 <sleep>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	a8 1a       	sub	r10, r24
  f8:	b1 08       	sbc	r11, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  fa:	d1 f7       	brne	.-12     	; 0xf0 <main+0xa8>
			}
			msleep(500);
			LineData(data);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	7a d0       	rcall	.+244    	; 0x1f6 <LineData>
			MotorSpeed(x, y);
			x -= 5;
			y -= 5;
			LineData(data);
		} 
		while ((data[LEFT] > 100) || (data[RIGHT] > 100))
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	85 36       	cpi	r24, 0x65	; 101
 108:	91 05       	cpc	r25, r1
 10a:	40 f0       	brcs	.+16     	; 0x11c <main+0xd4>
 10c:	e3 cf       	rjmp	.-58     	; 0xd4 <main+0x8c>
			MotorSpeed(0, 0);
			if (status) {
				BackLED(ON, OFF);
				status = 0;
			} else {
				BackLED(OFF, ON);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	40 d0       	rcall	.+128    	; 0x194 <BackLED>
				status = 1;
 114:	ee 24       	eor	r14, r14
 116:	e3 94       	inc	r14
 118:	f1 2c       	mov	r15, r1
 11a:	e6 cf       	rjmp	.-52     	; 0xe8 <main+0xa0>
			MotorSpeed(x, y);
			x -= 5;
			y -= 5;
			LineData(data);
		} 
		while ((data[LEFT] > 100) || (data[RIGHT] > 100))
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	9c 81       	ldd	r25, Y+4	; 0x04
 120:	85 36       	cpi	r24, 0x65	; 101
 122:	91 05       	cpc	r25, r1
 124:	b8 f6       	brcc	.-82     	; 0xd4 <main+0x8c>
				status = 1;
			}
			msleep(500);
			LineData(data);
		} 
		StatusLED(GREEN);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	15 d0       	rcall	.+42     	; 0x154 <StatusLED>
		BackLED(OFF, OFF);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	32 d0       	rcall	.+100    	; 0x194 <BackLED>
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	a8 2e       	mov	r10, r24
 134:	bb 24       	eor	r11, r11
 136:	b3 94       	inc	r11
        sleep(36);
 138:	84 e2       	ldi	r24, 0x24	; 36
 13a:	3b d1       	rcall	.+630    	; 0x3b2 <sleep>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	a8 1a       	sub	r10, r24
 140:	b1 08       	sbc	r11, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 142:	d1 f7       	brne	.-12     	; 0x138 <main+0xf0>
 144:	8f cf       	rjmp	.-226    	; 0x64 <main+0x1c>

00000146 <Init>:
 146:	13 d1       	rcall	.+550    	; 0x36e <Timer2Init>
 148:	43 d0       	rcall	.+134    	; 0x1d0 <MotorInit>
 14a:	18 d0       	rcall	.+48     	; 0x17c <LEDInit>
 14c:	47 d1       	rcall	.+654    	; 0x3dc <ADCInit>
 14e:	c1 d0       	rcall	.+386    	; 0x2d2 <SwitchInit>
 150:	78 94       	sei
 152:	08 95       	ret

00000154 <StatusLED>:
 154:	c0 98       	cbi	0x18, 0	; 24
 156:	92 98       	cbi	0x12, 2	; 18
 158:	80 fd       	sbrc	r24, 0
 15a:	c0 9a       	sbi	0x18, 0	; 24
 15c:	81 fd       	sbrc	r24, 1
 15e:	92 9a       	sbi	0x12, 2	; 18
 160:	08 95       	ret

00000162 <BackLEDFast>:
 162:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 164:	f8 94       	cli
 166:	88 23       	and	r24, r24
 168:	19 f0       	breq	.+6      	; 0x170 <BackLEDFast+0xe>
 16a:	97 98       	cbi	0x12, 7	; 18
 16c:	a1 9a       	sbi	0x14, 1	; 20
 16e:	a0 9a       	sbi	0x14, 0	; 20
 170:	95 b3       	in	r25, 0x15	; 21
 172:	9c 7f       	andi	r25, 0xFC	; 252
 174:	98 2b       	or	r25, r24
 176:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 178:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 17a:	08 95       	ret

0000017c <LEDInit>:
 17c:	b8 9a       	sbi	0x17, 0	; 23
 17e:	81 b3       	in	r24, 0x11	; 17
 180:	84 6c       	ori	r24, 0xC4	; 196
 182:	81 bb       	out	0x11, r24	; 17
 184:	96 98       	cbi	0x12, 6	; 18
 186:	97 98       	cbi	0x12, 7	; 18
 188:	a1 9a       	sbi	0x14, 1	; 20
 18a:	a0 9a       	sbi	0x14, 0	; 20
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	e9 df       	rcall	.-46     	; 0x162 <BackLEDFast>
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	e0 cf       	rjmp	.-64     	; 0x154 <StatusLED>

00000194 <BackLED>:
 194:	88 23       	and	r24, r24
 196:	11 f0       	breq	.+4      	; 0x19c <BackLED+0x8>
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	01 c0       	rjmp	.+2      	; 0x19e <BackLED+0xa>
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	61 11       	cpse	r22, r1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <BackLED+0x12>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	89 2b       	or	r24, r25
 1a8:	dc cf       	rjmp	.-72     	; 0x162 <BackLEDFast>

000001aa <MotorDir>:
 1aa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1ac:	f8 94       	cli
 1ae:	92 b3       	in	r25, 0x12	; 18
 1b0:	9f 7c       	andi	r25, 0xCF	; 207
 1b2:	89 2b       	or	r24, r25
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	88 b3       	in	r24, 0x18	; 24
 1b8:	8f 7c       	andi	r24, 0xCF	; 207
 1ba:	68 2b       	or	r22, r24
 1bc:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1be:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1c0:	08 95       	ret

000001c2 <MotorSpeed>:
 1c2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1c4:	f8 94       	cli
 1c6:	1b bc       	out	0x2b, r1	; 43
 1c8:	8a bd       	out	0x2a, r24	; 42
 1ca:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1cc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 1ce:	08 95       	ret

000001d0 <MotorInit>:
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	86 63       	ori	r24, 0x36	; 54
 1d4:	87 bb       	out	0x17, r24	; 23
 1d6:	81 b3       	in	r24, 0x11	; 17
 1d8:	80 63       	ori	r24, 0x30	; 48
 1da:	81 bb       	out	0x11, r24	; 17
 1dc:	81 ea       	ldi	r24, 0xA1	; 161
 1de:	8f bd       	out	0x2f, r24	; 47
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	8e bd       	out	0x2e, r24	; 46
 1e4:	89 b7       	in	r24, 0x39	; 57
 1e6:	83 7c       	andi	r24, 0xC3	; 195
 1e8:	89 bf       	out	0x39, r24	; 57
 1ea:	60 e2       	ldi	r22, 0x20	; 32
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	dd df       	rcall	.-70     	; 0x1aa <MotorDir>
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	e6 cf       	rjmp	.-52     	; 0x1c2 <MotorSpeed>

000001f6 <LineData>:
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	f4 d0       	rcall	.+488    	; 0x3e8 <__ADCBlockEnter>
 200:	18 2f       	mov	r17, r24
 202:	83 e4       	ldi	r24, 0x43	; 67
 204:	19 d1       	rcall	.+562    	; 0x438 <ADCSelectChannel>
 206:	21 d1       	rcall	.+578    	; 0x44a <ADCMeasure>
 208:	24 b1       	in	r18, 0x04	; 4
 20a:	35 b1       	in	r19, 0x05	; 5
 20c:	39 83       	std	Y+1, r19	; 0x01
 20e:	28 83       	st	Y, r18
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	12 d1       	rcall	.+548    	; 0x438 <ADCSelectChannel>
 214:	1a d1       	rcall	.+564    	; 0x44a <ADCMeasure>
 216:	24 b1       	in	r18, 0x04	; 4
 218:	35 b1       	in	r19, 0x05	; 5
 21a:	3b 83       	std	Y+3, r19	; 0x03
 21c:	2a 83       	std	Y+2, r18	; 0x02
 21e:	81 2f       	mov	r24, r17
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	f2 c0       	rjmp	.+484    	; 0x40c <__ADCBlockLeave>

00000228 <__vector_14>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
 24a:	87 b1       	in	r24, 0x07	; 7
 24c:	78 94       	sei
 24e:	81 36       	cpi	r24, 0x61	; 97
 250:	19 f0       	breq	.+6      	; 0x258 <__vector_14+0x30>
 252:	83 36       	cpi	r24, 0x63	; 99
 254:	a1 f0       	breq	.+40     	; 0x27e <__vector_14+0x56>
 256:	27 c0       	rjmp	.+78     	; 0x2a6 <__vector_14+0x7e>
 258:	80 91 63 00 	lds	r24, 0x0063
 25c:	82 fd       	sbrc	r24, 2
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__vector_14+0x3c>
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	01 c0       	rjmp	.+2      	; 0x266 <__vector_14+0x3e>
 264:	82 e6       	ldi	r24, 0x62	; 98
 266:	f8 94       	cli
 268:	95 b1       	in	r25, 0x05	; 5
 26a:	90 93 65 00 	sts	0x0065, r25
 26e:	90 91 60 00 	lds	r25, 0x0060
 272:	90 93 64 00 	sts	0x0064, r25
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	90 93 68 00 	sts	0x0068, r25
 27c:	12 c0       	rjmp	.+36     	; 0x2a2 <__vector_14+0x7a>
 27e:	80 91 63 00 	lds	r24, 0x0063
 282:	80 ff       	sbrs	r24, 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <__vector_14+0x62>
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	01 c0       	rjmp	.+2      	; 0x28c <__vector_14+0x64>
 28a:	82 e6       	ldi	r24, 0x62	; 98
 28c:	f8 94       	cli
 28e:	95 b1       	in	r25, 0x05	; 5
 290:	90 93 67 00 	sts	0x0067, r25
 294:	90 91 60 00 	lds	r25, 0x0060
 298:	90 93 66 00 	sts	0x0066, r25
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	90 93 62 00 	sts	0x0062, r25
 2a2:	78 94       	sei
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <__vector_14+0x86>
 2a6:	95 b1       	in	r25, 0x05	; 5
 2a8:	90 93 60 00 	sts	0x0060, r25
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	d1 d0       	rcall	.+418    	; 0x452 <ADCInterruptEnable>
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <SwitchInit>:
 2d2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2d4:	f8 94       	cli
 2d6:	8b b7       	in	r24, 0x3b	; 59
 2d8:	8f 77       	andi	r24, 0x7F	; 127
 2da:	8b bf       	out	0x3b, r24	; 59
 2dc:	85 b7       	in	r24, 0x35	; 53
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	84 60       	ori	r24, 0x04	; 4
 2e2:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2e4:	9f bf       	out	0x3f, r25	; 63
 2e6:	a4 98       	cbi	0x14, 4	; 20
 2e8:	85 b3       	in	r24, 0x15	; 21
 2ea:	80 71       	andi	r24, 0x10	; 16
 2ec:	85 bb       	out	0x15, r24	; 21
 2ee:	8b 98       	cbi	0x11, 3	; 17
 2f0:	93 98       	cbi	0x12, 3	; 18
 2f2:	10 92 69 00 	sts	0x0069, r1
 2f6:	08 95       	ret

000002f8 <PollSwitch>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	93 9a       	sbi	0x12, 3	; 18
 302:	8b 9a       	sbi	0x11, 3	; 17
 304:	71 d0       	rcall	.+226    	; 0x3e8 <__ADCBlockEnter>
 306:	08 2f       	mov	r16, r24
 308:	84 e4       	ldi	r24, 0x44	; 68
 30a:	96 d0       	rcall	.+300    	; 0x438 <ADCSelectChannel>
 30c:	14 e0       	ldi	r17, 0x04	; 4
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	9b d0       	rcall	.+310    	; 0x44a <ADCMeasure>
 314:	24 b1       	in	r18, 0x04	; 4
 316:	35 b1       	in	r19, 0x05	; 5
 318:	c2 0f       	add	r28, r18
 31a:	d3 1f       	adc	r29, r19
 31c:	11 50       	subi	r17, 0x01	; 1
 31e:	c9 f7       	brne	.-14     	; 0x312 <PollSwitch+0x1a>
 320:	80 2f       	mov	r24, r16
 322:	74 d0       	rcall	.+232    	; 0x40c <__ADCBlockLeave>
 324:	8b 98       	cbi	0x11, 3	; 17
 326:	93 98       	cbi	0x12, 3	; 18
 328:	be 01       	movw	r22, r28
 32a:	76 95       	lsr	r23
 32c:	67 95       	ror	r22
 32e:	76 95       	lsr	r23
 330:	67 95       	ror	r22
 332:	cb 01       	movw	r24, r22
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	98 50       	subi	r25, 0x08	; 8
 33a:	a0 d0       	rcall	.+320    	; 0x47c <__udivmodhi4>
 33c:	82 ec       	ldi	r24, 0xC2	; 194
 33e:	86 0f       	add	r24, r22
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <__vector_2>:
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	8f 93       	push	r24
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 69 00 	sts	0x0069, r24
 35c:	8b b7       	in	r24, 0x3b	; 59
 35e:	8f 77       	andi	r24, 0x7F	; 127
 360:	8b bf       	out	0x3b, r24	; 59
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <Timer2Init>:
 36e:	12 bc       	out	0x22, r1	; 34
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	85 bd       	out	0x25, r24	; 37
 374:	89 b7       	in	r24, 0x39	; 57
 376:	80 64       	ori	r24, 0x40	; 64
 378:	89 bf       	out	0x39, r24	; 57
 37a:	81 e9       	ldi	r24, 0x91	; 145
 37c:	83 bd       	out	0x23, r24	; 35
 37e:	85 b5       	in	r24, 0x25	; 37
 380:	87 78       	andi	r24, 0x87	; 135
 382:	85 bd       	out	0x25, r24	; 37
 384:	bb 9a       	sbi	0x17, 3	; 23
 386:	c3 98       	cbi	0x18, 3	; 24
 388:	08 95       	ret

0000038a <__vector_4>:
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	84 b5       	in	r24, 0x24	; 36
 398:	8b 5d       	subi	r24, 0xDB	; 219
 39a:	84 bd       	out	0x24, r24	; 36
 39c:	80 91 6a 00 	lds	r24, 0x006A
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 6a 00 	sts	0x006A, r24
 3a6:	8f 91       	pop	r24
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <sleep>:
 3b2:	f8 94       	cli
 3b4:	95 b7       	in	r25, 0x35	; 53
 3b6:	9f 70       	andi	r25, 0x0F	; 15
 3b8:	90 68       	ori	r25, 0x80	; 128
 3ba:	95 bf       	out	0x35, r25	; 53
 3bc:	78 94       	sei
 3be:	90 91 6a 00 	lds	r25, 0x006A
 3c2:	89 0f       	add	r24, r25
 3c4:	90 91 6a 00 	lds	r25, 0x006A
 3c8:	98 17       	cp	r25, r24
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <sleep+0x1e>
 3cc:	88 95       	sleep
 3ce:	fa cf       	rjmp	.-12     	; 0x3c4 <sleep+0x12>
 3d0:	f8 94       	cli
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	8f 77       	andi	r24, 0x7F	; 127
 3d6:	85 bf       	out	0x35, r24	; 53
 3d8:	78 94       	sei
 3da:	08 95       	ret

000003dc <ADCInit>:
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	80 93 61 00 	sts	0x0061, r24
 3e2:	86 e0       	ldi	r24, 0x06	; 6
 3e4:	86 b9       	out	0x06, r24	; 6
 3e6:	08 95       	ret

000003e8 <__ADCBlockEnter>:
 3e8:	2f b7       	in	r18, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	87 b1       	in	r24, 0x07	; 7
 3ee:	96 b1       	in	r25, 0x06	; 6
 3f0:	39 2f       	mov	r19, r25
 3f2:	38 78       	andi	r19, 0x88	; 136
 3f4:	31 f0       	breq	.+12     	; 0x402 <__ADCBlockEnter+0x1a>
 3f6:	93 ff       	sbrs	r25, 3
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__ADCBlockEnter+0x1c>
 3fa:	80 93 61 00 	sts	0x0061, r24
 3fe:	86 e8       	ldi	r24, 0x86	; 134
 400:	86 b9       	out	0x06, r24	; 6
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	2f bf       	out	0x3f, r18	; 63
 406:	36 99       	sbic	0x06, 6	; 6
 408:	fe cf       	rjmp	.-4      	; 0x406 <__ADCBlockEnter+0x1e>
 40a:	08 95       	ret

0000040c <__ADCBlockLeave>:
 40c:	3f b7       	in	r19, 0x3f	; 63
 40e:	f8 94       	cli
 410:	8f 3f       	cpi	r24, 0xFF	; 255
 412:	31 f4       	brne	.+12     	; 0x420 <__ADCBlockLeave+0x14>
 414:	80 91 61 00 	lds	r24, 0x0061
 418:	8f 3f       	cpi	r24, 0xFF	; 255
 41a:	51 f0       	breq	.+20     	; 0x430 <__ADCBlockLeave+0x24>
 41c:	2e ed       	ldi	r18, 0xDE	; 222
 41e:	01 c0       	rjmp	.+2      	; 0x422 <__ADCBlockLeave+0x16>
 420:	26 ed       	ldi	r18, 0xD6	; 214
 422:	97 b1       	in	r25, 0x07	; 7
 424:	98 27       	eor	r25, r24
 426:	90 7c       	andi	r25, 0xC0	; 192
 428:	09 f0       	breq	.+2      	; 0x42c <__ADCBlockLeave+0x20>
 42a:	16 b8       	out	0x06, r1	; 6
 42c:	87 b9       	out	0x07, r24	; 7
 42e:	01 c0       	rjmp	.+2      	; 0x432 <__ADCBlockLeave+0x26>
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	26 b9       	out	0x06, r18	; 6
 434:	3f bf       	out	0x3f, r19	; 63
 436:	08 95       	ret

00000438 <ADCSelectChannel>:
 438:	97 b1       	in	r25, 0x07	; 7
 43a:	98 27       	eor	r25, r24
 43c:	90 7c       	andi	r25, 0xC0	; 192
 43e:	09 f0       	breq	.+2      	; 0x442 <ADCSelectChannel+0xa>
 440:	16 b8       	out	0x06, r1	; 6
 442:	96 e8       	ldi	r25, 0x86	; 134
 444:	96 b9       	out	0x06, r25	; 6
 446:	87 b9       	out	0x07, r24	; 7
 448:	08 95       	ret

0000044a <ADCMeasure>:
 44a:	36 9a       	sbi	0x06, 6	; 6
 44c:	36 99       	sbic	0x06, 6	; 6
 44e:	fe cf       	rjmp	.-4      	; 0x44c <ADCMeasure+0x2>
 450:	08 95       	ret

00000452 <ADCInterruptEnable>:
 452:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 454:	f8 94       	cli
 456:	96 b1       	in	r25, 0x06	; 6
 458:	97 ff       	sbrs	r25, 7
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__stack+0x1>
 45c:	93 ff       	sbrs	r25, 3
 45e:	0a c0       	rjmp	.+20     	; 0x474 <__stack+0x15>
 460:	97 b1       	in	r25, 0x07	; 7
 462:	98 27       	eor	r25, r24
 464:	90 7c       	andi	r25, 0xC0	; 192
 466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
 468:	16 b8       	out	0x06, r1	; 6
 46a:	36 99       	sbic	0x06, 6	; 6
 46c:	16 b8       	out	0x06, r1	; 6
 46e:	87 b9       	out	0x07, r24	; 7
 470:	9e ed       	ldi	r25, 0xDE	; 222
 472:	96 b9       	out	0x06, r25	; 6
 474:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 478:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 47a:	08 95       	ret

0000047c <__udivmodhi4>:
 47c:	aa 1b       	sub	r26, r26
 47e:	bb 1b       	sub	r27, r27
 480:	51 e1       	ldi	r21, 0x11	; 17
 482:	07 c0       	rjmp	.+14     	; 0x492 <__udivmodhi4_ep>

00000484 <__udivmodhi4_loop>:
 484:	aa 1f       	adc	r26, r26
 486:	bb 1f       	adc	r27, r27
 488:	a6 17       	cp	r26, r22
 48a:	b7 07       	cpc	r27, r23
 48c:	10 f0       	brcs	.+4      	; 0x492 <__udivmodhi4_ep>
 48e:	a6 1b       	sub	r26, r22
 490:	b7 0b       	sbc	r27, r23

00000492 <__udivmodhi4_ep>:
 492:	88 1f       	adc	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	5a 95       	dec	r21
 498:	a9 f7       	brne	.-22     	; 0x484 <__udivmodhi4_loop>
 49a:	80 95       	com	r24
 49c:	90 95       	com	r25
 49e:	bc 01       	movw	r22, r24
 4a0:	cd 01       	movw	r24, r26
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
