
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000006c0  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  00000758  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001620  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000835  00000000  00000000  000029f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b40  00000000  00000000  00003bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  000046ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	ea c1       	rjmp	.+980    	; 0x3da <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	08 c2       	rjmp	.+1040   	; 0x41a <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	4d c1       	rjmp	.+666    	; 0x2b8 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	af 36       	cpi	r26, 0x6F	; 111
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e0 ec       	ldi	r30, 0xC0	; 192
  4a:	f6 e0       	ldi	r31, 0x06	; 6
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>
  58:	13 d0       	rcall	.+38     	; 0x80 <main>
  5a:	30 c3       	rjmp	.+1632   	; 0x6bc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	f4 d0       	rcall	.+488    	; 0x252 <MotorSpeed>
	if (pause > 0)
  6a:	1c 16       	cp	r1, r28
  6c:	1d 06       	cpc	r1, r29
  6e:	2c f4       	brge	.+10     	; 0x7a <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  70:	84 e2       	ldi	r24, 0x24	; 36
  72:	e7 d1       	rcall	.+974    	; 0x442 <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  74:	21 97       	sbiw	r28, 0x01	; 1
  76:	20 97       	sbiw	r28, 0x00	; 0
  78:	d9 f7       	brne	.-10     	; 0x70 <stopAsuro+0x12>
		msleep(pause);
}
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

00000080 <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    Init();
  8c:	a4 d0       	rcall	.+328    	; 0x1d6 <Init>
    int status = 0;
	//int x = 160;
	//int y = 200;
	int i = 0;
  8e:	e1 2c       	mov	r14, r1
  90:	f1 2c       	mov	r15, r1
#include "helpers.h"
#include <stdlib.h>

void main(void) {
    Init();
    int status = 0;
  92:	00 e0       	ldi	r16, 0x00	; 0
  94:	10 e0       	ldi	r17, 0x00	; 0
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
  96:	28 eb       	ldi	r18, 0xB8	; 184
  98:	a2 2e       	mov	r10, r18
  9a:	2b e0       	ldi	r18, 0x0B	; 11
  9c:	b2 2e       	mov	r11, r18
			int ran;
			ran = rand() % 2;
  9e:	32 e0       	ldi	r19, 0x02	; 2
  a0:	83 2e       	mov	r8, r19
  a2:	91 2c       	mov	r9, r1
    int status = 0;
	//int x = 160;
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	e2 1a       	sub	r14, r18
  a8:	f2 0a       	sbc	r15, r18
		char sensor = PollSwitch();
  aa:	6e d1       	rcall	.+732    	; 0x388 <PollSwitch>
  ac:	d8 2e       	mov	r13, r24
		sensor &= 0b00111111;
		MotorDir(FWD, FWD); //Werkeinstellung
  ae:	60 e2       	ldi	r22, 0x20	; 32
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	c3 d0       	rcall	.+390    	; 0x23a <MotorDir>
		MotorSpeed(230, 200); 
  b4:	68 ec       	ldi	r22, 0xC8	; 200
  b6:	86 ee       	ldi	r24, 0xE6	; 230
  b8:	cc d0       	rcall	.+408    	; 0x252 <MotorSpeed>
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  ba:	8d 2d       	mov	r24, r13
  bc:	8f 73       	andi	r24, 0x3F	; 63
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 200); 
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  be:	41 f4       	brne	.+16     	; 0xd0 <main+0x50>
			 MotorSpeed(60, 150);
			 StatusLED(RED);
			 msleep(800);
		}
		
		uint16_t data[] = {0,0};
  c0:	1a 82       	std	Y+2, r1	; 0x02
  c2:	19 82       	std	Y+1, r1	; 0x01
  c4:	1c 82       	std	Y+4, r1	; 0x04
  c6:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	dc d0       	rcall	.+440    	; 0x286 <LineData>
  ce:	1d c0       	rjmp	.+58     	; 0x10a <main+0x8a>
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 200); 
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  d0:	60 e1       	ldi	r22, 0x10	; 16
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	b2 d0       	rcall	.+356    	; 0x23a <MotorDir>
			 MotorSpeed(60, 150);
  d6:	66 e9       	ldi	r22, 0x96	; 150
  d8:	8c e3       	ldi	r24, 0x3C	; 60
  da:	bb d0       	rcall	.+374    	; 0x252 <MotorSpeed>
			 StatusLED(RED);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	82 d0       	rcall	.+260    	; 0x1e4 <StatusLED>
  e0:	90 e2       	ldi	r25, 0x20	; 32
  e2:	c9 2e       	mov	r12, r25
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	d9 2e       	mov	r13, r25
        sleep(36);
  e8:	84 e2       	ldi	r24, 0x24	; 36
  ea:	ab d1       	rcall	.+854    	; 0x442 <sleep>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	c8 1a       	sub	r12, r24
  f0:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  f2:	c1 14       	cp	r12, r1
  f4:	d1 04       	cpc	r13, r1
  f6:	c1 f7       	brne	.-16     	; 0xe8 <main+0x68>
  f8:	e3 cf       	rjmp	.-58     	; 0xc0 <main+0x40>
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	9c 81       	ldd	r25, Y+4	; 0x04
  fe:	85 3f       	cpi	r24, 0xF5	; 245
 100:	91 40       	sbci	r25, 0x01	; 1
 102:	60 f0       	brcs	.+24     	; 0x11c <main+0x9c>
		{	
			stopAsuro(500);
 104:	84 ef       	ldi	r24, 0xF4	; 244
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	aa df       	rcall	.-172    	; 0x5e <stopAsuro>
			LineData(data);
 10a:	ce 01       	movw	r24, r28
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	bb d0       	rcall	.+374    	; 0x286 <LineData>
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	85 3f       	cpi	r24, 0xF5	; 245
 116:	91 40       	sbci	r25, 0x01	; 1
 118:	80 f3       	brcs	.-32     	; 0xfa <main+0x7a>
 11a:	f4 cf       	rjmp	.-24     	; 0x104 <main+0x84>
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
 11c:	c7 01       	movw	r24, r14
 11e:	b5 01       	movw	r22, r10
 120:	09 d2       	rcall	.+1042   	; 0x534 <__divmodhi4>
 122:	89 2b       	or	r24, r25
 124:	51 f4       	brne	.+20     	; 0x13a <main+0xba>
			int ran;
			ran = rand() % 2;
 126:	62 d2       	rcall	.+1220   	; 0x5ec <rand>
 128:	b4 01       	movw	r22, r8
 12a:	04 d2       	rcall	.+1032   	; 0x534 <__divmodhi4>
			if (ran) {
 12c:	89 2b       	or	r24, r25
 12e:	29 f0       	breq	.+10     	; 0x13a <main+0xba>
				StatusLED(YELLOW);
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	58 d0       	rcall	.+176    	; 0x1e4 <StatusLED>
				stopAsuro(3000);
 134:	88 eb       	ldi	r24, 0xB8	; 184
 136:	9b e0       	ldi	r25, 0x0B	; 11
 138:	92 df       	rcall	.-220    	; 0x5e <stopAsuro>
			}
		}
		switch (status) {
 13a:	01 30       	cpi	r16, 0x01	; 1
 13c:	11 05       	cpc	r17, r1
 13e:	99 f0       	breq	.+38     	; 0x166 <main+0xe6>
 140:	02 30       	cpi	r16, 0x02	; 2
 142:	11 05       	cpc	r17, r1
 144:	e9 f0       	breq	.+58     	; 0x180 <main+0x100>
 146:	01 15       	cp	r16, r1
 148:	11 05       	cpc	r17, r1
 14a:	39 f5       	brne	.+78     	; 0x19a <main+0x11a>
			case 0: 
			MotorSpeed(250, 50);
 14c:	62 e3       	ldi	r22, 0x32	; 50
 14e:	8a ef       	ldi	r24, 0xFA	; 250
 150:	80 d0       	rcall	.+256    	; 0x252 <MotorSpeed>
 152:	08 ee       	ldi	r16, 0xE8	; 232
 154:	13 e0       	ldi	r17, 0x03	; 3
        sleep(36);
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	74 d1       	rcall	.+744    	; 0x442 <sleep>
 15a:	01 50       	subi	r16, 0x01	; 1
 15c:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 15e:	01 15       	cp	r16, r1
 160:	11 05       	cpc	r17, r1
 162:	c9 f7       	brne	.-14     	; 0x156 <main+0xd6>
 164:	1e c0       	rjmp	.+60     	; 0x1a2 <main+0x122>
			status = 1;
			msleep(1000);
			break;
			case 1: 
			MotorSpeed(60,250);
 166:	6a ef       	ldi	r22, 0xFA	; 250
 168:	8c e3       	ldi	r24, 0x3C	; 60
 16a:	73 d0       	rcall	.+230    	; 0x252 <MotorSpeed>
 16c:	08 ee       	ldi	r16, 0xE8	; 232
 16e:	13 e0       	ldi	r17, 0x03	; 3
        sleep(36);
 170:	84 e2       	ldi	r24, 0x24	; 36
 172:	67 d1       	rcall	.+718    	; 0x442 <sleep>
 174:	01 50       	subi	r16, 0x01	; 1
 176:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 178:	01 15       	cp	r16, r1
 17a:	11 05       	cpc	r17, r1
 17c:	c9 f7       	brne	.-14     	; 0x170 <main+0xf0>
 17e:	14 c0       	rjmp	.+40     	; 0x1a8 <main+0x128>
			status = 2;
			msleep(1000);
			break;
			case 2: 
			MotorSpeed(230, 200); 
 180:	68 ec       	ldi	r22, 0xC8	; 200
 182:	86 ee       	ldi	r24, 0xE6	; 230
 184:	66 d0       	rcall	.+204    	; 0x252 <MotorSpeed>
 186:	08 ee       	ldi	r16, 0xE8	; 232
 188:	13 e0       	ldi	r17, 0x03	; 3
        sleep(36);
 18a:	84 e2       	ldi	r24, 0x24	; 36
 18c:	5a d1       	rcall	.+692    	; 0x442 <sleep>
 18e:	01 50       	subi	r16, 0x01	; 1
 190:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 192:	01 15       	cp	r16, r1
 194:	11 05       	cpc	r17, r1
 196:	c9 f7       	brne	.-14     	; 0x18a <main+0x10a>
 198:	0a c0       	rjmp	.+20     	; 0x1ae <main+0x12e>
			status = 0;
			msleep(1000);
			break;
			default: 
			MotorDir(BREAK, BREAK);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	4d d0       	rcall	.+154    	; 0x23a <MotorDir>
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <main+0x132>
			}
		}
		switch (status) {
			case 0: 
			MotorSpeed(250, 50);
			status = 1;
 1a2:	01 e0       	ldi	r16, 0x01	; 1
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <main+0x132>
			msleep(1000);
			break;
			case 1: 
			MotorSpeed(60,250);
			status = 2;
 1a8:	02 e0       	ldi	r16, 0x02	; 2
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <main+0x132>
			msleep(1000);
			break;
			case 2: 
			MotorSpeed(230, 200); 
			status = 0;
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
			msleep(1000);
			break;
			default: 
			MotorDir(BREAK, BREAK);
		}
		StatusLED(GREEN);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	17 d0       	rcall	.+46     	; 0x1e4 <StatusLED>
		BackLED(OFF, OFF);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	34 d0       	rcall	.+104    	; 0x224 <BackLED>
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	c8 2e       	mov	r12, r24
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	d8 2e       	mov	r13, r24
        sleep(36);
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	3d d1       	rcall	.+634    	; 0x442 <sleep>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	c8 1a       	sub	r12, r24
 1cc:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1ce:	c1 14       	cp	r12, r1
 1d0:	d1 04       	cpc	r13, r1
 1d2:	c1 f7       	brne	.-16     	; 0x1c4 <main+0x144>
 1d4:	67 cf       	rjmp	.-306    	; 0xa4 <main+0x24>

000001d6 <Init>:
 1d6:	13 d1       	rcall	.+550    	; 0x3fe <Timer2Init>
 1d8:	43 d0       	rcall	.+134    	; 0x260 <MotorInit>
 1da:	18 d0       	rcall	.+48     	; 0x20c <LEDInit>
 1dc:	47 d1       	rcall	.+654    	; 0x46c <ADCInit>
 1de:	c1 d0       	rcall	.+386    	; 0x362 <SwitchInit>
 1e0:	78 94       	sei
 1e2:	08 95       	ret

000001e4 <StatusLED>:
 1e4:	c0 98       	cbi	0x18, 0	; 24
 1e6:	92 98       	cbi	0x12, 2	; 18
 1e8:	80 fd       	sbrc	r24, 0
 1ea:	c0 9a       	sbi	0x18, 0	; 24
 1ec:	81 fd       	sbrc	r24, 1
 1ee:	92 9a       	sbi	0x12, 2	; 18
 1f0:	08 95       	ret

000001f2 <BackLEDFast>:
 1f2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1f4:	f8 94       	cli
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <BackLEDFast+0xe>
 1fa:	97 98       	cbi	0x12, 7	; 18
 1fc:	a1 9a       	sbi	0x14, 1	; 20
 1fe:	a0 9a       	sbi	0x14, 0	; 20
 200:	95 b3       	in	r25, 0x15	; 21
 202:	9c 7f       	andi	r25, 0xFC	; 252
 204:	98 2b       	or	r25, r24
 206:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 208:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 20a:	08 95       	ret

0000020c <LEDInit>:
 20c:	b8 9a       	sbi	0x17, 0	; 23
 20e:	81 b3       	in	r24, 0x11	; 17
 210:	84 6c       	ori	r24, 0xC4	; 196
 212:	81 bb       	out	0x11, r24	; 17
 214:	96 98       	cbi	0x12, 6	; 18
 216:	97 98       	cbi	0x12, 7	; 18
 218:	a1 9a       	sbi	0x14, 1	; 20
 21a:	a0 9a       	sbi	0x14, 0	; 20
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	e9 df       	rcall	.-46     	; 0x1f2 <BackLEDFast>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	e0 cf       	rjmp	.-64     	; 0x1e4 <StatusLED>

00000224 <BackLED>:
 224:	88 23       	and	r24, r24
 226:	11 f0       	breq	.+4      	; 0x22c <BackLED+0x8>
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	01 c0       	rjmp	.+2      	; 0x22e <BackLED+0xa>
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	61 11       	cpse	r22, r1
 232:	01 c0       	rjmp	.+2      	; 0x236 <BackLED+0x12>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	89 2b       	or	r24, r25
 238:	dc cf       	rjmp	.-72     	; 0x1f2 <BackLEDFast>

0000023a <MotorDir>:
 23a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 23c:	f8 94       	cli
 23e:	92 b3       	in	r25, 0x12	; 18
 240:	9f 7c       	andi	r25, 0xCF	; 207
 242:	89 2b       	or	r24, r25
 244:	82 bb       	out	0x12, r24	; 18
 246:	88 b3       	in	r24, 0x18	; 24
 248:	8f 7c       	andi	r24, 0xCF	; 207
 24a:	68 2b       	or	r22, r24
 24c:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 24e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 250:	08 95       	ret

00000252 <MotorSpeed>:
 252:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 254:	f8 94       	cli
 256:	1b bc       	out	0x2b, r1	; 43
 258:	8a bd       	out	0x2a, r24	; 42
 25a:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 25c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 25e:	08 95       	ret

00000260 <MotorInit>:
 260:	87 b3       	in	r24, 0x17	; 23
 262:	86 63       	ori	r24, 0x36	; 54
 264:	87 bb       	out	0x17, r24	; 23
 266:	81 b3       	in	r24, 0x11	; 17
 268:	80 63       	ori	r24, 0x30	; 48
 26a:	81 bb       	out	0x11, r24	; 17
 26c:	81 ea       	ldi	r24, 0xA1	; 161
 26e:	8f bd       	out	0x2f, r24	; 47
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	8e bd       	out	0x2e, r24	; 46
 274:	89 b7       	in	r24, 0x39	; 57
 276:	83 7c       	andi	r24, 0xC3	; 195
 278:	89 bf       	out	0x39, r24	; 57
 27a:	60 e2       	ldi	r22, 0x20	; 32
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	dd df       	rcall	.-70     	; 0x23a <MotorDir>
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	e6 cf       	rjmp	.-52     	; 0x252 <MotorSpeed>

00000286 <LineData>:
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
 28e:	f4 d0       	rcall	.+488    	; 0x478 <__ADCBlockEnter>
 290:	18 2f       	mov	r17, r24
 292:	83 e4       	ldi	r24, 0x43	; 67
 294:	19 d1       	rcall	.+562    	; 0x4c8 <ADCSelectChannel>
 296:	21 d1       	rcall	.+578    	; 0x4da <ADCMeasure>
 298:	24 b1       	in	r18, 0x04	; 4
 29a:	35 b1       	in	r19, 0x05	; 5
 29c:	39 83       	std	Y+1, r19	; 0x01
 29e:	28 83       	st	Y, r18
 2a0:	82 e4       	ldi	r24, 0x42	; 66
 2a2:	12 d1       	rcall	.+548    	; 0x4c8 <ADCSelectChannel>
 2a4:	1a d1       	rcall	.+564    	; 0x4da <ADCMeasure>
 2a6:	24 b1       	in	r18, 0x04	; 4
 2a8:	35 b1       	in	r19, 0x05	; 5
 2aa:	3b 83       	std	Y+3, r19	; 0x03
 2ac:	2a 83       	std	Y+2, r18	; 0x02
 2ae:	81 2f       	mov	r24, r17
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	f2 c0       	rjmp	.+484    	; 0x49c <__ADCBlockLeave>

000002b8 <__vector_14>:
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	87 b1       	in	r24, 0x07	; 7
 2dc:	78 94       	sei
 2de:	81 36       	cpi	r24, 0x61	; 97
 2e0:	19 f0       	breq	.+6      	; 0x2e8 <__vector_14+0x30>
 2e2:	83 36       	cpi	r24, 0x63	; 99
 2e4:	a1 f0       	breq	.+40     	; 0x30e <__vector_14+0x56>
 2e6:	27 c0       	rjmp	.+78     	; 0x336 <__vector_14+0x7e>
 2e8:	80 91 67 00 	lds	r24, 0x0067
 2ec:	82 fd       	sbrc	r24, 2
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_14+0x3c>
 2f0:	80 e6       	ldi	r24, 0x60	; 96
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <__vector_14+0x3e>
 2f4:	82 e6       	ldi	r24, 0x62	; 98
 2f6:	f8 94       	cli
 2f8:	95 b1       	in	r25, 0x05	; 5
 2fa:	90 93 69 00 	sts	0x0069, r25
 2fe:	90 91 64 00 	lds	r25, 0x0064
 302:	90 93 68 00 	sts	0x0068, r25
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	90 93 6c 00 	sts	0x006C, r25
 30c:	12 c0       	rjmp	.+36     	; 0x332 <__vector_14+0x7a>
 30e:	80 91 67 00 	lds	r24, 0x0067
 312:	80 ff       	sbrs	r24, 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <__vector_14+0x62>
 316:	80 e6       	ldi	r24, 0x60	; 96
 318:	01 c0       	rjmp	.+2      	; 0x31c <__vector_14+0x64>
 31a:	82 e6       	ldi	r24, 0x62	; 98
 31c:	f8 94       	cli
 31e:	95 b1       	in	r25, 0x05	; 5
 320:	90 93 6b 00 	sts	0x006B, r25
 324:	90 91 64 00 	lds	r25, 0x0064
 328:	90 93 6a 00 	sts	0x006A, r25
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	90 93 66 00 	sts	0x0066, r25
 332:	78 94       	sei
 334:	04 c0       	rjmp	.+8      	; 0x33e <__vector_14+0x86>
 336:	95 b1       	in	r25, 0x05	; 5
 338:	90 93 64 00 	sts	0x0064, r25
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	d1 d0       	rcall	.+418    	; 0x4e2 <ADCInterruptEnable>
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <SwitchInit>:
 362:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 364:	f8 94       	cli
 366:	8b b7       	in	r24, 0x3b	; 59
 368:	8f 77       	andi	r24, 0x7F	; 127
 36a:	8b bf       	out	0x3b, r24	; 59
 36c:	85 b7       	in	r24, 0x35	; 53
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	84 60       	ori	r24, 0x04	; 4
 372:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 374:	9f bf       	out	0x3f, r25	; 63
 376:	a4 98       	cbi	0x14, 4	; 20
 378:	85 b3       	in	r24, 0x15	; 21
 37a:	80 71       	andi	r24, 0x10	; 16
 37c:	85 bb       	out	0x15, r24	; 21
 37e:	8b 98       	cbi	0x11, 3	; 17
 380:	93 98       	cbi	0x12, 3	; 18
 382:	10 92 6d 00 	sts	0x006D, r1
 386:	08 95       	ret

00000388 <PollSwitch>:
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	93 9a       	sbi	0x12, 3	; 18
 392:	8b 9a       	sbi	0x11, 3	; 17
 394:	71 d0       	rcall	.+226    	; 0x478 <__ADCBlockEnter>
 396:	08 2f       	mov	r16, r24
 398:	84 e4       	ldi	r24, 0x44	; 68
 39a:	96 d0       	rcall	.+300    	; 0x4c8 <ADCSelectChannel>
 39c:	14 e0       	ldi	r17, 0x04	; 4
 39e:	c0 e0       	ldi	r28, 0x00	; 0
 3a0:	d0 e0       	ldi	r29, 0x00	; 0
 3a2:	9b d0       	rcall	.+310    	; 0x4da <ADCMeasure>
 3a4:	24 b1       	in	r18, 0x04	; 4
 3a6:	35 b1       	in	r19, 0x05	; 5
 3a8:	c2 0f       	add	r28, r18
 3aa:	d3 1f       	adc	r29, r19
 3ac:	11 50       	subi	r17, 0x01	; 1
 3ae:	c9 f7       	brne	.-14     	; 0x3a2 <PollSwitch+0x1a>
 3b0:	80 2f       	mov	r24, r16
 3b2:	74 d0       	rcall	.+232    	; 0x49c <__ADCBlockLeave>
 3b4:	8b 98       	cbi	0x11, 3	; 17
 3b6:	93 98       	cbi	0x12, 3	; 18
 3b8:	be 01       	movw	r22, r28
 3ba:	76 95       	lsr	r23
 3bc:	67 95       	ror	r22
 3be:	76 95       	lsr	r23
 3c0:	67 95       	ror	r22
 3c2:	cb 01       	movw	r24, r22
 3c4:	96 95       	lsr	r25
 3c6:	87 95       	ror	r24
 3c8:	98 50       	subi	r25, 0x08	; 8
 3ca:	a0 d0       	rcall	.+320    	; 0x50c <__udivmodhi4>
 3cc:	82 ec       	ldi	r24, 0xC2	; 194
 3ce:	86 0f       	add	r24, r22
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <__vector_2>:
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	8f 93       	push	r24
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 6d 00 	sts	0x006D, r24
 3ec:	8b b7       	in	r24, 0x3b	; 59
 3ee:	8f 77       	andi	r24, 0x7F	; 127
 3f0:	8b bf       	out	0x3b, r24	; 59
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <Timer2Init>:
 3fe:	12 bc       	out	0x22, r1	; 34
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	85 bd       	out	0x25, r24	; 37
 404:	89 b7       	in	r24, 0x39	; 57
 406:	80 64       	ori	r24, 0x40	; 64
 408:	89 bf       	out	0x39, r24	; 57
 40a:	81 e9       	ldi	r24, 0x91	; 145
 40c:	83 bd       	out	0x23, r24	; 35
 40e:	85 b5       	in	r24, 0x25	; 37
 410:	87 78       	andi	r24, 0x87	; 135
 412:	85 bd       	out	0x25, r24	; 37
 414:	bb 9a       	sbi	0x17, 3	; 23
 416:	c3 98       	cbi	0x18, 3	; 24
 418:	08 95       	ret

0000041a <__vector_4>:
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	84 b5       	in	r24, 0x24	; 36
 428:	8b 5d       	subi	r24, 0xDB	; 219
 42a:	84 bd       	out	0x24, r24	; 36
 42c:	80 91 6e 00 	lds	r24, 0x006E
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 6e 00 	sts	0x006E, r24
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <sleep>:
 442:	f8 94       	cli
 444:	95 b7       	in	r25, 0x35	; 53
 446:	9f 70       	andi	r25, 0x0F	; 15
 448:	90 68       	ori	r25, 0x80	; 128
 44a:	95 bf       	out	0x35, r25	; 53
 44c:	78 94       	sei
 44e:	90 91 6e 00 	lds	r25, 0x006E
 452:	89 0f       	add	r24, r25
 454:	90 91 6e 00 	lds	r25, 0x006E
 458:	98 17       	cp	r25, r24
 45a:	11 f0       	breq	.+4      	; 0x460 <__stack+0x1>
 45c:	88 95       	sleep
 45e:	fa cf       	rjmp	.-12     	; 0x454 <sleep+0x12>
 460:	f8 94       	cli
 462:	85 b7       	in	r24, 0x35	; 53
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	85 bf       	out	0x35, r24	; 53
 468:	78 94       	sei
 46a:	08 95       	ret

0000046c <ADCInit>:
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	80 93 65 00 	sts	0x0065, r24
 472:	86 e0       	ldi	r24, 0x06	; 6
 474:	86 b9       	out	0x06, r24	; 6
 476:	08 95       	ret

00000478 <__ADCBlockEnter>:
 478:	2f b7       	in	r18, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	87 b1       	in	r24, 0x07	; 7
 47e:	96 b1       	in	r25, 0x06	; 6
 480:	39 2f       	mov	r19, r25
 482:	38 78       	andi	r19, 0x88	; 136
 484:	31 f0       	breq	.+12     	; 0x492 <__ADCBlockEnter+0x1a>
 486:	93 ff       	sbrs	r25, 3
 488:	05 c0       	rjmp	.+10     	; 0x494 <__ADCBlockEnter+0x1c>
 48a:	80 93 65 00 	sts	0x0065, r24
 48e:	86 e8       	ldi	r24, 0x86	; 134
 490:	86 b9       	out	0x06, r24	; 6
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	2f bf       	out	0x3f, r18	; 63
 496:	36 99       	sbic	0x06, 6	; 6
 498:	fe cf       	rjmp	.-4      	; 0x496 <__ADCBlockEnter+0x1e>
 49a:	08 95       	ret

0000049c <__ADCBlockLeave>:
 49c:	3f b7       	in	r19, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	8f 3f       	cpi	r24, 0xFF	; 255
 4a2:	31 f4       	brne	.+12     	; 0x4b0 <__ADCBlockLeave+0x14>
 4a4:	80 91 65 00 	lds	r24, 0x0065
 4a8:	8f 3f       	cpi	r24, 0xFF	; 255
 4aa:	51 f0       	breq	.+20     	; 0x4c0 <__ADCBlockLeave+0x24>
 4ac:	2e ed       	ldi	r18, 0xDE	; 222
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__ADCBlockLeave+0x16>
 4b0:	26 ed       	ldi	r18, 0xD6	; 214
 4b2:	97 b1       	in	r25, 0x07	; 7
 4b4:	98 27       	eor	r25, r24
 4b6:	90 7c       	andi	r25, 0xC0	; 192
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__ADCBlockLeave+0x20>
 4ba:	16 b8       	out	0x06, r1	; 6
 4bc:	87 b9       	out	0x07, r24	; 7
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <__ADCBlockLeave+0x26>
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	26 b9       	out	0x06, r18	; 6
 4c4:	3f bf       	out	0x3f, r19	; 63
 4c6:	08 95       	ret

000004c8 <ADCSelectChannel>:
 4c8:	97 b1       	in	r25, 0x07	; 7
 4ca:	98 27       	eor	r25, r24
 4cc:	90 7c       	andi	r25, 0xC0	; 192
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <ADCSelectChannel+0xa>
 4d0:	16 b8       	out	0x06, r1	; 6
 4d2:	96 e8       	ldi	r25, 0x86	; 134
 4d4:	96 b9       	out	0x06, r25	; 6
 4d6:	87 b9       	out	0x07, r24	; 7
 4d8:	08 95       	ret

000004da <ADCMeasure>:
 4da:	36 9a       	sbi	0x06, 6	; 6
 4dc:	36 99       	sbic	0x06, 6	; 6
 4de:	fe cf       	rjmp	.-4      	; 0x4dc <ADCMeasure+0x2>
 4e0:	08 95       	ret

000004e2 <ADCInterruptEnable>:
 4e2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4e4:	f8 94       	cli
 4e6:	96 b1       	in	r25, 0x06	; 6
 4e8:	97 ff       	sbrs	r25, 7
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <ADCInterruptEnable+0xe>
 4ec:	93 ff       	sbrs	r25, 3
 4ee:	0a c0       	rjmp	.+20     	; 0x504 <ADCInterruptEnable+0x22>
 4f0:	97 b1       	in	r25, 0x07	; 7
 4f2:	98 27       	eor	r25, r24
 4f4:	90 7c       	andi	r25, 0xC0	; 192
 4f6:	09 f0       	breq	.+2      	; 0x4fa <ADCInterruptEnable+0x18>
 4f8:	16 b8       	out	0x06, r1	; 6
 4fa:	36 99       	sbic	0x06, 6	; 6
 4fc:	16 b8       	out	0x06, r1	; 6
 4fe:	87 b9       	out	0x07, r24	; 7
 500:	9e ed       	ldi	r25, 0xDE	; 222
 502:	96 b9       	out	0x06, r25	; 6
 504:	80 93 65 00 	sts	0x0065, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 508:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 50a:	08 95       	ret

0000050c <__udivmodhi4>:
 50c:	aa 1b       	sub	r26, r26
 50e:	bb 1b       	sub	r27, r27
 510:	51 e1       	ldi	r21, 0x11	; 17
 512:	07 c0       	rjmp	.+14     	; 0x522 <__udivmodhi4_ep>

00000514 <__udivmodhi4_loop>:
 514:	aa 1f       	adc	r26, r26
 516:	bb 1f       	adc	r27, r27
 518:	a6 17       	cp	r26, r22
 51a:	b7 07       	cpc	r27, r23
 51c:	10 f0       	brcs	.+4      	; 0x522 <__udivmodhi4_ep>
 51e:	a6 1b       	sub	r26, r22
 520:	b7 0b       	sbc	r27, r23

00000522 <__udivmodhi4_ep>:
 522:	88 1f       	adc	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	5a 95       	dec	r21
 528:	a9 f7       	brne	.-22     	; 0x514 <__udivmodhi4_loop>
 52a:	80 95       	com	r24
 52c:	90 95       	com	r25
 52e:	bc 01       	movw	r22, r24
 530:	cd 01       	movw	r24, r26
 532:	08 95       	ret

00000534 <__divmodhi4>:
 534:	97 fb       	bst	r25, 7
 536:	07 2e       	mov	r0, r23
 538:	16 f4       	brtc	.+4      	; 0x53e <__divmodhi4+0xa>
 53a:	00 94       	com	r0
 53c:	06 d0       	rcall	.+12     	; 0x54a <__divmodhi4_neg1>
 53e:	77 fd       	sbrc	r23, 7
 540:	08 d0       	rcall	.+16     	; 0x552 <__divmodhi4_neg2>
 542:	e4 df       	rcall	.-56     	; 0x50c <__udivmodhi4>
 544:	07 fc       	sbrc	r0, 7
 546:	05 d0       	rcall	.+10     	; 0x552 <__divmodhi4_neg2>
 548:	3e f4       	brtc	.+14     	; 0x558 <__divmodhi4_exit>

0000054a <__divmodhi4_neg1>:
 54a:	90 95       	com	r25
 54c:	81 95       	neg	r24
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__divmodhi4_neg2>:
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255

00000558 <__divmodhi4_exit>:
 558:	08 95       	ret

0000055a <do_rand>:
 55a:	8f 92       	push	r8
 55c:	9f 92       	push	r9
 55e:	af 92       	push	r10
 560:	bf 92       	push	r11
 562:	cf 92       	push	r12
 564:	df 92       	push	r13
 566:	ef 92       	push	r14
 568:	ff 92       	push	r15
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
 570:	68 81       	ld	r22, Y
 572:	79 81       	ldd	r23, Y+1	; 0x01
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	9b 81       	ldd	r25, Y+3	; 0x03
 578:	61 15       	cp	r22, r1
 57a:	71 05       	cpc	r23, r1
 57c:	81 05       	cpc	r24, r1
 57e:	91 05       	cpc	r25, r1
 580:	21 f4       	brne	.+8      	; 0x58a <do_rand+0x30>
 582:	64 e2       	ldi	r22, 0x24	; 36
 584:	79 ed       	ldi	r23, 0xD9	; 217
 586:	8b e5       	ldi	r24, 0x5B	; 91
 588:	97 e0       	ldi	r25, 0x07	; 7
 58a:	2d e1       	ldi	r18, 0x1D	; 29
 58c:	33 ef       	ldi	r19, 0xF3	; 243
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	3a d0       	rcall	.+116    	; 0x608 <__divmodsi4>
 594:	49 01       	movw	r8, r18
 596:	5a 01       	movw	r10, r20
 598:	9b 01       	movw	r18, r22
 59a:	ac 01       	movw	r20, r24
 59c:	a7 ea       	ldi	r26, 0xA7	; 167
 59e:	b1 e4       	ldi	r27, 0x41	; 65
 5a0:	4f d0       	rcall	.+158    	; 0x640 <__muluhisi3>
 5a2:	6b 01       	movw	r12, r22
 5a4:	7c 01       	movw	r14, r24
 5a6:	ac ee       	ldi	r26, 0xEC	; 236
 5a8:	b4 ef       	ldi	r27, 0xF4	; 244
 5aa:	a5 01       	movw	r20, r10
 5ac:	94 01       	movw	r18, r8
 5ae:	54 d0       	rcall	.+168    	; 0x658 <__mulohisi3>
 5b0:	c6 0e       	add	r12, r22
 5b2:	d7 1e       	adc	r13, r23
 5b4:	e8 1e       	adc	r14, r24
 5b6:	f9 1e       	adc	r15, r25
 5b8:	f7 fe       	sbrs	r15, 7
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <do_rand+0x6e>
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	c8 1a       	sub	r12, r24
 5c0:	d1 08       	sbc	r13, r1
 5c2:	e1 08       	sbc	r14, r1
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	f8 0a       	sbc	r15, r24
 5c8:	c8 82       	st	Y, r12
 5ca:	d9 82       	std	Y+1, r13	; 0x01
 5cc:	ea 82       	std	Y+2, r14	; 0x02
 5ce:	fb 82       	std	Y+3, r15	; 0x03
 5d0:	c6 01       	movw	r24, r12
 5d2:	9f 77       	andi	r25, 0x7F	; 127
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	df 90       	pop	r13
 5de:	cf 90       	pop	r12
 5e0:	bf 90       	pop	r11
 5e2:	af 90       	pop	r10
 5e4:	9f 90       	pop	r9
 5e6:	8f 90       	pop	r8
 5e8:	08 95       	ret

000005ea <rand_r>:
 5ea:	b7 cf       	rjmp	.-146    	; 0x55a <do_rand>

000005ec <rand>:
 5ec:	80 e6       	ldi	r24, 0x60	; 96
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	b4 cf       	rjmp	.-152    	; 0x55a <do_rand>

000005f2 <srand>:
 5f2:	a0 e0       	ldi	r26, 0x00	; 0
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	80 93 60 00 	sts	0x0060, r24
 5fa:	90 93 61 00 	sts	0x0061, r25
 5fe:	a0 93 62 00 	sts	0x0062, r26
 602:	b0 93 63 00 	sts	0x0063, r27
 606:	08 95       	ret

00000608 <__divmodsi4>:
 608:	05 2e       	mov	r0, r21
 60a:	97 fb       	bst	r25, 7
 60c:	16 f4       	brtc	.+4      	; 0x612 <__divmodsi4+0xa>
 60e:	00 94       	com	r0
 610:	0f d0       	rcall	.+30     	; 0x630 <__negsi2>
 612:	57 fd       	sbrc	r21, 7
 614:	05 d0       	rcall	.+10     	; 0x620 <__divmodsi4_neg2>
 616:	24 d0       	rcall	.+72     	; 0x660 <__udivmodsi4>
 618:	07 fc       	sbrc	r0, 7
 61a:	02 d0       	rcall	.+4      	; 0x620 <__divmodsi4_neg2>
 61c:	46 f4       	brtc	.+16     	; 0x62e <__divmodsi4_exit>
 61e:	08 c0       	rjmp	.+16     	; 0x630 <__negsi2>

00000620 <__divmodsi4_neg2>:
 620:	50 95       	com	r21
 622:	40 95       	com	r20
 624:	30 95       	com	r19
 626:	21 95       	neg	r18
 628:	3f 4f       	sbci	r19, 0xFF	; 255
 62a:	4f 4f       	sbci	r20, 0xFF	; 255
 62c:	5f 4f       	sbci	r21, 0xFF	; 255

0000062e <__divmodsi4_exit>:
 62e:	08 95       	ret

00000630 <__negsi2>:
 630:	90 95       	com	r25
 632:	80 95       	com	r24
 634:	70 95       	com	r23
 636:	61 95       	neg	r22
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	08 95       	ret

00000640 <__muluhisi3>:
 640:	31 d0       	rcall	.+98     	; 0x6a4 <__umulhisi3>
 642:	a5 9f       	mul	r26, r21
 644:	90 0d       	add	r25, r0
 646:	b4 9f       	mul	r27, r20
 648:	90 0d       	add	r25, r0
 64a:	a4 9f       	mul	r26, r20
 64c:	80 0d       	add	r24, r0
 64e:	91 1d       	adc	r25, r1
 650:	11 24       	eor	r1, r1
 652:	08 95       	ret

00000654 <__mulshisi3>:
 654:	b7 ff       	sbrs	r27, 7
 656:	f4 cf       	rjmp	.-24     	; 0x640 <__muluhisi3>

00000658 <__mulohisi3>:
 658:	f3 df       	rcall	.-26     	; 0x640 <__muluhisi3>
 65a:	82 1b       	sub	r24, r18
 65c:	93 0b       	sbc	r25, r19
 65e:	08 95       	ret

00000660 <__udivmodsi4>:
 660:	a1 e2       	ldi	r26, 0x21	; 33
 662:	1a 2e       	mov	r1, r26
 664:	aa 1b       	sub	r26, r26
 666:	bb 1b       	sub	r27, r27
 668:	fd 01       	movw	r30, r26
 66a:	0d c0       	rjmp	.+26     	; 0x686 <__udivmodsi4_ep>

0000066c <__udivmodsi4_loop>:
 66c:	aa 1f       	adc	r26, r26
 66e:	bb 1f       	adc	r27, r27
 670:	ee 1f       	adc	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	a2 17       	cp	r26, r18
 676:	b3 07       	cpc	r27, r19
 678:	e4 07       	cpc	r30, r20
 67a:	f5 07       	cpc	r31, r21
 67c:	20 f0       	brcs	.+8      	; 0x686 <__udivmodsi4_ep>
 67e:	a2 1b       	sub	r26, r18
 680:	b3 0b       	sbc	r27, r19
 682:	e4 0b       	sbc	r30, r20
 684:	f5 0b       	sbc	r31, r21

00000686 <__udivmodsi4_ep>:
 686:	66 1f       	adc	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	1a 94       	dec	r1
 690:	69 f7       	brne	.-38     	; 0x66c <__udivmodsi4_loop>
 692:	60 95       	com	r22
 694:	70 95       	com	r23
 696:	80 95       	com	r24
 698:	90 95       	com	r25
 69a:	9b 01       	movw	r18, r22
 69c:	ac 01       	movw	r20, r24
 69e:	bd 01       	movw	r22, r26
 6a0:	cf 01       	movw	r24, r30
 6a2:	08 95       	ret

000006a4 <__umulhisi3>:
 6a4:	a2 9f       	mul	r26, r18
 6a6:	b0 01       	movw	r22, r0
 6a8:	b3 9f       	mul	r27, r19
 6aa:	c0 01       	movw	r24, r0
 6ac:	a3 9f       	mul	r26, r19
 6ae:	01 d0       	rcall	.+2      	; 0x6b2 <__umulhisi3+0xe>
 6b0:	b2 9f       	mul	r27, r18
 6b2:	70 0d       	add	r23, r0
 6b4:	81 1d       	adc	r24, r1
 6b6:	11 24       	eor	r1, r1
 6b8:	91 1d       	adc	r25, r1
 6ba:	08 95       	ret

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>
