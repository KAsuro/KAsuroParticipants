
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000005c8  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b6  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad1  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000858  00000000  00000000  00002949  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  000031a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005fe  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c52  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  000047bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	e8 c1       	rjmp	.+976    	; 0x3d6 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	06 c2       	rjmp	.+1036   	; 0x416 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	4b c1       	rjmp	.+662    	; 0x2b4 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	13 d0       	rcall	.+38     	; 0x6a <main>
  44:	75 c2       	rjmp	.+1258   	; 0x530 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  4e:	60 e0       	ldi	r22, 0x00	; 0
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	fd d0       	rcall	.+506    	; 0x24e <MotorSpeed>
	if (pause > 0)
  54:	1c 16       	cp	r1, r28
  56:	1d 06       	cpc	r1, r29
  58:	2c f4       	brge	.+10     	; 0x64 <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  5a:	84 e2       	ldi	r24, 0x24	; 36
  5c:	f0 d1       	rcall	.+992    	; 0x43e <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  5e:	21 97       	sbiw	r28, 0x01	; 1
  60:	20 97       	sbiw	r28, 0x00	; 0
  62:	d9 f7       	brne	.-10     	; 0x5a <stopAsuro+0x12>
		msleep(pause);
}
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	08 95       	ret

0000006a <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  6a:	cf 93       	push	r28
  6c:	df 93       	push	r29
  6e:	00 d0       	rcall	.+0      	; 0x70 <main+0x6>
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x8>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
    Init();
  76:	b8 d0       	rcall	.+368    	; 0x1e8 <Init>
    int status = 0;
    int sstatus = 0;
  78:	e1 2c       	mov	r14, r1
  7a:	f1 2c       	mov	r15, r1
#include "helpers.h"
#include <stdlib.h>

void main(void) {
    Init();
    int status = 0;
  7c:	00 e0       	ldi	r16, 0x00	; 0
  7e:	10 e0       	ldi	r17, 0x00	; 0
	//int x = 160;
	//int y = 200;
	//int i = 0;
	while (1) {  			//Hauptschleife
		//i++;
		char sensor = PollSwitch();
  80:	81 d1       	rcall	.+770    	; 0x384 <PollSwitch>
  82:	d8 2e       	mov	r13, r24
		sensor &= 0b00111111;
		MotorDir(FWD, FWD); //Werkeinstellung
  84:	60 e2       	ldi	r22, 0x20	; 32
  86:	80 e2       	ldi	r24, 0x20	; 32
  88:	d6 d0       	rcall	.+428    	; 0x236 <MotorDir>
		MotorSpeed(230, 200); 
  8a:	68 ec       	ldi	r22, 0xC8	; 200
  8c:	86 ee       	ldi	r24, 0xE6	; 230
  8e:	df d0       	rcall	.+446    	; 0x24e <MotorSpeed>
	//int y = 200;
	//int i = 0;
	while (1) {  			//Hauptschleife
		//i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  90:	8d 2d       	mov	r24, r13
  92:	8f 73       	andi	r24, 0x3F	; 63
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 200); 
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  94:	59 f4       	brne	.+22     	; 0xac <main+0x42>
		{
			 MotorDir(BWD, BWD); 
			 MotorSpeed(60, 150);
			 msleep(800);
		}
		MotorDir(FWD, FWD); 
  96:	60 e2       	ldi	r22, 0x20	; 32
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	cd d0       	rcall	.+410    	; 0x236 <MotorDir>
		uint16_t data[] = {0,0};
  9c:	1a 82       	std	Y+2, r1	; 0x02
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	1c 82       	std	Y+4, r1	; 0x04
  a2:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  a4:	ce 01       	movw	r24, r28
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	ec d0       	rcall	.+472    	; 0x282 <LineData>
  aa:	1b c0       	rjmp	.+54     	; 0xe2 <main+0x78>
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 200); 
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  ac:	60 e1       	ldi	r22, 0x10	; 16
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	c2 d0       	rcall	.+388    	; 0x236 <MotorDir>
			 MotorSpeed(60, 150);
  b2:	66 e9       	ldi	r22, 0x96	; 150
  b4:	8c e3       	ldi	r24, 0x3C	; 60
  b6:	cb d0       	rcall	.+406    	; 0x24e <MotorSpeed>
  b8:	30 e2       	ldi	r19, 0x20	; 32
  ba:	c3 2e       	mov	r12, r19
  bc:	33 e0       	ldi	r19, 0x03	; 3
  be:	d3 2e       	mov	r13, r19
        sleep(36);
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	bd d1       	rcall	.+890    	; 0x43e <sleep>
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	c2 1a       	sub	r12, r18
  c8:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  ca:	c1 14       	cp	r12, r1
  cc:	d1 04       	cpc	r13, r1
  ce:	c1 f7       	brne	.-16     	; 0xc0 <main+0x56>
  d0:	e2 cf       	rjmp	.-60     	; 0x96 <main+0x2c>
		MotorDir(FWD, FWD); 
		uint16_t data[] = {0,0};
		LineData(data);
		
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	9c 81       	ldd	r25, Y+4	; 0x04
  d6:	85 3f       	cpi	r24, 0xF5	; 245
  d8:	91 40       	sbci	r25, 0x01	; 1
  da:	60 f0       	brcs	.+24     	; 0xf4 <main+0x8a>
		{	
			stopAsuro(500);
  dc:	84 ef       	ldi	r24, 0xF4	; 244
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	b3 df       	rcall	.-154    	; 0x48 <stopAsuro>
			LineData(data);
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	cd d0       	rcall	.+410    	; 0x282 <LineData>
		MotorDir(FWD, FWD); 
		uint16_t data[] = {0,0};
		LineData(data);
		
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	85 3f       	cpi	r24, 0xF5	; 245
  ee:	91 40       	sbci	r25, 0x01	; 1
  f0:	80 f3       	brcs	.-32     	; 0xd2 <main+0x68>
  f2:	f4 cf       	rjmp	.-24     	; 0xdc <main+0x72>
				
				stopAsuro(3000);
				
			}
		}*/
		switch (status) {
  f4:	01 30       	cpi	r16, 0x01	; 1
  f6:	11 05       	cpc	r17, r1
  f8:	f1 f0       	breq	.+60     	; 0x136 <main+0xcc>
  fa:	4c f4       	brge	.+18     	; 0x10e <main+0xa4>
  fc:	01 15       	cp	r16, r1
  fe:	11 05       	cpc	r17, r1
 100:	e1 f5       	brne	.+120    	; 0x17a <main+0x110>
			
			case 0: 
			MotorSpeed(250, 220);
 102:	6c ed       	ldi	r22, 0xDC	; 220
 104:	8a ef       	ldi	r24, 0xFA	; 250
 106:	a3 d0       	rcall	.+326    	; 0x24e <MotorSpeed>
 108:	00 ea       	ldi	r16, 0xA0	; 160
 10a:	1f e0       	ldi	r17, 0x0F	; 15
 10c:	0c c0       	rjmp	.+24     	; 0x126 <main+0xbc>
				
				stopAsuro(3000);
				
			}
		}*/
		switch (status) {
 10e:	02 30       	cpi	r16, 0x02	; 2
 110:	11 05       	cpc	r17, r1
 112:	f1 f0       	breq	.+60     	; 0x150 <main+0xe6>
 114:	03 30       	cpi	r16, 0x03	; 3
 116:	11 05       	cpc	r17, r1
 118:	81 f5       	brne	.+96     	; 0x17a <main+0x110>
			status = 3;
			msleep(4000);
			break;
			
			case 3: 
			MotorSpeed(235, 260); 
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	8b ee       	ldi	r24, 0xEB	; 235
 11e:	97 d0       	rcall	.+302    	; 0x24e <MotorSpeed>
 120:	00 ea       	ldi	r16, 0xA0	; 160
 122:	1f e0       	ldi	r17, 0x0F	; 15
 124:	22 c0       	rjmp	.+68     	; 0x16a <main+0x100>
        sleep(36);
 126:	84 e2       	ldi	r24, 0x24	; 36
 128:	8a d1       	rcall	.+788    	; 0x43e <sleep>
 12a:	01 50       	subi	r16, 0x01	; 1
 12c:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 12e:	01 15       	cp	r16, r1
 130:	11 05       	cpc	r17, r1
 132:	c9 f7       	brne	.-14     	; 0x126 <main+0xbc>
 134:	26 c0       	rjmp	.+76     	; 0x182 <main+0x118>
			status = 1;
			msleep(4000);
			break;
			
			case 1: 
			MotorSpeed(80,140);
 136:	6c e8       	ldi	r22, 0x8C	; 140
 138:	80 e5       	ldi	r24, 0x50	; 80
 13a:	89 d0       	rcall	.+274    	; 0x24e <MotorSpeed>
 13c:	08 ee       	ldi	r16, 0xE8	; 232
 13e:	13 e0       	ldi	r17, 0x03	; 3
        sleep(36);
 140:	84 e2       	ldi	r24, 0x24	; 36
 142:	7d d1       	rcall	.+762    	; 0x43e <sleep>
 144:	01 50       	subi	r16, 0x01	; 1
 146:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 148:	01 15       	cp	r16, r1
 14a:	11 05       	cpc	r17, r1
 14c:	c9 f7       	brne	.-14     	; 0x140 <main+0xd6>
 14e:	1c c0       	rjmp	.+56     	; 0x188 <main+0x11e>
			status = 2;
			msleep(1000);
			break;
			
			case 2: 
			MotorSpeed(220, 205); 
 150:	6d ec       	ldi	r22, 0xCD	; 205
 152:	8c ed       	ldi	r24, 0xDC	; 220
 154:	7c d0       	rcall	.+248    	; 0x24e <MotorSpeed>
 156:	00 ea       	ldi	r16, 0xA0	; 160
 158:	1f e0       	ldi	r17, 0x0F	; 15
        sleep(36);
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	70 d1       	rcall	.+736    	; 0x43e <sleep>
 15e:	01 50       	subi	r16, 0x01	; 1
 160:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 162:	01 15       	cp	r16, r1
 164:	11 05       	cpc	r17, r1
 166:	c9 f7       	brne	.-14     	; 0x15a <main+0xf0>
 168:	12 c0       	rjmp	.+36     	; 0x18e <main+0x124>
        sleep(36);
 16a:	84 e2       	ldi	r24, 0x24	; 36
 16c:	68 d1       	rcall	.+720    	; 0x43e <sleep>
 16e:	01 50       	subi	r16, 0x01	; 1
 170:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 172:	01 15       	cp	r16, r1
 174:	11 05       	cpc	r17, r1
 176:	c9 f7       	brne	.-14     	; 0x16a <main+0x100>
 178:	0d c0       	rjmp	.+26     	; 0x194 <main+0x12a>
			status = 0;
			msleep(4000);
			break;
			
			default: 
			MotorDir(BREAK, BREAK);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	5b d0       	rcall	.+182    	; 0x236 <MotorDir>
 180:	0b c0       	rjmp	.+22     	; 0x198 <main+0x12e>
		}*/
		switch (status) {
			
			case 0: 
			MotorSpeed(250, 220);
			status = 1;
 182:	01 e0       	ldi	r16, 0x01	; 1
 184:	10 e0       	ldi	r17, 0x00	; 0
 186:	08 c0       	rjmp	.+16     	; 0x198 <main+0x12e>
			msleep(4000);
			break;
			
			case 1: 
			MotorSpeed(80,140);
			status = 2;
 188:	02 e0       	ldi	r16, 0x02	; 2
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	05 c0       	rjmp	.+10     	; 0x198 <main+0x12e>
			msleep(1000);
			break;
			
			case 2: 
			MotorSpeed(220, 205); 
			status = 3;
 18e:	03 e0       	ldi	r16, 0x03	; 3
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x12e>
			msleep(4000);
			break;
			
			case 3: 
			MotorSpeed(235, 260); 
			status = 0;
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	10 e0       	ldi	r17, 0x00	; 0
			
			default: 
			MotorDir(BREAK, BREAK);
		}
		
		switch (sstatus)
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	e8 16       	cp	r14, r24
 19c:	f1 04       	cpc	r15, r1
 19e:	69 f0       	breq	.+26     	; 0x1ba <main+0x150>
 1a0:	22 e0       	ldi	r18, 0x02	; 2
 1a2:	e2 16       	cp	r14, r18
 1a4:	f1 04       	cpc	r15, r1
 1a6:	79 f0       	breq	.+30     	; 0x1c6 <main+0x15c>
 1a8:	e1 14       	cp	r14, r1
 1aa:	f1 04       	cpc	r15, r1
 1ac:	81 f4       	brne	.+32     	; 0x1ce <main+0x164>
		{
			case 0:
			StatusLED(RED);
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	22 d0       	rcall	.+68     	; 0x1f6 <StatusLED>
			sstatus = 1;
 1b2:	ee 24       	eor	r14, r14
 1b4:	e3 94       	inc	r14
 1b6:	f1 2c       	mov	r15, r1
			break;
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <main+0x164>
			
			case 1:
			StatusLED(GREEN);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	1c d0       	rcall	.+56     	; 0x1f6 <StatusLED>
			sstatus = 2;
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	e9 2e       	mov	r14, r25
 1c2:	f1 2c       	mov	r15, r1
			break;
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <main+0x164>
			
			case 2:
			StatusLED(YELLOW);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	16 d0       	rcall	.+44     	; 0x1f6 <StatusLED>
			sstatus = 0;
 1ca:	e1 2c       	mov	r14, r1
 1cc:	f1 2c       	mov	r15, r1
 1ce:	84 ef       	ldi	r24, 0xF4	; 244
 1d0:	c8 2e       	mov	r12, r24
 1d2:	dd 24       	eor	r13, r13
 1d4:	d3 94       	inc	r13
        sleep(36);
 1d6:	84 e2       	ldi	r24, 0x24	; 36
 1d8:	32 d1       	rcall	.+612    	; 0x43e <sleep>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	c8 1a       	sub	r12, r24
 1de:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1e0:	c1 14       	cp	r12, r1
 1e2:	d1 04       	cpc	r13, r1
 1e4:	c1 f7       	brne	.-16     	; 0x1d6 <main+0x16c>
 1e6:	4c cf       	rjmp	.-360    	; 0x80 <main+0x16>

000001e8 <Init>:
 1e8:	08 d1       	rcall	.+528    	; 0x3fa <Timer2Init>
 1ea:	38 d0       	rcall	.+112    	; 0x25c <MotorInit>
 1ec:	18 d0       	rcall	.+48     	; 0x21e <LEDInit>
 1ee:	3c d1       	rcall	.+632    	; 0x468 <ADCInit>
 1f0:	b6 d0       	rcall	.+364    	; 0x35e <SwitchInit>
 1f2:	78 94       	sei
 1f4:	08 95       	ret

000001f6 <StatusLED>:
 1f6:	c0 98       	cbi	0x18, 0	; 24
 1f8:	92 98       	cbi	0x12, 2	; 18
 1fa:	80 fd       	sbrc	r24, 0
 1fc:	c0 9a       	sbi	0x18, 0	; 24
 1fe:	81 fd       	sbrc	r24, 1
 200:	92 9a       	sbi	0x12, 2	; 18
 202:	08 95       	ret

00000204 <BackLEDFast>:
 204:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 206:	f8 94       	cli
 208:	88 23       	and	r24, r24
 20a:	19 f0       	breq	.+6      	; 0x212 <BackLEDFast+0xe>
 20c:	97 98       	cbi	0x12, 7	; 18
 20e:	a1 9a       	sbi	0x14, 1	; 20
 210:	a0 9a       	sbi	0x14, 0	; 20
 212:	95 b3       	in	r25, 0x15	; 21
 214:	9c 7f       	andi	r25, 0xFC	; 252
 216:	98 2b       	or	r25, r24
 218:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 21a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 21c:	08 95       	ret

0000021e <LEDInit>:
 21e:	b8 9a       	sbi	0x17, 0	; 23
 220:	81 b3       	in	r24, 0x11	; 17
 222:	84 6c       	ori	r24, 0xC4	; 196
 224:	81 bb       	out	0x11, r24	; 17
 226:	96 98       	cbi	0x12, 6	; 18
 228:	97 98       	cbi	0x12, 7	; 18
 22a:	a1 9a       	sbi	0x14, 1	; 20
 22c:	a0 9a       	sbi	0x14, 0	; 20
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	e9 df       	rcall	.-46     	; 0x204 <BackLEDFast>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	e0 cf       	rjmp	.-64     	; 0x1f6 <StatusLED>

00000236 <MotorDir>:
 236:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 238:	f8 94       	cli
 23a:	92 b3       	in	r25, 0x12	; 18
 23c:	9f 7c       	andi	r25, 0xCF	; 207
 23e:	89 2b       	or	r24, r25
 240:	82 bb       	out	0x12, r24	; 18
 242:	88 b3       	in	r24, 0x18	; 24
 244:	8f 7c       	andi	r24, 0xCF	; 207
 246:	68 2b       	or	r22, r24
 248:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 24a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 24c:	08 95       	ret

0000024e <MotorSpeed>:
 24e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 250:	f8 94       	cli
 252:	1b bc       	out	0x2b, r1	; 43
 254:	8a bd       	out	0x2a, r24	; 42
 256:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 258:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 25a:	08 95       	ret

0000025c <MotorInit>:
 25c:	87 b3       	in	r24, 0x17	; 23
 25e:	86 63       	ori	r24, 0x36	; 54
 260:	87 bb       	out	0x17, r24	; 23
 262:	81 b3       	in	r24, 0x11	; 17
 264:	80 63       	ori	r24, 0x30	; 48
 266:	81 bb       	out	0x11, r24	; 17
 268:	81 ea       	ldi	r24, 0xA1	; 161
 26a:	8f bd       	out	0x2f, r24	; 47
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	8e bd       	out	0x2e, r24	; 46
 270:	89 b7       	in	r24, 0x39	; 57
 272:	83 7c       	andi	r24, 0xC3	; 195
 274:	89 bf       	out	0x39, r24	; 57
 276:	60 e2       	ldi	r22, 0x20	; 32
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	dd df       	rcall	.-70     	; 0x236 <MotorDir>
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	e6 cf       	rjmp	.-52     	; 0x24e <MotorSpeed>

00000282 <LineData>:
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
 28a:	f4 d0       	rcall	.+488    	; 0x474 <__ADCBlockEnter>
 28c:	18 2f       	mov	r17, r24
 28e:	83 e4       	ldi	r24, 0x43	; 67
 290:	19 d1       	rcall	.+562    	; 0x4c4 <ADCSelectChannel>
 292:	21 d1       	rcall	.+578    	; 0x4d6 <ADCMeasure>
 294:	24 b1       	in	r18, 0x04	; 4
 296:	35 b1       	in	r19, 0x05	; 5
 298:	39 83       	std	Y+1, r19	; 0x01
 29a:	28 83       	st	Y, r18
 29c:	82 e4       	ldi	r24, 0x42	; 66
 29e:	12 d1       	rcall	.+548    	; 0x4c4 <ADCSelectChannel>
 2a0:	1a d1       	rcall	.+564    	; 0x4d6 <ADCMeasure>
 2a2:	24 b1       	in	r18, 0x04	; 4
 2a4:	35 b1       	in	r19, 0x05	; 5
 2a6:	3b 83       	std	Y+3, r19	; 0x03
 2a8:	2a 83       	std	Y+2, r18	; 0x02
 2aa:	81 2f       	mov	r24, r17
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	f2 c0       	rjmp	.+484    	; 0x498 <__ADCBlockLeave>

000002b4 <__vector_14>:
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	87 b1       	in	r24, 0x07	; 7
 2d8:	78 94       	sei
 2da:	81 36       	cpi	r24, 0x61	; 97
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <__vector_14+0x30>
 2de:	83 36       	cpi	r24, 0x63	; 99
 2e0:	a1 f0       	breq	.+40     	; 0x30a <__vector_14+0x56>
 2e2:	27 c0       	rjmp	.+78     	; 0x332 <__vector_14+0x7e>
 2e4:	80 91 63 00 	lds	r24, 0x0063
 2e8:	82 fd       	sbrc	r24, 2
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__vector_14+0x3c>
 2ec:	80 e6       	ldi	r24, 0x60	; 96
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <__vector_14+0x3e>
 2f0:	82 e6       	ldi	r24, 0x62	; 98
 2f2:	f8 94       	cli
 2f4:	95 b1       	in	r25, 0x05	; 5
 2f6:	90 93 65 00 	sts	0x0065, r25
 2fa:	90 91 60 00 	lds	r25, 0x0060
 2fe:	90 93 64 00 	sts	0x0064, r25
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	90 93 68 00 	sts	0x0068, r25
 308:	12 c0       	rjmp	.+36     	; 0x32e <__vector_14+0x7a>
 30a:	80 91 63 00 	lds	r24, 0x0063
 30e:	80 ff       	sbrs	r24, 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <__vector_14+0x62>
 312:	80 e6       	ldi	r24, 0x60	; 96
 314:	01 c0       	rjmp	.+2      	; 0x318 <__vector_14+0x64>
 316:	82 e6       	ldi	r24, 0x62	; 98
 318:	f8 94       	cli
 31a:	95 b1       	in	r25, 0x05	; 5
 31c:	90 93 67 00 	sts	0x0067, r25
 320:	90 91 60 00 	lds	r25, 0x0060
 324:	90 93 66 00 	sts	0x0066, r25
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 62 00 	sts	0x0062, r25
 32e:	78 94       	sei
 330:	04 c0       	rjmp	.+8      	; 0x33a <__vector_14+0x86>
 332:	95 b1       	in	r25, 0x05	; 5
 334:	90 93 60 00 	sts	0x0060, r25
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	d1 d0       	rcall	.+418    	; 0x4de <ADCInterruptEnable>
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <SwitchInit>:
 35e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 360:	f8 94       	cli
 362:	8b b7       	in	r24, 0x3b	; 59
 364:	8f 77       	andi	r24, 0x7F	; 127
 366:	8b bf       	out	0x3b, r24	; 59
 368:	85 b7       	in	r24, 0x35	; 53
 36a:	87 7f       	andi	r24, 0xF7	; 247
 36c:	84 60       	ori	r24, 0x04	; 4
 36e:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 370:	9f bf       	out	0x3f, r25	; 63
 372:	a4 98       	cbi	0x14, 4	; 20
 374:	85 b3       	in	r24, 0x15	; 21
 376:	80 71       	andi	r24, 0x10	; 16
 378:	85 bb       	out	0x15, r24	; 21
 37a:	8b 98       	cbi	0x11, 3	; 17
 37c:	93 98       	cbi	0x12, 3	; 18
 37e:	10 92 69 00 	sts	0x0069, r1
 382:	08 95       	ret

00000384 <PollSwitch>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	93 9a       	sbi	0x12, 3	; 18
 38e:	8b 9a       	sbi	0x11, 3	; 17
 390:	71 d0       	rcall	.+226    	; 0x474 <__ADCBlockEnter>
 392:	08 2f       	mov	r16, r24
 394:	84 e4       	ldi	r24, 0x44	; 68
 396:	96 d0       	rcall	.+300    	; 0x4c4 <ADCSelectChannel>
 398:	14 e0       	ldi	r17, 0x04	; 4
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	9b d0       	rcall	.+310    	; 0x4d6 <ADCMeasure>
 3a0:	24 b1       	in	r18, 0x04	; 4
 3a2:	35 b1       	in	r19, 0x05	; 5
 3a4:	c2 0f       	add	r28, r18
 3a6:	d3 1f       	adc	r29, r19
 3a8:	11 50       	subi	r17, 0x01	; 1
 3aa:	c9 f7       	brne	.-14     	; 0x39e <PollSwitch+0x1a>
 3ac:	80 2f       	mov	r24, r16
 3ae:	74 d0       	rcall	.+232    	; 0x498 <__ADCBlockLeave>
 3b0:	8b 98       	cbi	0x11, 3	; 17
 3b2:	93 98       	cbi	0x12, 3	; 18
 3b4:	be 01       	movw	r22, r28
 3b6:	76 95       	lsr	r23
 3b8:	67 95       	ror	r22
 3ba:	76 95       	lsr	r23
 3bc:	67 95       	ror	r22
 3be:	cb 01       	movw	r24, r22
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	98 50       	subi	r25, 0x08	; 8
 3c6:	a0 d0       	rcall	.+320    	; 0x508 <__udivmodhi4>
 3c8:	82 ec       	ldi	r24, 0xC2	; 194
 3ca:	86 0f       	add	r24, r22
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <__vector_2>:
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	8f 93       	push	r24
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 69 00 	sts	0x0069, r24
 3e8:	8b b7       	in	r24, 0x3b	; 59
 3ea:	8f 77       	andi	r24, 0x7F	; 127
 3ec:	8b bf       	out	0x3b, r24	; 59
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <Timer2Init>:
 3fa:	12 bc       	out	0x22, r1	; 34
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	85 bd       	out	0x25, r24	; 37
 400:	89 b7       	in	r24, 0x39	; 57
 402:	80 64       	ori	r24, 0x40	; 64
 404:	89 bf       	out	0x39, r24	; 57
 406:	81 e9       	ldi	r24, 0x91	; 145
 408:	83 bd       	out	0x23, r24	; 35
 40a:	85 b5       	in	r24, 0x25	; 37
 40c:	87 78       	andi	r24, 0x87	; 135
 40e:	85 bd       	out	0x25, r24	; 37
 410:	bb 9a       	sbi	0x17, 3	; 23
 412:	c3 98       	cbi	0x18, 3	; 24
 414:	08 95       	ret

00000416 <__vector_4>:
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	8f 93       	push	r24
 422:	84 b5       	in	r24, 0x24	; 36
 424:	8b 5d       	subi	r24, 0xDB	; 219
 426:	84 bd       	out	0x24, r24	; 36
 428:	80 91 6a 00 	lds	r24, 0x006A
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	80 93 6a 00 	sts	0x006A, r24
 432:	8f 91       	pop	r24
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <sleep>:
 43e:	f8 94       	cli
 440:	95 b7       	in	r25, 0x35	; 53
 442:	9f 70       	andi	r25, 0x0F	; 15
 444:	90 68       	ori	r25, 0x80	; 128
 446:	95 bf       	out	0x35, r25	; 53
 448:	78 94       	sei
 44a:	90 91 6a 00 	lds	r25, 0x006A
 44e:	89 0f       	add	r24, r25
 450:	90 91 6a 00 	lds	r25, 0x006A
 454:	98 17       	cp	r25, r24
 456:	11 f0       	breq	.+4      	; 0x45c <sleep+0x1e>
 458:	88 95       	sleep
 45a:	fa cf       	rjmp	.-12     	; 0x450 <sleep+0x12>
 45c:	f8 94       	cli
 45e:	85 b7       	in	r24, 0x35	; 53
 460:	8f 77       	andi	r24, 0x7F	; 127
 462:	85 bf       	out	0x35, r24	; 53
 464:	78 94       	sei
 466:	08 95       	ret

00000468 <ADCInit>:
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	80 93 61 00 	sts	0x0061, r24
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	86 b9       	out	0x06, r24	; 6
 472:	08 95       	ret

00000474 <__ADCBlockEnter>:
 474:	2f b7       	in	r18, 0x3f	; 63
 476:	f8 94       	cli
 478:	87 b1       	in	r24, 0x07	; 7
 47a:	96 b1       	in	r25, 0x06	; 6
 47c:	39 2f       	mov	r19, r25
 47e:	38 78       	andi	r19, 0x88	; 136
 480:	31 f0       	breq	.+12     	; 0x48e <__ADCBlockEnter+0x1a>
 482:	93 ff       	sbrs	r25, 3
 484:	05 c0       	rjmp	.+10     	; 0x490 <__ADCBlockEnter+0x1c>
 486:	80 93 61 00 	sts	0x0061, r24
 48a:	86 e8       	ldi	r24, 0x86	; 134
 48c:	86 b9       	out	0x06, r24	; 6
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	2f bf       	out	0x3f, r18	; 63
 492:	36 99       	sbic	0x06, 6	; 6
 494:	fe cf       	rjmp	.-4      	; 0x492 <__ADCBlockEnter+0x1e>
 496:	08 95       	ret

00000498 <__ADCBlockLeave>:
 498:	3f b7       	in	r19, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	8f 3f       	cpi	r24, 0xFF	; 255
 49e:	31 f4       	brne	.+12     	; 0x4ac <__ADCBlockLeave+0x14>
 4a0:	80 91 61 00 	lds	r24, 0x0061
 4a4:	8f 3f       	cpi	r24, 0xFF	; 255
 4a6:	51 f0       	breq	.+20     	; 0x4bc <__ADCBlockLeave+0x24>
 4a8:	2e ed       	ldi	r18, 0xDE	; 222
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__ADCBlockLeave+0x16>
 4ac:	26 ed       	ldi	r18, 0xD6	; 214
 4ae:	97 b1       	in	r25, 0x07	; 7
 4b0:	98 27       	eor	r25, r24
 4b2:	90 7c       	andi	r25, 0xC0	; 192
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__ADCBlockLeave+0x20>
 4b6:	16 b8       	out	0x06, r1	; 6
 4b8:	87 b9       	out	0x07, r24	; 7
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <__ADCBlockLeave+0x26>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	26 b9       	out	0x06, r18	; 6
 4c0:	3f bf       	out	0x3f, r19	; 63
 4c2:	08 95       	ret

000004c4 <ADCSelectChannel>:
 4c4:	97 b1       	in	r25, 0x07	; 7
 4c6:	98 27       	eor	r25, r24
 4c8:	90 7c       	andi	r25, 0xC0	; 192
 4ca:	09 f0       	breq	.+2      	; 0x4ce <ADCSelectChannel+0xa>
 4cc:	16 b8       	out	0x06, r1	; 6
 4ce:	96 e8       	ldi	r25, 0x86	; 134
 4d0:	96 b9       	out	0x06, r25	; 6
 4d2:	87 b9       	out	0x07, r24	; 7
 4d4:	08 95       	ret

000004d6 <ADCMeasure>:
 4d6:	36 9a       	sbi	0x06, 6	; 6
 4d8:	36 99       	sbic	0x06, 6	; 6
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <ADCMeasure+0x2>
 4dc:	08 95       	ret

000004de <ADCInterruptEnable>:
 4de:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4e0:	f8 94       	cli
 4e2:	96 b1       	in	r25, 0x06	; 6
 4e4:	97 ff       	sbrs	r25, 7
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <ADCInterruptEnable+0xe>
 4e8:	93 ff       	sbrs	r25, 3
 4ea:	0a c0       	rjmp	.+20     	; 0x500 <ADCInterruptEnable+0x22>
 4ec:	97 b1       	in	r25, 0x07	; 7
 4ee:	98 27       	eor	r25, r24
 4f0:	90 7c       	andi	r25, 0xC0	; 192
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <ADCInterruptEnable+0x18>
 4f4:	16 b8       	out	0x06, r1	; 6
 4f6:	36 99       	sbic	0x06, 6	; 6
 4f8:	16 b8       	out	0x06, r1	; 6
 4fa:	87 b9       	out	0x07, r24	; 7
 4fc:	9e ed       	ldi	r25, 0xDE	; 222
 4fe:	96 b9       	out	0x06, r25	; 6
 500:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 504:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 506:	08 95       	ret

00000508 <__udivmodhi4>:
 508:	aa 1b       	sub	r26, r26
 50a:	bb 1b       	sub	r27, r27
 50c:	51 e1       	ldi	r21, 0x11	; 17
 50e:	07 c0       	rjmp	.+14     	; 0x51e <__udivmodhi4_ep>

00000510 <__udivmodhi4_loop>:
 510:	aa 1f       	adc	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	a6 17       	cp	r26, r22
 516:	b7 07       	cpc	r27, r23
 518:	10 f0       	brcs	.+4      	; 0x51e <__udivmodhi4_ep>
 51a:	a6 1b       	sub	r26, r22
 51c:	b7 0b       	sbc	r27, r23

0000051e <__udivmodhi4_ep>:
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	5a 95       	dec	r21
 524:	a9 f7       	brne	.-22     	; 0x510 <__udivmodhi4_loop>
 526:	80 95       	com	r24
 528:	90 95       	com	r25
 52a:	bc 01       	movw	r22, r24
 52c:	cd 01       	movw	r24, r26
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
