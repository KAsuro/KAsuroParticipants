
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000057c  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015df  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8e  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000832  00000000  00000000  000027d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00003008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e2  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a6a  00000000  00000000  00003992  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	c2 c1       	rjmp	.+900    	; 0x38a <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	e0 c1       	rjmp	.+960    	; 0x3ca <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	25 c1       	rjmp	.+586    	; 0x268 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	16 d0       	rcall	.+44     	; 0x70 <main>
  44:	4f c2       	rjmp	.+1182   	; 0x4e4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) // While Schleife zum Blinken benötigt!
{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	ec 01       	movw	r28, r24
	int status = 0;
	MotorSpeed(0, 0);
  4e:	60 e0       	ldi	r22, 0x00	; 0
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	d7 d0       	rcall	.+430    	; 0x202 <MotorSpeed>
	if (status) { 				
		BackLED(ON, OFF);
		status = 0;
	} else {
		BackLED(OFF, ON);
  54:	61 e0       	ldi	r22, 0x01	; 1
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	bd d0       	rcall	.+378    	; 0x1d4 <BackLED>
		status = 1;
	}
	if (pause > 0)
  5a:	1c 16       	cp	r1, r28
  5c:	1d 06       	cpc	r1, r29
  5e:	2c f4       	brge	.+10     	; 0x6a <stopAsuro+0x22>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  60:	84 e2       	ldi	r24, 0x24	; 36
  62:	c7 d1       	rcall	.+910    	; 0x3f2 <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  64:	21 97       	sbiw	r28, 0x01	; 1
  66:	20 97       	sbiw	r28, 0x00	; 0
  68:	d9 f7       	brne	.-10     	; 0x60 <stopAsuro+0x18>
		msleep(pause);
}
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	08 95       	ret

00000070 <main>:
#define SWITCH(X) 1<<X

#include <asuro/asuro.h>
#include "helpers.h"

void main(void) {
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	00 d0       	rcall	.+0      	; 0x76 <main+0x6>
  76:	00 d0       	rcall	.+0      	; 0x78 <main+0x8>
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
    Init();
  7c:	84 d0       	rcall	.+264    	; 0x186 <Init>
	int x = 160;
	int y = 200;
  7e:	48 ec       	ldi	r20, 0xC8	; 200
  80:	e4 2e       	mov	r14, r20
  82:	f1 2c       	mov	r15, r1
#include <asuro/asuro.h>
#include "helpers.h"

void main(void) {
    Init();
	int x = 160;
  84:	00 ea       	ldi	r16, 0xA0	; 160
  86:	10 e0       	ldi	r17, 0x00	; 0
	int y = 200;
	
	while (1) {  	//Hauptschleife
		
		char sensor = PollSwitch();
  88:	57 d1       	rcall	.+686    	; 0x338 <PollSwitch>
  8a:	d8 2e       	mov	r13, r24
		sensor &= 0b00111111;
		
		MotorDir(FWD, FWD); //Werkeinstellung
  8c:	60 e2       	ldi	r22, 0x20	; 32
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	ac d0       	rcall	.+344    	; 0x1ea <MotorDir>
		MotorSpeed(160, 200); 
  92:	68 ec       	ldi	r22, 0xC8	; 200
  94:	80 ea       	ldi	r24, 0xA0	; 160
  96:	b5 d0       	rcall	.+362    	; 0x202 <MotorSpeed>
	int y = 200;
	
	while (1) {  	//Hauptschleife
		
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  98:	8d 2d       	mov	r24, r13
  9a:	8f 73       	andi	r24, 0x3F	; 63
		
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(160, 200); 
		
		
		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
  9c:	29 f4       	brne	.+10     	; 0xa8 <main+0x38>
			 MotorSpeed(80, 200);
			 StatusLED(RED);
			 msleep(1500);
		}
		
		uint16_t data[] = {0,0};
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	1c 82       	std	Y+4, r1	; 0x04
  a4:	1b 82       	std	Y+3, r1	; 0x03
  a6:	26 c0       	rjmp	.+76     	; 0xf4 <main+0x84>
		MotorSpeed(160, 200); 
		
		
		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  a8:	60 e1       	ldi	r22, 0x10	; 16
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	9e d0       	rcall	.+316    	; 0x1ea <MotorDir>
			 MotorSpeed(80, 200);
  ae:	68 ec       	ldi	r22, 0xC8	; 200
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	a7 d0       	rcall	.+334    	; 0x202 <MotorSpeed>
			 StatusLED(RED);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	6e d0       	rcall	.+220    	; 0x194 <StatusLED>
  b8:	3c ed       	ldi	r19, 0xDC	; 220
  ba:	c3 2e       	mov	r12, r19
  bc:	35 e0       	ldi	r19, 0x05	; 5
  be:	d3 2e       	mov	r13, r19
        sleep(36);
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	97 d1       	rcall	.+814    	; 0x3f2 <sleep>
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	c8 1a       	sub	r12, r24
  c8:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  ca:	c1 14       	cp	r12, r1
  cc:	d1 04       	cpc	r13, r1
  ce:	c1 f7       	brne	.-16     	; 0xc0 <main+0x50>
  d0:	e6 cf       	rjmp	.-52     	; 0x9e <main+0x2e>
		}
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		while (((data[LEFT] > 40) || (data[RIGHT] > 40)) && (x > 10)) //Geschwindigkeit geringer bei Licht über 40E
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	9c 81       	ldd	r25, Y+4	; 0x04
  d6:	89 97       	sbiw	r24, 0x29	; 41
  d8:	d8 f0       	brcs	.+54     	; 0x110 <main+0xa0>
  da:	0b 30       	cpi	r16, 0x0B	; 11
  dc:	11 05       	cpc	r17, r1
  de:	c4 f0       	brlt	.+48     	; 0x110 <main+0xa0>
		{	
			StatusLED(YELLOW);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	58 d0       	rcall	.+176    	; 0x194 <StatusLED>
			x -= 5;
  e4:	05 50       	subi	r16, 0x05	; 5
  e6:	11 09       	sbc	r17, r1
			y -= 5;
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	e8 1a       	sub	r14, r24
  ec:	f1 08       	sbc	r15, r1
			MotorSpeed(x, y);
  ee:	6e 2d       	mov	r22, r14
  f0:	80 2f       	mov	r24, r16
  f2:	87 d0       	rcall	.+270    	; 0x202 <MotorSpeed>
			LineData(data);
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	9e d0       	rcall	.+316    	; 0x236 <LineData>
		}
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		while (((data[LEFT] > 40) || (data[RIGHT] > 40)) && (x > 10)) //Geschwindigkeit geringer bei Licht über 40E
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	89 97       	sbiw	r24, 0x29	; 41
 100:	60 f7       	brcc	.-40     	; 0xda <main+0x6a>
 102:	e7 cf       	rjmp	.-50     	; 0xd2 <main+0x62>
			MotorSpeed(x, y);
			LineData(data);
		} 
		while ((data[LEFT] > 100) || (data[RIGHT] > 100)) //Geschwindigkeit 0 bei Licht über 100E
		{	
			stopAsuro(500);
 104:	84 ef       	ldi	r24, 0xF4	; 244
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	9f df       	rcall	.-194    	; 0x48 <stopAsuro>
			LineData(data);
 10a:	ce 01       	movw	r24, r28
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	93 d0       	rcall	.+294    	; 0x236 <LineData>
			x -= 5;
			y -= 5;
			MotorSpeed(x, y);
			LineData(data);
		} 
		while ((data[LEFT] > 100) || (data[RIGHT] > 100)) //Geschwindigkeit 0 bei Licht über 100E
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	85 36       	cpi	r24, 0x65	; 101
 116:	91 05       	cpc	r25, r1
 118:	a8 f7       	brcc	.-22     	; 0x104 <main+0x94>
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	85 36       	cpi	r24, 0x65	; 101
 120:	91 05       	cpc	r25, r1
 122:	80 f7       	brcc	.-32     	; 0x104 <main+0x94>
		{	
			stopAsuro(500);
			LineData(data);
		} 
		MotorSpeed(160, 200);
 124:	68 ec       	ldi	r22, 0xC8	; 200
 126:	80 ea       	ldi	r24, 0xA0	; 160
 128:	6c d0       	rcall	.+216    	; 0x202 <MotorSpeed>
		int i = 0;
		for(i = 0; i % 100 == 0; i++) //Gelegentlich kurzer Richtungswechsel
		{
			MotorSpeed(10, 200);
 12a:	68 ec       	ldi	r22, 0xC8	; 200
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	69 d0       	rcall	.+210    	; 0x202 <MotorSpeed>
 130:	24 e6       	ldi	r18, 0x64	; 100
 132:	c2 2e       	mov	r12, r18
 134:	d1 2c       	mov	r13, r1
        sleep(36);
 136:	84 e2       	ldi	r24, 0x24	; 36
 138:	5c d1       	rcall	.+696    	; 0x3f2 <sleep>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	c8 1a       	sub	r12, r24
 13e:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 140:	c1 14       	cp	r12, r1
 142:	d1 04       	cpc	r13, r1
 144:	c1 f7       	brne	.-16     	; 0x136 <main+0xc6>
			msleep(100);
		}
		for(i = 0; i % 101 == 0; i++) //Gelegentlich kurzer Richtungswechsel 2.0
		{
			MotorSpeed(200, 10);
 146:	6a e0       	ldi	r22, 0x0A	; 10
 148:	88 ec       	ldi	r24, 0xC8	; 200
 14a:	5b d0       	rcall	.+182    	; 0x202 <MotorSpeed>
 14c:	94 e6       	ldi	r25, 0x64	; 100
 14e:	c9 2e       	mov	r12, r25
 150:	d1 2c       	mov	r13, r1
        sleep(36);
 152:	84 e2       	ldi	r24, 0x24	; 36
 154:	4e d1       	rcall	.+668    	; 0x3f2 <sleep>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	c8 1a       	sub	r12, r24
 15a:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 15c:	c1 14       	cp	r12, r1
 15e:	d1 04       	cpc	r13, r1
 160:	c1 f7       	brne	.-16     	; 0x152 <main+0xe2>
			msleep(100);
		}
		StatusLED(GREEN);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	17 d0       	rcall	.+46     	; 0x194 <StatusLED>
		BackLED(OFF, OFF);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	34 d0       	rcall	.+104    	; 0x1d4 <BackLED>
 16c:	84 ef       	ldi	r24, 0xF4	; 244
 16e:	c8 2e       	mov	r12, r24
 170:	dd 24       	eor	r13, r13
 172:	d3 94       	inc	r13
        sleep(36);
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	3d d1       	rcall	.+634    	; 0x3f2 <sleep>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	c8 1a       	sub	r12, r24
 17c:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 17e:	c1 14       	cp	r12, r1
 180:	d1 04       	cpc	r13, r1
 182:	c1 f7       	brne	.-16     	; 0x174 <main+0x104>
 184:	81 cf       	rjmp	.-254    	; 0x88 <main+0x18>

00000186 <Init>:
 186:	13 d1       	rcall	.+550    	; 0x3ae <Timer2Init>
 188:	43 d0       	rcall	.+134    	; 0x210 <MotorInit>
 18a:	18 d0       	rcall	.+48     	; 0x1bc <LEDInit>
 18c:	47 d1       	rcall	.+654    	; 0x41c <ADCInit>
 18e:	c1 d0       	rcall	.+386    	; 0x312 <SwitchInit>
 190:	78 94       	sei
 192:	08 95       	ret

00000194 <StatusLED>:
 194:	c0 98       	cbi	0x18, 0	; 24
 196:	92 98       	cbi	0x12, 2	; 18
 198:	80 fd       	sbrc	r24, 0
 19a:	c0 9a       	sbi	0x18, 0	; 24
 19c:	81 fd       	sbrc	r24, 1
 19e:	92 9a       	sbi	0x12, 2	; 18
 1a0:	08 95       	ret

000001a2 <BackLEDFast>:
 1a2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1a4:	f8 94       	cli
 1a6:	88 23       	and	r24, r24
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <BackLEDFast+0xe>
 1aa:	97 98       	cbi	0x12, 7	; 18
 1ac:	a1 9a       	sbi	0x14, 1	; 20
 1ae:	a0 9a       	sbi	0x14, 0	; 20
 1b0:	95 b3       	in	r25, 0x15	; 21
 1b2:	9c 7f       	andi	r25, 0xFC	; 252
 1b4:	98 2b       	or	r25, r24
 1b6:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1b8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1ba:	08 95       	ret

000001bc <LEDInit>:
 1bc:	b8 9a       	sbi	0x17, 0	; 23
 1be:	81 b3       	in	r24, 0x11	; 17
 1c0:	84 6c       	ori	r24, 0xC4	; 196
 1c2:	81 bb       	out	0x11, r24	; 17
 1c4:	96 98       	cbi	0x12, 6	; 18
 1c6:	97 98       	cbi	0x12, 7	; 18
 1c8:	a1 9a       	sbi	0x14, 1	; 20
 1ca:	a0 9a       	sbi	0x14, 0	; 20
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	e9 df       	rcall	.-46     	; 0x1a2 <BackLEDFast>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	e0 cf       	rjmp	.-64     	; 0x194 <StatusLED>

000001d4 <BackLED>:
 1d4:	88 23       	and	r24, r24
 1d6:	11 f0       	breq	.+4      	; 0x1dc <BackLED+0x8>
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	01 c0       	rjmp	.+2      	; 0x1de <BackLED+0xa>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	61 11       	cpse	r22, r1
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <BackLED+0x12>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	89 2b       	or	r24, r25
 1e8:	dc cf       	rjmp	.-72     	; 0x1a2 <BackLEDFast>

000001ea <MotorDir>:
 1ea:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1ec:	f8 94       	cli
 1ee:	92 b3       	in	r25, 0x12	; 18
 1f0:	9f 7c       	andi	r25, 0xCF	; 207
 1f2:	89 2b       	or	r24, r25
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	8f 7c       	andi	r24, 0xCF	; 207
 1fa:	68 2b       	or	r22, r24
 1fc:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1fe:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 200:	08 95       	ret

00000202 <MotorSpeed>:
 202:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 204:	f8 94       	cli
 206:	1b bc       	out	0x2b, r1	; 43
 208:	8a bd       	out	0x2a, r24	; 42
 20a:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 20c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 20e:	08 95       	ret

00000210 <MotorInit>:
 210:	87 b3       	in	r24, 0x17	; 23
 212:	86 63       	ori	r24, 0x36	; 54
 214:	87 bb       	out	0x17, r24	; 23
 216:	81 b3       	in	r24, 0x11	; 17
 218:	80 63       	ori	r24, 0x30	; 48
 21a:	81 bb       	out	0x11, r24	; 17
 21c:	81 ea       	ldi	r24, 0xA1	; 161
 21e:	8f bd       	out	0x2f, r24	; 47
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	8e bd       	out	0x2e, r24	; 46
 224:	89 b7       	in	r24, 0x39	; 57
 226:	83 7c       	andi	r24, 0xC3	; 195
 228:	89 bf       	out	0x39, r24	; 57
 22a:	60 e2       	ldi	r22, 0x20	; 32
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	dd df       	rcall	.-70     	; 0x1ea <MotorDir>
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	e6 cf       	rjmp	.-52     	; 0x202 <MotorSpeed>

00000236 <LineData>:
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	f4 d0       	rcall	.+488    	; 0x428 <__ADCBlockEnter>
 240:	18 2f       	mov	r17, r24
 242:	83 e4       	ldi	r24, 0x43	; 67
 244:	19 d1       	rcall	.+562    	; 0x478 <ADCSelectChannel>
 246:	21 d1       	rcall	.+578    	; 0x48a <ADCMeasure>
 248:	24 b1       	in	r18, 0x04	; 4
 24a:	35 b1       	in	r19, 0x05	; 5
 24c:	39 83       	std	Y+1, r19	; 0x01
 24e:	28 83       	st	Y, r18
 250:	82 e4       	ldi	r24, 0x42	; 66
 252:	12 d1       	rcall	.+548    	; 0x478 <ADCSelectChannel>
 254:	1a d1       	rcall	.+564    	; 0x48a <ADCMeasure>
 256:	24 b1       	in	r18, 0x04	; 4
 258:	35 b1       	in	r19, 0x05	; 5
 25a:	3b 83       	std	Y+3, r19	; 0x03
 25c:	2a 83       	std	Y+2, r18	; 0x02
 25e:	81 2f       	mov	r24, r17
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	f2 c0       	rjmp	.+484    	; 0x44c <__ADCBlockLeave>

00000268 <__vector_14>:
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
 28a:	87 b1       	in	r24, 0x07	; 7
 28c:	78 94       	sei
 28e:	81 36       	cpi	r24, 0x61	; 97
 290:	19 f0       	breq	.+6      	; 0x298 <__vector_14+0x30>
 292:	83 36       	cpi	r24, 0x63	; 99
 294:	a1 f0       	breq	.+40     	; 0x2be <__vector_14+0x56>
 296:	27 c0       	rjmp	.+78     	; 0x2e6 <__vector_14+0x7e>
 298:	80 91 63 00 	lds	r24, 0x0063
 29c:	82 fd       	sbrc	r24, 2
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__vector_14+0x3c>
 2a0:	80 e6       	ldi	r24, 0x60	; 96
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <__vector_14+0x3e>
 2a4:	82 e6       	ldi	r24, 0x62	; 98
 2a6:	f8 94       	cli
 2a8:	95 b1       	in	r25, 0x05	; 5
 2aa:	90 93 65 00 	sts	0x0065, r25
 2ae:	90 91 60 00 	lds	r25, 0x0060
 2b2:	90 93 64 00 	sts	0x0064, r25
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	90 93 68 00 	sts	0x0068, r25
 2bc:	12 c0       	rjmp	.+36     	; 0x2e2 <__vector_14+0x7a>
 2be:	80 91 63 00 	lds	r24, 0x0063
 2c2:	80 ff       	sbrs	r24, 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__vector_14+0x62>
 2c6:	80 e6       	ldi	r24, 0x60	; 96
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <__vector_14+0x64>
 2ca:	82 e6       	ldi	r24, 0x62	; 98
 2cc:	f8 94       	cli
 2ce:	95 b1       	in	r25, 0x05	; 5
 2d0:	90 93 67 00 	sts	0x0067, r25
 2d4:	90 91 60 00 	lds	r25, 0x0060
 2d8:	90 93 66 00 	sts	0x0066, r25
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	90 93 62 00 	sts	0x0062, r25
 2e2:	78 94       	sei
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <__vector_14+0x86>
 2e6:	95 b1       	in	r25, 0x05	; 5
 2e8:	90 93 60 00 	sts	0x0060, r25
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	d1 d0       	rcall	.+418    	; 0x492 <ADCInterruptEnable>
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <SwitchInit>:
 312:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 314:	f8 94       	cli
 316:	8b b7       	in	r24, 0x3b	; 59
 318:	8f 77       	andi	r24, 0x7F	; 127
 31a:	8b bf       	out	0x3b, r24	; 59
 31c:	85 b7       	in	r24, 0x35	; 53
 31e:	87 7f       	andi	r24, 0xF7	; 247
 320:	84 60       	ori	r24, 0x04	; 4
 322:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 324:	9f bf       	out	0x3f, r25	; 63
 326:	a4 98       	cbi	0x14, 4	; 20
 328:	85 b3       	in	r24, 0x15	; 21
 32a:	80 71       	andi	r24, 0x10	; 16
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	8b 98       	cbi	0x11, 3	; 17
 330:	93 98       	cbi	0x12, 3	; 18
 332:	10 92 69 00 	sts	0x0069, r1
 336:	08 95       	ret

00000338 <PollSwitch>:
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	93 9a       	sbi	0x12, 3	; 18
 342:	8b 9a       	sbi	0x11, 3	; 17
 344:	71 d0       	rcall	.+226    	; 0x428 <__ADCBlockEnter>
 346:	08 2f       	mov	r16, r24
 348:	84 e4       	ldi	r24, 0x44	; 68
 34a:	96 d0       	rcall	.+300    	; 0x478 <ADCSelectChannel>
 34c:	14 e0       	ldi	r17, 0x04	; 4
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	9b d0       	rcall	.+310    	; 0x48a <ADCMeasure>
 354:	24 b1       	in	r18, 0x04	; 4
 356:	35 b1       	in	r19, 0x05	; 5
 358:	c2 0f       	add	r28, r18
 35a:	d3 1f       	adc	r29, r19
 35c:	11 50       	subi	r17, 0x01	; 1
 35e:	c9 f7       	brne	.-14     	; 0x352 <PollSwitch+0x1a>
 360:	80 2f       	mov	r24, r16
 362:	74 d0       	rcall	.+232    	; 0x44c <__ADCBlockLeave>
 364:	8b 98       	cbi	0x11, 3	; 17
 366:	93 98       	cbi	0x12, 3	; 18
 368:	be 01       	movw	r22, r28
 36a:	76 95       	lsr	r23
 36c:	67 95       	ror	r22
 36e:	76 95       	lsr	r23
 370:	67 95       	ror	r22
 372:	cb 01       	movw	r24, r22
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	98 50       	subi	r25, 0x08	; 8
 37a:	a0 d0       	rcall	.+320    	; 0x4bc <__udivmodhi4>
 37c:	82 ec       	ldi	r24, 0xC2	; 194
 37e:	86 0f       	add	r24, r22
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <__vector_2>:
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 69 00 	sts	0x0069, r24
 39c:	8b b7       	in	r24, 0x3b	; 59
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	8b bf       	out	0x3b, r24	; 59
 3a2:	8f 91       	pop	r24
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <Timer2Init>:
 3ae:	12 bc       	out	0x22, r1	; 34
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	85 bd       	out	0x25, r24	; 37
 3b4:	89 b7       	in	r24, 0x39	; 57
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	89 bf       	out	0x39, r24	; 57
 3ba:	81 e9       	ldi	r24, 0x91	; 145
 3bc:	83 bd       	out	0x23, r24	; 35
 3be:	85 b5       	in	r24, 0x25	; 37
 3c0:	87 78       	andi	r24, 0x87	; 135
 3c2:	85 bd       	out	0x25, r24	; 37
 3c4:	bb 9a       	sbi	0x17, 3	; 23
 3c6:	c3 98       	cbi	0x18, 3	; 24
 3c8:	08 95       	ret

000003ca <__vector_4>:
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	8f 93       	push	r24
 3d6:	84 b5       	in	r24, 0x24	; 36
 3d8:	8b 5d       	subi	r24, 0xDB	; 219
 3da:	84 bd       	out	0x24, r24	; 36
 3dc:	80 91 6a 00 	lds	r24, 0x006A
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 6a 00 	sts	0x006A, r24
 3e6:	8f 91       	pop	r24
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <sleep>:
 3f2:	f8 94       	cli
 3f4:	95 b7       	in	r25, 0x35	; 53
 3f6:	9f 70       	andi	r25, 0x0F	; 15
 3f8:	90 68       	ori	r25, 0x80	; 128
 3fa:	95 bf       	out	0x35, r25	; 53
 3fc:	78 94       	sei
 3fe:	90 91 6a 00 	lds	r25, 0x006A
 402:	89 0f       	add	r24, r25
 404:	90 91 6a 00 	lds	r25, 0x006A
 408:	98 17       	cp	r25, r24
 40a:	11 f0       	breq	.+4      	; 0x410 <sleep+0x1e>
 40c:	88 95       	sleep
 40e:	fa cf       	rjmp	.-12     	; 0x404 <sleep+0x12>
 410:	f8 94       	cli
 412:	85 b7       	in	r24, 0x35	; 53
 414:	8f 77       	andi	r24, 0x7F	; 127
 416:	85 bf       	out	0x35, r24	; 53
 418:	78 94       	sei
 41a:	08 95       	ret

0000041c <ADCInit>:
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	80 93 61 00 	sts	0x0061, r24
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	86 b9       	out	0x06, r24	; 6
 426:	08 95       	ret

00000428 <__ADCBlockEnter>:
 428:	2f b7       	in	r18, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	87 b1       	in	r24, 0x07	; 7
 42e:	96 b1       	in	r25, 0x06	; 6
 430:	39 2f       	mov	r19, r25
 432:	38 78       	andi	r19, 0x88	; 136
 434:	31 f0       	breq	.+12     	; 0x442 <__ADCBlockEnter+0x1a>
 436:	93 ff       	sbrs	r25, 3
 438:	05 c0       	rjmp	.+10     	; 0x444 <__ADCBlockEnter+0x1c>
 43a:	80 93 61 00 	sts	0x0061, r24
 43e:	86 e8       	ldi	r24, 0x86	; 134
 440:	86 b9       	out	0x06, r24	; 6
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	2f bf       	out	0x3f, r18	; 63
 446:	36 99       	sbic	0x06, 6	; 6
 448:	fe cf       	rjmp	.-4      	; 0x446 <__ADCBlockEnter+0x1e>
 44a:	08 95       	ret

0000044c <__ADCBlockLeave>:
 44c:	3f b7       	in	r19, 0x3f	; 63
 44e:	f8 94       	cli
 450:	8f 3f       	cpi	r24, 0xFF	; 255
 452:	31 f4       	brne	.+12     	; 0x460 <__stack+0x1>
 454:	80 91 61 00 	lds	r24, 0x0061
 458:	8f 3f       	cpi	r24, 0xFF	; 255
 45a:	51 f0       	breq	.+20     	; 0x470 <__stack+0x11>
 45c:	2e ed       	ldi	r18, 0xDE	; 222
 45e:	01 c0       	rjmp	.+2      	; 0x462 <__stack+0x3>
 460:	26 ed       	ldi	r18, 0xD6	; 214
 462:	97 b1       	in	r25, 0x07	; 7
 464:	98 27       	eor	r25, r24
 466:	90 7c       	andi	r25, 0xC0	; 192
 468:	09 f0       	breq	.+2      	; 0x46c <__stack+0xd>
 46a:	16 b8       	out	0x06, r1	; 6
 46c:	87 b9       	out	0x07, r24	; 7
 46e:	01 c0       	rjmp	.+2      	; 0x472 <__stack+0x13>
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	26 b9       	out	0x06, r18	; 6
 474:	3f bf       	out	0x3f, r19	; 63
 476:	08 95       	ret

00000478 <ADCSelectChannel>:
 478:	97 b1       	in	r25, 0x07	; 7
 47a:	98 27       	eor	r25, r24
 47c:	90 7c       	andi	r25, 0xC0	; 192
 47e:	09 f0       	breq	.+2      	; 0x482 <ADCSelectChannel+0xa>
 480:	16 b8       	out	0x06, r1	; 6
 482:	96 e8       	ldi	r25, 0x86	; 134
 484:	96 b9       	out	0x06, r25	; 6
 486:	87 b9       	out	0x07, r24	; 7
 488:	08 95       	ret

0000048a <ADCMeasure>:
 48a:	36 9a       	sbi	0x06, 6	; 6
 48c:	36 99       	sbic	0x06, 6	; 6
 48e:	fe cf       	rjmp	.-4      	; 0x48c <ADCMeasure+0x2>
 490:	08 95       	ret

00000492 <ADCInterruptEnable>:
 492:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 494:	f8 94       	cli
 496:	96 b1       	in	r25, 0x06	; 6
 498:	97 ff       	sbrs	r25, 7
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <ADCInterruptEnable+0xe>
 49c:	93 ff       	sbrs	r25, 3
 49e:	0a c0       	rjmp	.+20     	; 0x4b4 <ADCInterruptEnable+0x22>
 4a0:	97 b1       	in	r25, 0x07	; 7
 4a2:	98 27       	eor	r25, r24
 4a4:	90 7c       	andi	r25, 0xC0	; 192
 4a6:	09 f0       	breq	.+2      	; 0x4aa <ADCInterruptEnable+0x18>
 4a8:	16 b8       	out	0x06, r1	; 6
 4aa:	36 99       	sbic	0x06, 6	; 6
 4ac:	16 b8       	out	0x06, r1	; 6
 4ae:	87 b9       	out	0x07, r24	; 7
 4b0:	9e ed       	ldi	r25, 0xDE	; 222
 4b2:	96 b9       	out	0x06, r25	; 6
 4b4:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4b8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 4ba:	08 95       	ret

000004bc <__udivmodhi4>:
 4bc:	aa 1b       	sub	r26, r26
 4be:	bb 1b       	sub	r27, r27
 4c0:	51 e1       	ldi	r21, 0x11	; 17
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <__udivmodhi4_ep>

000004c4 <__udivmodhi4_loop>:
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	a6 17       	cp	r26, r22
 4ca:	b7 07       	cpc	r27, r23
 4cc:	10 f0       	brcs	.+4      	; 0x4d2 <__udivmodhi4_ep>
 4ce:	a6 1b       	sub	r26, r22
 4d0:	b7 0b       	sbc	r27, r23

000004d2 <__udivmodhi4_ep>:
 4d2:	88 1f       	adc	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	5a 95       	dec	r21
 4d8:	a9 f7       	brne	.-22     	; 0x4c4 <__udivmodhi4_loop>
 4da:	80 95       	com	r24
 4dc:	90 95       	com	r25
 4de:	bc 01       	movw	r22, r24
 4e0:	cd 01       	movw	r24, r26
 4e2:	08 95       	ret

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
