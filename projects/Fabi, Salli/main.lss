
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  000006da  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001524  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000808  00000000  00000000  0000287f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00003088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099b  00000000  00000000  00003a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	ab c1       	rjmp	.+854    	; 0x35c <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	c9 c1       	rjmp	.+914    	; 0x39c <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	af 36       	cpi	r26, 0x6F	; 111
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e2 e4       	ldi	r30, 0x42	; 66
  4a:	f6 e0       	ldi	r31, 0x06	; 6
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>
  58:	13 d0       	rcall	.+38     	; 0x80 <main>
  5a:	f1 c2       	rjmp	.+1506   	; 0x63e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	b5 d0       	rcall	.+362    	; 0x1d4 <MotorSpeed>
	if (pause > 0)
  6a:	1c 16       	cp	r1, r28
  6c:	1d 06       	cpc	r1, r29
  6e:	2c f4       	brge	.+10     	; 0x7a <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  70:	84 e2       	ldi	r24, 0x24	; 36
  72:	a8 d1       	rcall	.+848    	; 0x3c4 <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  74:	21 97       	sbiw	r28, 0x01	; 1
  76:	20 97       	sbiw	r28, 0x00	; 0
  78:	d9 f7       	brne	.-10     	; 0x70 <stopAsuro+0x12>
		msleep(pause);
}
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

00000080 <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    Init();
  8c:	65 d0       	rcall	.+202    	; 0x158 <Init>
	//int x = 160;
	//int y = 200;
	int i = 0;
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
  92:	28 eb       	ldi	r18, 0xB8	; 184
  94:	c2 2e       	mov	r12, r18
  96:	2b e0       	ldi	r18, 0x0B	; 11
  98:	d2 2e       	mov	r13, r18
			int ran;
			ran = rand() % 2;
  9a:	32 e0       	ldi	r19, 0x02	; 2
  9c:	a3 2e       	mov	r10, r19
  9e:	b1 2c       	mov	r11, r1
    Init();
	//int x = 160;
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
  a0:	0f 5f       	subi	r16, 0xFF	; 255
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
		char sensor = PollSwitch();
  a4:	32 d1       	rcall	.+612    	; 0x30a <PollSwitch>
  a6:	f8 2e       	mov	r15, r24
		sensor &= 0b00111111;
		
		MotorDir(FWD, FWD); //Werkeinstellung
  a8:	60 e2       	ldi	r22, 0x20	; 32
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	87 d0       	rcall	.+270    	; 0x1bc <MotorDir>
		MotorSpeed(230, 190); 
  ae:	6e eb       	ldi	r22, 0xBE	; 190
  b0:	86 ee       	ldi	r24, 0xE6	; 230
  b2:	90 d0       	rcall	.+288    	; 0x1d4 <MotorSpeed>
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  b4:	8f 2d       	mov	r24, r15
  b6:	8f 73       	andi	r24, 0x3F	; 63
		
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 190); 
		
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  b8:	41 f4       	brne	.+16     	; 0xca <main+0x4a>
			 MotorSpeed(60, 150);
			 StatusLED(RED);
			 msleep(800);
		}
		
		uint16_t data[] = {0,0};
  ba:	1a 82       	std	Y+2, r1	; 0x02
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	1c 82       	std	Y+4, r1	; 0x04
  c0:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	a0 d0       	rcall	.+320    	; 0x208 <LineData>
  c8:	1d c0       	rjmp	.+58     	; 0x104 <main+0x84>
		MotorSpeed(230, 190); 
		
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  ca:	60 e1       	ldi	r22, 0x10	; 16
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	76 d0       	rcall	.+236    	; 0x1bc <MotorDir>
			 MotorSpeed(60, 150);
  d0:	66 e9       	ldi	r22, 0x96	; 150
  d2:	8c e3       	ldi	r24, 0x3C	; 60
  d4:	7f d0       	rcall	.+254    	; 0x1d4 <MotorSpeed>
			 StatusLED(RED);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	46 d0       	rcall	.+140    	; 0x166 <StatusLED>
  da:	90 e2       	ldi	r25, 0x20	; 32
  dc:	e9 2e       	mov	r14, r25
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	f9 2e       	mov	r15, r25
        sleep(36);
  e2:	84 e2       	ldi	r24, 0x24	; 36
  e4:	6f d1       	rcall	.+734    	; 0x3c4 <sleep>
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	e2 1a       	sub	r14, r18
  ea:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  ec:	e1 14       	cp	r14, r1
  ee:	f1 04       	cpc	r15, r1
  f0:	c1 f7       	brne	.-16     	; 0xe2 <main+0x62>
  f2:	e3 cf       	rjmp	.-58     	; 0xba <main+0x3a>
		/*if (((data[LEFT] > 100) || (data[RIGHT] > 100)) && ((data[LEFT] < 400) || (data[RIGHT] < 400))) { 		//Geschwindigkeit geringer bei Licht 端ber 50E
				MotorSpeed(50, 70);
				msleep(2000);
		}*/
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht 端ber 100E
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	85 3f       	cpi	r24, 0xF5	; 245
  fa:	91 40       	sbci	r25, 0x01	; 1
  fc:	60 f0       	brcs	.+24     	; 0x116 <main+0x96>
		{	
			stopAsuro(500);
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	ad df       	rcall	.-166    	; 0x5e <stopAsuro>
			LineData(data);
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	7f d0       	rcall	.+254    	; 0x208 <LineData>
		/*if (((data[LEFT] > 100) || (data[RIGHT] > 100)) && ((data[LEFT] < 400) || (data[RIGHT] < 400))) { 		//Geschwindigkeit geringer bei Licht 端ber 50E
				MotorSpeed(50, 70);
				msleep(2000);
		}*/
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht 端ber 100E
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	85 3f       	cpi	r24, 0xF5	; 245
 110:	91 40       	sbci	r25, 0x01	; 1
 112:	80 f3       	brcs	.-32     	; 0xf4 <main+0x74>
 114:	f4 cf       	rjmp	.-24     	; 0xfe <main+0x7e>
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
 116:	c8 01       	movw	r24, r16
 118:	b6 01       	movw	r22, r12
 11a:	cd d1       	rcall	.+922    	; 0x4b6 <__divmodhi4>
 11c:	89 2b       	or	r24, r25
 11e:	51 f4       	brne	.+20     	; 0x134 <main+0xb4>
			int ran;
			ran = rand() % 2;
 120:	26 d2       	rcall	.+1100   	; 0x56e <rand>
 122:	b5 01       	movw	r22, r10
 124:	c8 d1       	rcall	.+912    	; 0x4b6 <__divmodhi4>
			if (ran) {
 126:	89 2b       	or	r24, r25
 128:	29 f0       	breq	.+10     	; 0x134 <main+0xb4>
				StatusLED(YELLOW);
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	1c d0       	rcall	.+56     	; 0x166 <StatusLED>
				stopAsuro(3000);
 12e:	88 eb       	ldi	r24, 0xB8	; 184
 130:	9b e0       	ldi	r25, 0x0B	; 11
 132:	95 df       	rcall	.-214    	; 0x5e <stopAsuro>
		{
			MotorSpeed(180, 90);
			LineData(data);
			msleep(100);
		}*/
		StatusLED(GREEN);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	17 d0       	rcall	.+46     	; 0x166 <StatusLED>
		BackLED(OFF, OFF);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	34 d0       	rcall	.+104    	; 0x1a6 <BackLED>
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	e8 2e       	mov	r14, r24
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	f8 2e       	mov	r15, r24
        sleep(36);
 146:	84 e2       	ldi	r24, 0x24	; 36
 148:	3d d1       	rcall	.+634    	; 0x3c4 <sleep>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	e8 1a       	sub	r14, r24
 14e:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 150:	e1 14       	cp	r14, r1
 152:	f1 04       	cpc	r15, r1
 154:	c1 f7       	brne	.-16     	; 0x146 <main+0xc6>
 156:	a4 cf       	rjmp	.-184    	; 0xa0 <main+0x20>

00000158 <Init>:
 158:	13 d1       	rcall	.+550    	; 0x380 <Timer2Init>
 15a:	43 d0       	rcall	.+134    	; 0x1e2 <MotorInit>
 15c:	18 d0       	rcall	.+48     	; 0x18e <LEDInit>
 15e:	47 d1       	rcall	.+654    	; 0x3ee <ADCInit>
 160:	c1 d0       	rcall	.+386    	; 0x2e4 <SwitchInit>
 162:	78 94       	sei
 164:	08 95       	ret

00000166 <StatusLED>:
 166:	c0 98       	cbi	0x18, 0	; 24
 168:	92 98       	cbi	0x12, 2	; 18
 16a:	80 fd       	sbrc	r24, 0
 16c:	c0 9a       	sbi	0x18, 0	; 24
 16e:	81 fd       	sbrc	r24, 1
 170:	92 9a       	sbi	0x12, 2	; 18
 172:	08 95       	ret

00000174 <BackLEDFast>:
 174:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 176:	f8 94       	cli
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <BackLEDFast+0xe>
 17c:	97 98       	cbi	0x12, 7	; 18
 17e:	a1 9a       	sbi	0x14, 1	; 20
 180:	a0 9a       	sbi	0x14, 0	; 20
 182:	95 b3       	in	r25, 0x15	; 21
 184:	9c 7f       	andi	r25, 0xFC	; 252
 186:	98 2b       	or	r25, r24
 188:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 18a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 18c:	08 95       	ret

0000018e <LEDInit>:
 18e:	b8 9a       	sbi	0x17, 0	; 23
 190:	81 b3       	in	r24, 0x11	; 17
 192:	84 6c       	ori	r24, 0xC4	; 196
 194:	81 bb       	out	0x11, r24	; 17
 196:	96 98       	cbi	0x12, 6	; 18
 198:	97 98       	cbi	0x12, 7	; 18
 19a:	a1 9a       	sbi	0x14, 1	; 20
 19c:	a0 9a       	sbi	0x14, 0	; 20
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	e9 df       	rcall	.-46     	; 0x174 <BackLEDFast>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	e0 cf       	rjmp	.-64     	; 0x166 <StatusLED>

000001a6 <BackLED>:
 1a6:	88 23       	and	r24, r24
 1a8:	11 f0       	breq	.+4      	; 0x1ae <BackLED+0x8>
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <BackLED+0xa>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	61 11       	cpse	r22, r1
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <BackLED+0x12>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	89 2b       	or	r24, r25
 1ba:	dc cf       	rjmp	.-72     	; 0x174 <BackLEDFast>

000001bc <MotorDir>:
 1bc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1be:	f8 94       	cli
 1c0:	92 b3       	in	r25, 0x12	; 18
 1c2:	9f 7c       	andi	r25, 0xCF	; 207
 1c4:	89 2b       	or	r24, r25
 1c6:	82 bb       	out	0x12, r24	; 18
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	8f 7c       	andi	r24, 0xCF	; 207
 1cc:	68 2b       	or	r22, r24
 1ce:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1d0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1d2:	08 95       	ret

000001d4 <MotorSpeed>:
 1d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1d6:	f8 94       	cli
 1d8:	1b bc       	out	0x2b, r1	; 43
 1da:	8a bd       	out	0x2a, r24	; 42
 1dc:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1de:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 1e0:	08 95       	ret

000001e2 <MotorInit>:
 1e2:	87 b3       	in	r24, 0x17	; 23
 1e4:	86 63       	ori	r24, 0x36	; 54
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	81 b3       	in	r24, 0x11	; 17
 1ea:	80 63       	ori	r24, 0x30	; 48
 1ec:	81 bb       	out	0x11, r24	; 17
 1ee:	81 ea       	ldi	r24, 0xA1	; 161
 1f0:	8f bd       	out	0x2f, r24	; 47
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	8e bd       	out	0x2e, r24	; 46
 1f6:	89 b7       	in	r24, 0x39	; 57
 1f8:	83 7c       	andi	r24, 0xC3	; 195
 1fa:	89 bf       	out	0x39, r24	; 57
 1fc:	60 e2       	ldi	r22, 0x20	; 32
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	dd df       	rcall	.-70     	; 0x1bc <MotorDir>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	e6 cf       	rjmp	.-52     	; 0x1d4 <MotorSpeed>

00000208 <LineData>:
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
 210:	f4 d0       	rcall	.+488    	; 0x3fa <__ADCBlockEnter>
 212:	18 2f       	mov	r17, r24
 214:	83 e4       	ldi	r24, 0x43	; 67
 216:	19 d1       	rcall	.+562    	; 0x44a <ADCSelectChannel>
 218:	21 d1       	rcall	.+578    	; 0x45c <ADCMeasure>
 21a:	24 b1       	in	r18, 0x04	; 4
 21c:	35 b1       	in	r19, 0x05	; 5
 21e:	39 83       	std	Y+1, r19	; 0x01
 220:	28 83       	st	Y, r18
 222:	82 e4       	ldi	r24, 0x42	; 66
 224:	12 d1       	rcall	.+548    	; 0x44a <ADCSelectChannel>
 226:	1a d1       	rcall	.+564    	; 0x45c <ADCMeasure>
 228:	24 b1       	in	r18, 0x04	; 4
 22a:	35 b1       	in	r19, 0x05	; 5
 22c:	3b 83       	std	Y+3, r19	; 0x03
 22e:	2a 83       	std	Y+2, r18	; 0x02
 230:	81 2f       	mov	r24, r17
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	f2 c0       	rjmp	.+484    	; 0x41e <__ADCBlockLeave>

0000023a <__vector_14>:
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
 25c:	87 b1       	in	r24, 0x07	; 7
 25e:	78 94       	sei
 260:	81 36       	cpi	r24, 0x61	; 97
 262:	19 f0       	breq	.+6      	; 0x26a <__vector_14+0x30>
 264:	83 36       	cpi	r24, 0x63	; 99
 266:	a1 f0       	breq	.+40     	; 0x290 <__vector_14+0x56>
 268:	27 c0       	rjmp	.+78     	; 0x2b8 <__vector_14+0x7e>
 26a:	80 91 67 00 	lds	r24, 0x0067
 26e:	82 fd       	sbrc	r24, 2
 270:	02 c0       	rjmp	.+4      	; 0x276 <__vector_14+0x3c>
 272:	80 e6       	ldi	r24, 0x60	; 96
 274:	01 c0       	rjmp	.+2      	; 0x278 <__vector_14+0x3e>
 276:	82 e6       	ldi	r24, 0x62	; 98
 278:	f8 94       	cli
 27a:	95 b1       	in	r25, 0x05	; 5
 27c:	90 93 69 00 	sts	0x0069, r25
 280:	90 91 64 00 	lds	r25, 0x0064
 284:	90 93 68 00 	sts	0x0068, r25
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	90 93 6c 00 	sts	0x006C, r25
 28e:	12 c0       	rjmp	.+36     	; 0x2b4 <__vector_14+0x7a>
 290:	80 91 67 00 	lds	r24, 0x0067
 294:	80 ff       	sbrs	r24, 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <__vector_14+0x62>
 298:	80 e6       	ldi	r24, 0x60	; 96
 29a:	01 c0       	rjmp	.+2      	; 0x29e <__vector_14+0x64>
 29c:	82 e6       	ldi	r24, 0x62	; 98
 29e:	f8 94       	cli
 2a0:	95 b1       	in	r25, 0x05	; 5
 2a2:	90 93 6b 00 	sts	0x006B, r25
 2a6:	90 91 64 00 	lds	r25, 0x0064
 2aa:	90 93 6a 00 	sts	0x006A, r25
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	90 93 66 00 	sts	0x0066, r25
 2b4:	78 94       	sei
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <__vector_14+0x86>
 2b8:	95 b1       	in	r25, 0x05	; 5
 2ba:	90 93 64 00 	sts	0x0064, r25
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	d1 d0       	rcall	.+418    	; 0x464 <ADCInterruptEnable>
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <SwitchInit>:
 2e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2e6:	f8 94       	cli
 2e8:	8b b7       	in	r24, 0x3b	; 59
 2ea:	8f 77       	andi	r24, 0x7F	; 127
 2ec:	8b bf       	out	0x3b, r24	; 59
 2ee:	85 b7       	in	r24, 0x35	; 53
 2f0:	87 7f       	andi	r24, 0xF7	; 247
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2f6:	9f bf       	out	0x3f, r25	; 63
 2f8:	a4 98       	cbi	0x14, 4	; 20
 2fa:	85 b3       	in	r24, 0x15	; 21
 2fc:	80 71       	andi	r24, 0x10	; 16
 2fe:	85 bb       	out	0x15, r24	; 21
 300:	8b 98       	cbi	0x11, 3	; 17
 302:	93 98       	cbi	0x12, 3	; 18
 304:	10 92 6d 00 	sts	0x006D, r1
 308:	08 95       	ret

0000030a <PollSwitch>:
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	93 9a       	sbi	0x12, 3	; 18
 314:	8b 9a       	sbi	0x11, 3	; 17
 316:	71 d0       	rcall	.+226    	; 0x3fa <__ADCBlockEnter>
 318:	08 2f       	mov	r16, r24
 31a:	84 e4       	ldi	r24, 0x44	; 68
 31c:	96 d0       	rcall	.+300    	; 0x44a <ADCSelectChannel>
 31e:	14 e0       	ldi	r17, 0x04	; 4
 320:	c0 e0       	ldi	r28, 0x00	; 0
 322:	d0 e0       	ldi	r29, 0x00	; 0
 324:	9b d0       	rcall	.+310    	; 0x45c <ADCMeasure>
 326:	24 b1       	in	r18, 0x04	; 4
 328:	35 b1       	in	r19, 0x05	; 5
 32a:	c2 0f       	add	r28, r18
 32c:	d3 1f       	adc	r29, r19
 32e:	11 50       	subi	r17, 0x01	; 1
 330:	c9 f7       	brne	.-14     	; 0x324 <PollSwitch+0x1a>
 332:	80 2f       	mov	r24, r16
 334:	74 d0       	rcall	.+232    	; 0x41e <__ADCBlockLeave>
 336:	8b 98       	cbi	0x11, 3	; 17
 338:	93 98       	cbi	0x12, 3	; 18
 33a:	be 01       	movw	r22, r28
 33c:	76 95       	lsr	r23
 33e:	67 95       	ror	r22
 340:	76 95       	lsr	r23
 342:	67 95       	ror	r22
 344:	cb 01       	movw	r24, r22
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	98 50       	subi	r25, 0x08	; 8
 34c:	a0 d0       	rcall	.+320    	; 0x48e <__udivmodhi4>
 34e:	82 ec       	ldi	r24, 0xC2	; 194
 350:	86 0f       	add	r24, r22
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <__vector_2>:
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	8f 93       	push	r24
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 6d 00 	sts	0x006D, r24
 36e:	8b b7       	in	r24, 0x3b	; 59
 370:	8f 77       	andi	r24, 0x7F	; 127
 372:	8b bf       	out	0x3b, r24	; 59
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <Timer2Init>:
 380:	12 bc       	out	0x22, r1	; 34
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	85 bd       	out	0x25, r24	; 37
 386:	89 b7       	in	r24, 0x39	; 57
 388:	80 64       	ori	r24, 0x40	; 64
 38a:	89 bf       	out	0x39, r24	; 57
 38c:	81 e9       	ldi	r24, 0x91	; 145
 38e:	83 bd       	out	0x23, r24	; 35
 390:	85 b5       	in	r24, 0x25	; 37
 392:	87 78       	andi	r24, 0x87	; 135
 394:	85 bd       	out	0x25, r24	; 37
 396:	bb 9a       	sbi	0x17, 3	; 23
 398:	c3 98       	cbi	0x18, 3	; 24
 39a:	08 95       	ret

0000039c <__vector_4>:
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	8f 93       	push	r24
 3a8:	84 b5       	in	r24, 0x24	; 36
 3aa:	8b 5d       	subi	r24, 0xDB	; 219
 3ac:	84 bd       	out	0x24, r24	; 36
 3ae:	80 91 6e 00 	lds	r24, 0x006E
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 6e 00 	sts	0x006E, r24
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <sleep>:
 3c4:	f8 94       	cli
 3c6:	95 b7       	in	r25, 0x35	; 53
 3c8:	9f 70       	andi	r25, 0x0F	; 15
 3ca:	90 68       	ori	r25, 0x80	; 128
 3cc:	95 bf       	out	0x35, r25	; 53
 3ce:	78 94       	sei
 3d0:	90 91 6e 00 	lds	r25, 0x006E
 3d4:	89 0f       	add	r24, r25
 3d6:	90 91 6e 00 	lds	r25, 0x006E
 3da:	98 17       	cp	r25, r24
 3dc:	11 f0       	breq	.+4      	; 0x3e2 <sleep+0x1e>
 3de:	88 95       	sleep
 3e0:	fa cf       	rjmp	.-12     	; 0x3d6 <sleep+0x12>
 3e2:	f8 94       	cli
 3e4:	85 b7       	in	r24, 0x35	; 53
 3e6:	8f 77       	andi	r24, 0x7F	; 127
 3e8:	85 bf       	out	0x35, r24	; 53
 3ea:	78 94       	sei
 3ec:	08 95       	ret

000003ee <ADCInit>:
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	80 93 65 00 	sts	0x0065, r24
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	86 b9       	out	0x06, r24	; 6
 3f8:	08 95       	ret

000003fa <__ADCBlockEnter>:
 3fa:	2f b7       	in	r18, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	87 b1       	in	r24, 0x07	; 7
 400:	96 b1       	in	r25, 0x06	; 6
 402:	39 2f       	mov	r19, r25
 404:	38 78       	andi	r19, 0x88	; 136
 406:	31 f0       	breq	.+12     	; 0x414 <__ADCBlockEnter+0x1a>
 408:	93 ff       	sbrs	r25, 3
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__ADCBlockEnter+0x1c>
 40c:	80 93 65 00 	sts	0x0065, r24
 410:	86 e8       	ldi	r24, 0x86	; 134
 412:	86 b9       	out	0x06, r24	; 6
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	2f bf       	out	0x3f, r18	; 63
 418:	36 99       	sbic	0x06, 6	; 6
 41a:	fe cf       	rjmp	.-4      	; 0x418 <__ADCBlockEnter+0x1e>
 41c:	08 95       	ret

0000041e <__ADCBlockLeave>:
 41e:	3f b7       	in	r19, 0x3f	; 63
 420:	f8 94       	cli
 422:	8f 3f       	cpi	r24, 0xFF	; 255
 424:	31 f4       	brne	.+12     	; 0x432 <__ADCBlockLeave+0x14>
 426:	80 91 65 00 	lds	r24, 0x0065
 42a:	8f 3f       	cpi	r24, 0xFF	; 255
 42c:	51 f0       	breq	.+20     	; 0x442 <__ADCBlockLeave+0x24>
 42e:	2e ed       	ldi	r18, 0xDE	; 222
 430:	01 c0       	rjmp	.+2      	; 0x434 <__ADCBlockLeave+0x16>
 432:	26 ed       	ldi	r18, 0xD6	; 214
 434:	97 b1       	in	r25, 0x07	; 7
 436:	98 27       	eor	r25, r24
 438:	90 7c       	andi	r25, 0xC0	; 192
 43a:	09 f0       	breq	.+2      	; 0x43e <__ADCBlockLeave+0x20>
 43c:	16 b8       	out	0x06, r1	; 6
 43e:	87 b9       	out	0x07, r24	; 7
 440:	01 c0       	rjmp	.+2      	; 0x444 <__ADCBlockLeave+0x26>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	26 b9       	out	0x06, r18	; 6
 446:	3f bf       	out	0x3f, r19	; 63
 448:	08 95       	ret

0000044a <ADCSelectChannel>:
 44a:	97 b1       	in	r25, 0x07	; 7
 44c:	98 27       	eor	r25, r24
 44e:	90 7c       	andi	r25, 0xC0	; 192
 450:	09 f0       	breq	.+2      	; 0x454 <ADCSelectChannel+0xa>
 452:	16 b8       	out	0x06, r1	; 6
 454:	96 e8       	ldi	r25, 0x86	; 134
 456:	96 b9       	out	0x06, r25	; 6
 458:	87 b9       	out	0x07, r24	; 7
 45a:	08 95       	ret

0000045c <ADCMeasure>:
 45c:	36 9a       	sbi	0x06, 6	; 6
 45e:	36 99       	sbic	0x06, 6	; 6
 460:	fe cf       	rjmp	.-4      	; 0x45e <ADCMeasure+0x2>
 462:	08 95       	ret

00000464 <ADCInterruptEnable>:
 464:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 466:	f8 94       	cli
 468:	96 b1       	in	r25, 0x06	; 6
 46a:	97 ff       	sbrs	r25, 7
 46c:	02 c0       	rjmp	.+4      	; 0x472 <ADCInterruptEnable+0xe>
 46e:	93 ff       	sbrs	r25, 3
 470:	0a c0       	rjmp	.+20     	; 0x486 <ADCInterruptEnable+0x22>
 472:	97 b1       	in	r25, 0x07	; 7
 474:	98 27       	eor	r25, r24
 476:	90 7c       	andi	r25, 0xC0	; 192
 478:	09 f0       	breq	.+2      	; 0x47c <ADCInterruptEnable+0x18>
 47a:	16 b8       	out	0x06, r1	; 6
 47c:	36 99       	sbic	0x06, 6	; 6
 47e:	16 b8       	out	0x06, r1	; 6
 480:	87 b9       	out	0x07, r24	; 7
 482:	9e ed       	ldi	r25, 0xDE	; 222
 484:	96 b9       	out	0x06, r25	; 6
 486:	80 93 65 00 	sts	0x0065, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 48a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 48c:	08 95       	ret

0000048e <__udivmodhi4>:
 48e:	aa 1b       	sub	r26, r26
 490:	bb 1b       	sub	r27, r27
 492:	51 e1       	ldi	r21, 0x11	; 17
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <__udivmodhi4_ep>

00000496 <__udivmodhi4_loop>:
 496:	aa 1f       	adc	r26, r26
 498:	bb 1f       	adc	r27, r27
 49a:	a6 17       	cp	r26, r22
 49c:	b7 07       	cpc	r27, r23
 49e:	10 f0       	brcs	.+4      	; 0x4a4 <__udivmodhi4_ep>
 4a0:	a6 1b       	sub	r26, r22
 4a2:	b7 0b       	sbc	r27, r23

000004a4 <__udivmodhi4_ep>:
 4a4:	88 1f       	adc	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	5a 95       	dec	r21
 4aa:	a9 f7       	brne	.-22     	; 0x496 <__udivmodhi4_loop>
 4ac:	80 95       	com	r24
 4ae:	90 95       	com	r25
 4b0:	bc 01       	movw	r22, r24
 4b2:	cd 01       	movw	r24, r26
 4b4:	08 95       	ret

000004b6 <__divmodhi4>:
 4b6:	97 fb       	bst	r25, 7
 4b8:	07 2e       	mov	r0, r23
 4ba:	16 f4       	brtc	.+4      	; 0x4c0 <__divmodhi4+0xa>
 4bc:	00 94       	com	r0
 4be:	06 d0       	rcall	.+12     	; 0x4cc <__divmodhi4_neg1>
 4c0:	77 fd       	sbrc	r23, 7
 4c2:	08 d0       	rcall	.+16     	; 0x4d4 <__divmodhi4_neg2>
 4c4:	e4 df       	rcall	.-56     	; 0x48e <__udivmodhi4>
 4c6:	07 fc       	sbrc	r0, 7
 4c8:	05 d0       	rcall	.+10     	; 0x4d4 <__divmodhi4_neg2>
 4ca:	3e f4       	brtc	.+14     	; 0x4da <__divmodhi4_exit>

000004cc <__divmodhi4_neg1>:
 4cc:	90 95       	com	r25
 4ce:	81 95       	neg	r24
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <__divmodhi4_neg2>:
 4d4:	70 95       	com	r23
 4d6:	61 95       	neg	r22
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255

000004da <__divmodhi4_exit>:
 4da:	08 95       	ret

000004dc <do_rand>:
 4dc:	8f 92       	push	r8
 4de:	9f 92       	push	r9
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ec 01       	movw	r28, r24
 4f2:	68 81       	ld	r22, Y
 4f4:	79 81       	ldd	r23, Y+1	; 0x01
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	9b 81       	ldd	r25, Y+3	; 0x03
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	81 05       	cpc	r24, r1
 500:	91 05       	cpc	r25, r1
 502:	21 f4       	brne	.+8      	; 0x50c <do_rand+0x30>
 504:	64 e2       	ldi	r22, 0x24	; 36
 506:	79 ed       	ldi	r23, 0xD9	; 217
 508:	8b e5       	ldi	r24, 0x5B	; 91
 50a:	97 e0       	ldi	r25, 0x07	; 7
 50c:	2d e1       	ldi	r18, 0x1D	; 29
 50e:	33 ef       	ldi	r19, 0xF3	; 243
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	3a d0       	rcall	.+116    	; 0x58a <__divmodsi4>
 516:	49 01       	movw	r8, r18
 518:	5a 01       	movw	r10, r20
 51a:	9b 01       	movw	r18, r22
 51c:	ac 01       	movw	r20, r24
 51e:	a7 ea       	ldi	r26, 0xA7	; 167
 520:	b1 e4       	ldi	r27, 0x41	; 65
 522:	4f d0       	rcall	.+158    	; 0x5c2 <__muluhisi3>
 524:	6b 01       	movw	r12, r22
 526:	7c 01       	movw	r14, r24
 528:	ac ee       	ldi	r26, 0xEC	; 236
 52a:	b4 ef       	ldi	r27, 0xF4	; 244
 52c:	a5 01       	movw	r20, r10
 52e:	94 01       	movw	r18, r8
 530:	54 d0       	rcall	.+168    	; 0x5da <__mulohisi3>
 532:	c6 0e       	add	r12, r22
 534:	d7 1e       	adc	r13, r23
 536:	e8 1e       	adc	r14, r24
 538:	f9 1e       	adc	r15, r25
 53a:	f7 fe       	sbrs	r15, 7
 53c:	06 c0       	rjmp	.+12     	; 0x54a <do_rand+0x6e>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	c8 1a       	sub	r12, r24
 542:	d1 08       	sbc	r13, r1
 544:	e1 08       	sbc	r14, r1
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	f8 0a       	sbc	r15, r24
 54a:	c8 82       	st	Y, r12
 54c:	d9 82       	std	Y+1, r13	; 0x01
 54e:	ea 82       	std	Y+2, r14	; 0x02
 550:	fb 82       	std	Y+3, r15	; 0x03
 552:	c6 01       	movw	r24, r12
 554:	9f 77       	andi	r25, 0x7F	; 127
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	bf 90       	pop	r11
 564:	af 90       	pop	r10
 566:	9f 90       	pop	r9
 568:	8f 90       	pop	r8
 56a:	08 95       	ret

0000056c <rand_r>:
 56c:	b7 cf       	rjmp	.-146    	; 0x4dc <do_rand>

0000056e <rand>:
 56e:	80 e6       	ldi	r24, 0x60	; 96
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	b4 cf       	rjmp	.-152    	; 0x4dc <do_rand>

00000574 <srand>:
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	80 93 60 00 	sts	0x0060, r24
 57c:	90 93 61 00 	sts	0x0061, r25
 580:	a0 93 62 00 	sts	0x0062, r26
 584:	b0 93 63 00 	sts	0x0063, r27
 588:	08 95       	ret

0000058a <__divmodsi4>:
 58a:	05 2e       	mov	r0, r21
 58c:	97 fb       	bst	r25, 7
 58e:	16 f4       	brtc	.+4      	; 0x594 <__divmodsi4+0xa>
 590:	00 94       	com	r0
 592:	0f d0       	rcall	.+30     	; 0x5b2 <__negsi2>
 594:	57 fd       	sbrc	r21, 7
 596:	05 d0       	rcall	.+10     	; 0x5a2 <__divmodsi4_neg2>
 598:	24 d0       	rcall	.+72     	; 0x5e2 <__udivmodsi4>
 59a:	07 fc       	sbrc	r0, 7
 59c:	02 d0       	rcall	.+4      	; 0x5a2 <__divmodsi4_neg2>
 59e:	46 f4       	brtc	.+16     	; 0x5b0 <__divmodsi4_exit>
 5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <__negsi2>

000005a2 <__divmodsi4_neg2>:
 5a2:	50 95       	com	r21
 5a4:	40 95       	com	r20
 5a6:	30 95       	com	r19
 5a8:	21 95       	neg	r18
 5aa:	3f 4f       	sbci	r19, 0xFF	; 255
 5ac:	4f 4f       	sbci	r20, 0xFF	; 255
 5ae:	5f 4f       	sbci	r21, 0xFF	; 255

000005b0 <__divmodsi4_exit>:
 5b0:	08 95       	ret

000005b2 <__negsi2>:
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__muluhisi3>:
 5c2:	31 d0       	rcall	.+98     	; 0x626 <__umulhisi3>
 5c4:	a5 9f       	mul	r26, r21
 5c6:	90 0d       	add	r25, r0
 5c8:	b4 9f       	mul	r27, r20
 5ca:	90 0d       	add	r25, r0
 5cc:	a4 9f       	mul	r26, r20
 5ce:	80 0d       	add	r24, r0
 5d0:	91 1d       	adc	r25, r1
 5d2:	11 24       	eor	r1, r1
 5d4:	08 95       	ret

000005d6 <__mulshisi3>:
 5d6:	b7 ff       	sbrs	r27, 7
 5d8:	f4 cf       	rjmp	.-24     	; 0x5c2 <__muluhisi3>

000005da <__mulohisi3>:
 5da:	f3 df       	rcall	.-26     	; 0x5c2 <__muluhisi3>
 5dc:	82 1b       	sub	r24, r18
 5de:	93 0b       	sbc	r25, r19
 5e0:	08 95       	ret

000005e2 <__udivmodsi4>:
 5e2:	a1 e2       	ldi	r26, 0x21	; 33
 5e4:	1a 2e       	mov	r1, r26
 5e6:	aa 1b       	sub	r26, r26
 5e8:	bb 1b       	sub	r27, r27
 5ea:	fd 01       	movw	r30, r26
 5ec:	0d c0       	rjmp	.+26     	; 0x608 <__udivmodsi4_ep>

000005ee <__udivmodsi4_loop>:
 5ee:	aa 1f       	adc	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	ee 1f       	adc	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	a2 17       	cp	r26, r18
 5f8:	b3 07       	cpc	r27, r19
 5fa:	e4 07       	cpc	r30, r20
 5fc:	f5 07       	cpc	r31, r21
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__udivmodsi4_ep>
 600:	a2 1b       	sub	r26, r18
 602:	b3 0b       	sbc	r27, r19
 604:	e4 0b       	sbc	r30, r20
 606:	f5 0b       	sbc	r31, r21

00000608 <__udivmodsi4_ep>:
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	1a 94       	dec	r1
 612:	69 f7       	brne	.-38     	; 0x5ee <__udivmodsi4_loop>
 614:	60 95       	com	r22
 616:	70 95       	com	r23
 618:	80 95       	com	r24
 61a:	90 95       	com	r25
 61c:	9b 01       	movw	r18, r22
 61e:	ac 01       	movw	r20, r24
 620:	bd 01       	movw	r22, r26
 622:	cf 01       	movw	r24, r30
 624:	08 95       	ret

00000626 <__umulhisi3>:
 626:	a2 9f       	mul	r26, r18
 628:	b0 01       	movw	r22, r0
 62a:	b3 9f       	mul	r27, r19
 62c:	c0 01       	movw	r24, r0
 62e:	a3 9f       	mul	r26, r19
 630:	01 d0       	rcall	.+2      	; 0x634 <__umulhisi3+0xe>
 632:	b2 9f       	mul	r27, r18
 634:	70 0d       	add	r23, r0
 636:	81 1d       	adc	r24, r1
 638:	11 24       	eor	r1, r1
 63a:	91 1d       	adc	r25, r1
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
