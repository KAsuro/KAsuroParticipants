
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000004f8  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001579  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae0  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000821  00000000  00000000  0000274b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005fd  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000997  00000000  00000000  00003931  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	80 c1       	rjmp	.+768    	; 0x306 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	9e c1       	rjmp	.+828    	; 0x346 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	e3 c0       	rjmp	.+454    	; 0x1e4 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1f d0       	rcall	.+62     	; 0x82 <main>
  44:	0d c2       	rjmp	.+1050   	; 0x460 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  4e:	60 e0       	ldi	r22, 0x00	; 0
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	95 d0       	rcall	.+298    	; 0x17e <MotorSpeed>
	if (pause > 0)
  54:	1c 16       	cp	r1, r28
  56:	1d 06       	cpc	r1, r29
  58:	2c f4       	brge	.+10     	; 0x64 <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  5a:	84 e2       	ldi	r24, 0x24	; 36
  5c:	88 d1       	rcall	.+784    	; 0x36e <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  5e:	21 97       	sbiw	r28, 0x01	; 1
  60:	20 97       	sbiw	r28, 0x00	; 0
  62:	d9 f7       	brne	.-10     	; 0x5a <stopAsuro+0x12>
		msleep(pause);
}
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	08 95       	ret

0000006a <flashLED>:

void flashLED (int intervall)
{
  6a:	18 2f       	mov	r17, r24
  6c:	09 2f       	mov	r16, r25
	{
		int status = 0;
		switch (status)
		{
			case 0:
			StatusLED(RED);
  6e:	82 e0       	ldi	r24, 0x02	; 2
  70:	5a d0       	rcall	.+180    	; 0x126 <StatusLED>
			case 2:
			StatusLED(YELLOW);
			status = 0;
			break;
		}
		msleep(intervall);
  72:	c1 2f       	mov	r28, r17
  74:	d0 2f       	mov	r29, r16
  76:	20 97       	sbiw	r28, 0x00	; 0
  78:	d1 f3       	breq	.-12     	; 0x6e <flashLED+0x4>
        sleep(36);
  7a:	84 e2       	ldi	r24, 0x24	; 36
  7c:	78 d1       	rcall	.+752    	; 0x36e <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  7e:	21 97       	sbiw	r28, 0x01	; 1
  80:	fa cf       	rjmp	.-12     	; 0x76 <flashLED+0xc>

00000082 <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
    Init();
  8e:	44 d0       	rcall	.+136    	; 0x118 <Init>
	//int x = 160;
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
		char sensor = PollSwitch();
  90:	11 d1       	rcall	.+546    	; 0x2b4 <PollSwitch>
  92:	18 2f       	mov	r17, r24
		sensor &= 0b00111111;
		MotorDir(FWD, FWD); //Werkeinstellung
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	66 d0       	rcall	.+204    	; 0x166 <MotorDir>
		MotorSpeed(230, 200); 
  9a:	68 ec       	ldi	r22, 0xC8	; 200
  9c:	86 ee       	ldi	r24, 0xE6	; 230
  9e:	6f d0       	rcall	.+222    	; 0x17e <MotorSpeed>
	//int y = 200;
	int i = 0;
	while (1) {  			//Hauptschleife
		i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  a0:	1f 73       	andi	r17, 0x3F	; 63
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 200); 
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
  a2:	59 f4       	brne	.+22     	; 0xba <main+0x38>
		{
			 MotorDir(BWD, BWD); 
			 MotorSpeed(60, 150);
			 msleep(800);
		}
		MotorDir(FWD, FWD); 
  a4:	60 e2       	ldi	r22, 0x20	; 32
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	5e d0       	rcall	.+188    	; 0x166 <MotorDir>
		uint16_t data[] = {0,0};
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	1c 82       	std	Y+4, r1	; 0x04
  b0:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	7d d0       	rcall	.+250    	; 0x1b2 <LineData>
  b8:	13 c0       	rjmp	.+38     	; 0xe0 <main+0x5e>
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(230, 200); 
		
		if (sensor > 0) 	//Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  ba:	60 e1       	ldi	r22, 0x10	; 16
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	53 d0       	rcall	.+166    	; 0x166 <MotorDir>
			 MotorSpeed(60, 150);
  c0:	66 e9       	ldi	r22, 0x96	; 150
  c2:	8c e3       	ldi	r24, 0x3C	; 60
  c4:	5c d0       	rcall	.+184    	; 0x17e <MotorSpeed>
  c6:	00 e2       	ldi	r16, 0x20	; 32
  c8:	13 e0       	ldi	r17, 0x03	; 3
        sleep(36);
  ca:	84 e2       	ldi	r24, 0x24	; 36
  cc:	50 d1       	rcall	.+672    	; 0x36e <sleep>
  ce:	01 50       	subi	r16, 0x01	; 1
  d0:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  d2:	01 15       	cp	r16, r1
  d4:	11 05       	cpc	r17, r1
  d6:	c9 f7       	brne	.-14     	; 0xca <main+0x48>
  d8:	e5 cf       	rjmp	.-54     	; 0xa4 <main+0x22>
		LineData(data);
		
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
		{	
			stopAsuro(500);
  da:	84 ef       	ldi	r24, 0xF4	; 244
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	b4 df       	rcall	.-152    	; 0x48 <stopAsuro>
			LineData(data);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	66 d0       	rcall	.+204    	; 0x1b2 <LineData>
		MotorDir(FWD, FWD); 
		uint16_t data[] = {0,0};
		LineData(data);
		
		LineData(data);
		while ((data[LEFT] > 500) || (data[RIGHT] > 500)) 	//Geschwindigkeit 0 bei Licht über 100E
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	85 3f       	cpi	r24, 0xF5	; 245
  ec:	91 40       	sbci	r25, 0x01	; 1
  ee:	a8 f7       	brcc	.-22     	; 0xda <main+0x58>
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	9c 81       	ldd	r25, Y+4	; 0x04
  f4:	85 3f       	cpi	r24, 0xF5	; 245
  f6:	91 40       	sbci	r25, 0x01	; 1
  f8:	80 f7       	brcc	.-32     	; 0xda <main+0x58>
			}
		}
		switch (status) {
			
			case 0: 
			MotorSpeed(250, 175);
  fa:	6f ea       	ldi	r22, 0xAF	; 175
  fc:	8a ef       	ldi	r24, 0xFA	; 250
  fe:	3f d0       	rcall	.+126    	; 0x17e <MotorSpeed>
 100:	00 ea       	ldi	r16, 0xA0	; 160
 102:	1f e0       	ldi	r17, 0x0F	; 15
        sleep(36);
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	33 d1       	rcall	.+614    	; 0x36e <sleep>
 108:	01 50       	subi	r16, 0x01	; 1
 10a:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 10c:	01 15       	cp	r16, r1
 10e:	11 05       	cpc	r17, r1
 110:	c9 f7       	brne	.-14     	; 0x104 <main+0x82>
			break;
			
			default: 
			MotorDir(BREAK, BREAK);
		}
		flashLED(500);
 112:	84 ef       	ldi	r24, 0xF4	; 244
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	a9 df       	rcall	.-174    	; 0x6a <flashLED>

00000118 <Init>:
 118:	08 d1       	rcall	.+528    	; 0x32a <Timer2Init>
 11a:	38 d0       	rcall	.+112    	; 0x18c <MotorInit>
 11c:	18 d0       	rcall	.+48     	; 0x14e <LEDInit>
 11e:	3c d1       	rcall	.+632    	; 0x398 <ADCInit>
 120:	b6 d0       	rcall	.+364    	; 0x28e <SwitchInit>
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <StatusLED>:
 126:	c0 98       	cbi	0x18, 0	; 24
 128:	92 98       	cbi	0x12, 2	; 18
 12a:	80 fd       	sbrc	r24, 0
 12c:	c0 9a       	sbi	0x18, 0	; 24
 12e:	81 fd       	sbrc	r24, 1
 130:	92 9a       	sbi	0x12, 2	; 18
 132:	08 95       	ret

00000134 <BackLEDFast>:
 134:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 136:	f8 94       	cli
 138:	88 23       	and	r24, r24
 13a:	19 f0       	breq	.+6      	; 0x142 <BackLEDFast+0xe>
 13c:	97 98       	cbi	0x12, 7	; 18
 13e:	a1 9a       	sbi	0x14, 1	; 20
 140:	a0 9a       	sbi	0x14, 0	; 20
 142:	95 b3       	in	r25, 0x15	; 21
 144:	9c 7f       	andi	r25, 0xFC	; 252
 146:	98 2b       	or	r25, r24
 148:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 14a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 14c:	08 95       	ret

0000014e <LEDInit>:
 14e:	b8 9a       	sbi	0x17, 0	; 23
 150:	81 b3       	in	r24, 0x11	; 17
 152:	84 6c       	ori	r24, 0xC4	; 196
 154:	81 bb       	out	0x11, r24	; 17
 156:	96 98       	cbi	0x12, 6	; 18
 158:	97 98       	cbi	0x12, 7	; 18
 15a:	a1 9a       	sbi	0x14, 1	; 20
 15c:	a0 9a       	sbi	0x14, 0	; 20
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	e9 df       	rcall	.-46     	; 0x134 <BackLEDFast>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	e0 cf       	rjmp	.-64     	; 0x126 <StatusLED>

00000166 <MotorDir>:
 166:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 168:	f8 94       	cli
 16a:	92 b3       	in	r25, 0x12	; 18
 16c:	9f 7c       	andi	r25, 0xCF	; 207
 16e:	89 2b       	or	r24, r25
 170:	82 bb       	out	0x12, r24	; 18
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8f 7c       	andi	r24, 0xCF	; 207
 176:	68 2b       	or	r22, r24
 178:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 17a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 17c:	08 95       	ret

0000017e <MotorSpeed>:
 17e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 180:	f8 94       	cli
 182:	1b bc       	out	0x2b, r1	; 43
 184:	8a bd       	out	0x2a, r24	; 42
 186:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 188:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 18a:	08 95       	ret

0000018c <MotorInit>:
 18c:	87 b3       	in	r24, 0x17	; 23
 18e:	86 63       	ori	r24, 0x36	; 54
 190:	87 bb       	out	0x17, r24	; 23
 192:	81 b3       	in	r24, 0x11	; 17
 194:	80 63       	ori	r24, 0x30	; 48
 196:	81 bb       	out	0x11, r24	; 17
 198:	81 ea       	ldi	r24, 0xA1	; 161
 19a:	8f bd       	out	0x2f, r24	; 47
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	8e bd       	out	0x2e, r24	; 46
 1a0:	89 b7       	in	r24, 0x39	; 57
 1a2:	83 7c       	andi	r24, 0xC3	; 195
 1a4:	89 bf       	out	0x39, r24	; 57
 1a6:	60 e2       	ldi	r22, 0x20	; 32
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	dd df       	rcall	.-70     	; 0x166 <MotorDir>
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	e6 cf       	rjmp	.-52     	; 0x17e <MotorSpeed>

000001b2 <LineData>:
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	f4 d0       	rcall	.+488    	; 0x3a4 <__ADCBlockEnter>
 1bc:	18 2f       	mov	r17, r24
 1be:	83 e4       	ldi	r24, 0x43	; 67
 1c0:	19 d1       	rcall	.+562    	; 0x3f4 <ADCSelectChannel>
 1c2:	21 d1       	rcall	.+578    	; 0x406 <ADCMeasure>
 1c4:	24 b1       	in	r18, 0x04	; 4
 1c6:	35 b1       	in	r19, 0x05	; 5
 1c8:	39 83       	std	Y+1, r19	; 0x01
 1ca:	28 83       	st	Y, r18
 1cc:	82 e4       	ldi	r24, 0x42	; 66
 1ce:	12 d1       	rcall	.+548    	; 0x3f4 <ADCSelectChannel>
 1d0:	1a d1       	rcall	.+564    	; 0x406 <ADCMeasure>
 1d2:	24 b1       	in	r18, 0x04	; 4
 1d4:	35 b1       	in	r19, 0x05	; 5
 1d6:	3b 83       	std	Y+3, r19	; 0x03
 1d8:	2a 83       	std	Y+2, r18	; 0x02
 1da:	81 2f       	mov	r24, r17
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	f2 c0       	rjmp	.+484    	; 0x3c8 <__ADCBlockLeave>

000001e4 <__vector_14>:
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	87 b1       	in	r24, 0x07	; 7
 208:	78 94       	sei
 20a:	81 36       	cpi	r24, 0x61	; 97
 20c:	19 f0       	breq	.+6      	; 0x214 <__vector_14+0x30>
 20e:	83 36       	cpi	r24, 0x63	; 99
 210:	a1 f0       	breq	.+40     	; 0x23a <__vector_14+0x56>
 212:	27 c0       	rjmp	.+78     	; 0x262 <__vector_14+0x7e>
 214:	80 91 63 00 	lds	r24, 0x0063
 218:	82 fd       	sbrc	r24, 2
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__vector_14+0x3c>
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	01 c0       	rjmp	.+2      	; 0x222 <__vector_14+0x3e>
 220:	82 e6       	ldi	r24, 0x62	; 98
 222:	f8 94       	cli
 224:	95 b1       	in	r25, 0x05	; 5
 226:	90 93 65 00 	sts	0x0065, r25
 22a:	90 91 60 00 	lds	r25, 0x0060
 22e:	90 93 64 00 	sts	0x0064, r25
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	90 93 68 00 	sts	0x0068, r25
 238:	12 c0       	rjmp	.+36     	; 0x25e <__vector_14+0x7a>
 23a:	80 91 63 00 	lds	r24, 0x0063
 23e:	80 ff       	sbrs	r24, 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <__vector_14+0x62>
 242:	80 e6       	ldi	r24, 0x60	; 96
 244:	01 c0       	rjmp	.+2      	; 0x248 <__vector_14+0x64>
 246:	82 e6       	ldi	r24, 0x62	; 98
 248:	f8 94       	cli
 24a:	95 b1       	in	r25, 0x05	; 5
 24c:	90 93 67 00 	sts	0x0067, r25
 250:	90 91 60 00 	lds	r25, 0x0060
 254:	90 93 66 00 	sts	0x0066, r25
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	90 93 62 00 	sts	0x0062, r25
 25e:	78 94       	sei
 260:	04 c0       	rjmp	.+8      	; 0x26a <__vector_14+0x86>
 262:	95 b1       	in	r25, 0x05	; 5
 264:	90 93 60 00 	sts	0x0060, r25
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	d1 d0       	rcall	.+418    	; 0x40e <ADCInterruptEnable>
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <SwitchInit>:
 28e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 290:	f8 94       	cli
 292:	8b b7       	in	r24, 0x3b	; 59
 294:	8f 77       	andi	r24, 0x7F	; 127
 296:	8b bf       	out	0x3b, r24	; 59
 298:	85 b7       	in	r24, 0x35	; 53
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2a0:	9f bf       	out	0x3f, r25	; 63
 2a2:	a4 98       	cbi	0x14, 4	; 20
 2a4:	85 b3       	in	r24, 0x15	; 21
 2a6:	80 71       	andi	r24, 0x10	; 16
 2a8:	85 bb       	out	0x15, r24	; 21
 2aa:	8b 98       	cbi	0x11, 3	; 17
 2ac:	93 98       	cbi	0x12, 3	; 18
 2ae:	10 92 69 00 	sts	0x0069, r1
 2b2:	08 95       	ret

000002b4 <PollSwitch>:
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	93 9a       	sbi	0x12, 3	; 18
 2be:	8b 9a       	sbi	0x11, 3	; 17
 2c0:	71 d0       	rcall	.+226    	; 0x3a4 <__ADCBlockEnter>
 2c2:	08 2f       	mov	r16, r24
 2c4:	84 e4       	ldi	r24, 0x44	; 68
 2c6:	96 d0       	rcall	.+300    	; 0x3f4 <ADCSelectChannel>
 2c8:	14 e0       	ldi	r17, 0x04	; 4
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	9b d0       	rcall	.+310    	; 0x406 <ADCMeasure>
 2d0:	24 b1       	in	r18, 0x04	; 4
 2d2:	35 b1       	in	r19, 0x05	; 5
 2d4:	c2 0f       	add	r28, r18
 2d6:	d3 1f       	adc	r29, r19
 2d8:	11 50       	subi	r17, 0x01	; 1
 2da:	c9 f7       	brne	.-14     	; 0x2ce <PollSwitch+0x1a>
 2dc:	80 2f       	mov	r24, r16
 2de:	74 d0       	rcall	.+232    	; 0x3c8 <__ADCBlockLeave>
 2e0:	8b 98       	cbi	0x11, 3	; 17
 2e2:	93 98       	cbi	0x12, 3	; 18
 2e4:	be 01       	movw	r22, r28
 2e6:	76 95       	lsr	r23
 2e8:	67 95       	ror	r22
 2ea:	76 95       	lsr	r23
 2ec:	67 95       	ror	r22
 2ee:	cb 01       	movw	r24, r22
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	98 50       	subi	r25, 0x08	; 8
 2f6:	a0 d0       	rcall	.+320    	; 0x438 <__udivmodhi4>
 2f8:	82 ec       	ldi	r24, 0xC2	; 194
 2fa:	86 0f       	add	r24, r22
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <__vector_2>:
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	8f 93       	push	r24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 69 00 	sts	0x0069, r24
 318:	8b b7       	in	r24, 0x3b	; 59
 31a:	8f 77       	andi	r24, 0x7F	; 127
 31c:	8b bf       	out	0x3b, r24	; 59
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <Timer2Init>:
 32a:	12 bc       	out	0x22, r1	; 34
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	85 bd       	out	0x25, r24	; 37
 330:	89 b7       	in	r24, 0x39	; 57
 332:	80 64       	ori	r24, 0x40	; 64
 334:	89 bf       	out	0x39, r24	; 57
 336:	81 e9       	ldi	r24, 0x91	; 145
 338:	83 bd       	out	0x23, r24	; 35
 33a:	85 b5       	in	r24, 0x25	; 37
 33c:	87 78       	andi	r24, 0x87	; 135
 33e:	85 bd       	out	0x25, r24	; 37
 340:	bb 9a       	sbi	0x17, 3	; 23
 342:	c3 98       	cbi	0x18, 3	; 24
 344:	08 95       	ret

00000346 <__vector_4>:
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	84 b5       	in	r24, 0x24	; 36
 354:	8b 5d       	subi	r24, 0xDB	; 219
 356:	84 bd       	out	0x24, r24	; 36
 358:	80 91 6a 00 	lds	r24, 0x006A
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 6a 00 	sts	0x006A, r24
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <sleep>:
 36e:	f8 94       	cli
 370:	95 b7       	in	r25, 0x35	; 53
 372:	9f 70       	andi	r25, 0x0F	; 15
 374:	90 68       	ori	r25, 0x80	; 128
 376:	95 bf       	out	0x35, r25	; 53
 378:	78 94       	sei
 37a:	90 91 6a 00 	lds	r25, 0x006A
 37e:	89 0f       	add	r24, r25
 380:	90 91 6a 00 	lds	r25, 0x006A
 384:	98 17       	cp	r25, r24
 386:	11 f0       	breq	.+4      	; 0x38c <sleep+0x1e>
 388:	88 95       	sleep
 38a:	fa cf       	rjmp	.-12     	; 0x380 <sleep+0x12>
 38c:	f8 94       	cli
 38e:	85 b7       	in	r24, 0x35	; 53
 390:	8f 77       	andi	r24, 0x7F	; 127
 392:	85 bf       	out	0x35, r24	; 53
 394:	78 94       	sei
 396:	08 95       	ret

00000398 <ADCInit>:
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	80 93 61 00 	sts	0x0061, r24
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	86 b9       	out	0x06, r24	; 6
 3a2:	08 95       	ret

000003a4 <__ADCBlockEnter>:
 3a4:	2f b7       	in	r18, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	87 b1       	in	r24, 0x07	; 7
 3aa:	96 b1       	in	r25, 0x06	; 6
 3ac:	39 2f       	mov	r19, r25
 3ae:	38 78       	andi	r19, 0x88	; 136
 3b0:	31 f0       	breq	.+12     	; 0x3be <__ADCBlockEnter+0x1a>
 3b2:	93 ff       	sbrs	r25, 3
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <__ADCBlockEnter+0x1c>
 3b6:	80 93 61 00 	sts	0x0061, r24
 3ba:	86 e8       	ldi	r24, 0x86	; 134
 3bc:	86 b9       	out	0x06, r24	; 6
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	2f bf       	out	0x3f, r18	; 63
 3c2:	36 99       	sbic	0x06, 6	; 6
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <__ADCBlockEnter+0x1e>
 3c6:	08 95       	ret

000003c8 <__ADCBlockLeave>:
 3c8:	3f b7       	in	r19, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	8f 3f       	cpi	r24, 0xFF	; 255
 3ce:	31 f4       	brne	.+12     	; 0x3dc <__ADCBlockLeave+0x14>
 3d0:	80 91 61 00 	lds	r24, 0x0061
 3d4:	8f 3f       	cpi	r24, 0xFF	; 255
 3d6:	51 f0       	breq	.+20     	; 0x3ec <__ADCBlockLeave+0x24>
 3d8:	2e ed       	ldi	r18, 0xDE	; 222
 3da:	01 c0       	rjmp	.+2      	; 0x3de <__ADCBlockLeave+0x16>
 3dc:	26 ed       	ldi	r18, 0xD6	; 214
 3de:	97 b1       	in	r25, 0x07	; 7
 3e0:	98 27       	eor	r25, r24
 3e2:	90 7c       	andi	r25, 0xC0	; 192
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__ADCBlockLeave+0x20>
 3e6:	16 b8       	out	0x06, r1	; 6
 3e8:	87 b9       	out	0x07, r24	; 7
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <__ADCBlockLeave+0x26>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	26 b9       	out	0x06, r18	; 6
 3f0:	3f bf       	out	0x3f, r19	; 63
 3f2:	08 95       	ret

000003f4 <ADCSelectChannel>:
 3f4:	97 b1       	in	r25, 0x07	; 7
 3f6:	98 27       	eor	r25, r24
 3f8:	90 7c       	andi	r25, 0xC0	; 192
 3fa:	09 f0       	breq	.+2      	; 0x3fe <ADCSelectChannel+0xa>
 3fc:	16 b8       	out	0x06, r1	; 6
 3fe:	96 e8       	ldi	r25, 0x86	; 134
 400:	96 b9       	out	0x06, r25	; 6
 402:	87 b9       	out	0x07, r24	; 7
 404:	08 95       	ret

00000406 <ADCMeasure>:
 406:	36 9a       	sbi	0x06, 6	; 6
 408:	36 99       	sbic	0x06, 6	; 6
 40a:	fe cf       	rjmp	.-4      	; 0x408 <ADCMeasure+0x2>
 40c:	08 95       	ret

0000040e <ADCInterruptEnable>:
 40e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 410:	f8 94       	cli
 412:	96 b1       	in	r25, 0x06	; 6
 414:	97 ff       	sbrs	r25, 7
 416:	02 c0       	rjmp	.+4      	; 0x41c <ADCInterruptEnable+0xe>
 418:	93 ff       	sbrs	r25, 3
 41a:	0a c0       	rjmp	.+20     	; 0x430 <ADCInterruptEnable+0x22>
 41c:	97 b1       	in	r25, 0x07	; 7
 41e:	98 27       	eor	r25, r24
 420:	90 7c       	andi	r25, 0xC0	; 192
 422:	09 f0       	breq	.+2      	; 0x426 <ADCInterruptEnable+0x18>
 424:	16 b8       	out	0x06, r1	; 6
 426:	36 99       	sbic	0x06, 6	; 6
 428:	16 b8       	out	0x06, r1	; 6
 42a:	87 b9       	out	0x07, r24	; 7
 42c:	9e ed       	ldi	r25, 0xDE	; 222
 42e:	96 b9       	out	0x06, r25	; 6
 430:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 434:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 436:	08 95       	ret

00000438 <__udivmodhi4>:
 438:	aa 1b       	sub	r26, r26
 43a:	bb 1b       	sub	r27, r27
 43c:	51 e1       	ldi	r21, 0x11	; 17
 43e:	07 c0       	rjmp	.+14     	; 0x44e <__udivmodhi4_ep>

00000440 <__udivmodhi4_loop>:
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	a6 17       	cp	r26, r22
 446:	b7 07       	cpc	r27, r23
 448:	10 f0       	brcs	.+4      	; 0x44e <__udivmodhi4_ep>
 44a:	a6 1b       	sub	r26, r22
 44c:	b7 0b       	sbc	r27, r23

0000044e <__udivmodhi4_ep>:
 44e:	88 1f       	adc	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	5a 95       	dec	r21
 454:	a9 f7       	brne	.-22     	; 0x440 <__udivmodhi4_loop>
 456:	80 95       	com	r24
 458:	90 95       	com	r25
 45a:	bc 01       	movw	r22, r24
 45c:	cd 01       	movw	r24, r26
 45e:	08 95       	ret

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
