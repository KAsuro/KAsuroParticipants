
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  00000724  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001585  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000821  00000000  00000000  0000292a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  0000314c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009de  00000000  00000000  00003adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  000044b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	d0 c1       	rjmp	.+928    	; 0x3a6 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	ee c1       	rjmp	.+988    	; 0x3e6 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	33 c1       	rjmp	.+614    	; 0x284 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	af 36       	cpi	r26, 0x6F	; 111
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	ec e8       	ldi	r30, 0x8C	; 140
  4a:	f6 e0       	ldi	r31, 0x06	; 6
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>
  58:	13 d0       	rcall	.+38     	; 0x80 <main>
  5a:	16 c3       	rjmp	.+1580   	; 0x688 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <stopAsuro>:
#include <stdio.h>

void stopAsuro(int pause) 
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ec 01       	movw	r28, r24
	MotorSpeed(0, 0);
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	da d0       	rcall	.+436    	; 0x21e <MotorSpeed>
	if (pause > 0)
  6a:	1c 16       	cp	r1, r28
  6c:	1d 06       	cpc	r1, r29
  6e:	2c f4       	brge	.+10     	; 0x7a <stopAsuro+0x1c>
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  70:	84 e2       	ldi	r24, 0x24	; 36
  72:	cd d1       	rcall	.+922    	; 0x40e <sleep>
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  74:	21 97       	sbiw	r28, 0x01	; 1
  76:	20 97       	sbiw	r28, 0x00	; 0
  78:	d9 f7       	brne	.-10     	; 0x70 <stopAsuro+0x12>
		msleep(pause);
}
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

00000080 <main>:

#include <asuro/asuro.h>
#include "helpers.h"
#include <stdlib.h>

void main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    Init();
  8c:	8a d0       	rcall	.+276    	; 0x1a2 <Init>
	//int x = 160;
	//int y = 200;
	int i = 0;
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
  92:	38 eb       	ldi	r19, 0xB8	; 184
  94:	c3 2e       	mov	r12, r19
  96:	3b e0       	ldi	r19, 0x0B	; 11
  98:	d3 2e       	mov	r13, r19
			int ran;
			ran = rand() % 2;
  9a:	42 e0       	ldi	r20, 0x02	; 2
  9c:	a4 2e       	mov	r10, r20
  9e:	b1 2c       	mov	r11, r1
	//int x = 160;
	//int y = 200;
	int i = 0;
	
	while (1) {  	//Hauptschleife
		i++;
  a0:	0f 5f       	subi	r16, 0xFF	; 255
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
		char sensor = PollSwitch();
  a4:	57 d1       	rcall	.+686    	; 0x354 <PollSwitch>
  a6:	f8 2e       	mov	r15, r24
		sensor &= 0b00111111;
		
		MotorDir(FWD, FWD); //Werkeinstellung
  a8:	60 e2       	ldi	r22, 0x20	; 32
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	ac d0       	rcall	.+344    	; 0x206 <MotorDir>
		MotorSpeed(170, 130); 
  ae:	62 e8       	ldi	r22, 0x82	; 130
  b0:	8a ea       	ldi	r24, 0xAA	; 170
  b2:	b5 d0       	rcall	.+362    	; 0x21e <MotorSpeed>
	int i = 0;
	
	while (1) {  	//Hauptschleife
		i++;
		char sensor = PollSwitch();
		sensor &= 0b00111111;
  b4:	8f 2d       	mov	r24, r15
  b6:	8f 73       	andi	r24, 0x3F	; 63
		
		MotorDir(FWD, FWD); //Werkeinstellung
		MotorSpeed(170, 130); 
		
		
		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
  b8:	69 f4       	brne	.+26     	; 0xd4 <main+0x54>
			 MotorSpeed(60, 150);
			 StatusLED(RED);
			 msleep(800);
		}
		
		uint16_t data[] = {0,0};
  ba:	1a 82       	std	Y+2, r1	; 0x02
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	1c 82       	std	Y+4, r1	; 0x04
  c0:	1b 82       	std	Y+3, r1	; 0x03
		LineData(data);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	c5 d0       	rcall	.+394    	; 0x252 <LineData>
		
		if (((data[LEFT] > 50) || (data[RIGHT] > 50)) && ((data[LEFT] < 150) || (data[RIGHT] < 150))) { 		//Geschwindigkeit geringer bei Licht über 50E
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	83 33       	cpi	r24, 0x33	; 51
  ce:	91 05       	cpc	r25, r1
  d0:	d8 f4       	brcc	.+54     	; 0x108 <main+0x88>
  d2:	15 c0       	rjmp	.+42     	; 0xfe <main+0x7e>
		MotorSpeed(170, 130); 
		
		
		if (sensor > 0) //Abfrage der sechs Drucksensoren -> backwards
		{
			 MotorDir(BWD, BWD); 
  d4:	60 e1       	ldi	r22, 0x10	; 16
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	96 d0       	rcall	.+300    	; 0x206 <MotorDir>
			 MotorSpeed(60, 150);
  da:	66 e9       	ldi	r22, 0x96	; 150
  dc:	8c e3       	ldi	r24, 0x3C	; 60
  de:	9f d0       	rcall	.+318    	; 0x21e <MotorSpeed>
			 StatusLED(RED);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	66 d0       	rcall	.+204    	; 0x1b0 <StatusLED>
  e4:	20 e2       	ldi	r18, 0x20	; 32
  e6:	e2 2e       	mov	r14, r18
  e8:	23 e0       	ldi	r18, 0x03	; 3
  ea:	f2 2e       	mov	r15, r18
        sleep(36);
  ec:	84 e2       	ldi	r24, 0x24	; 36
  ee:	8f d1       	rcall	.+798    	; 0x40e <sleep>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	e8 1a       	sub	r14, r24
  f4:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  f6:	e1 14       	cp	r14, r1
  f8:	f1 04       	cpc	r15, r1
  fa:	c1 f7       	brne	.-16     	; 0xec <main+0x6c>
  fc:	de cf       	rjmp	.-68     	; 0xba <main+0x3a>
		}
		
		uint16_t data[] = {0,0};
		LineData(data);
		
		if (((data[LEFT] > 50) || (data[RIGHT] > 50)) && ((data[LEFT] < 150) || (data[RIGHT] < 150))) { 		//Geschwindigkeit geringer bei Licht über 50E
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	c3 97       	sbiw	r24, 0x33	; 51
 104:	48 f4       	brcc	.+18     	; 0x118 <main+0x98>
 106:	20 c0       	rjmp	.+64     	; 0x148 <main+0xc8>
 108:	86 39       	cpi	r24, 0x96	; 150
 10a:	91 05       	cpc	r25, r1
 10c:	28 f0       	brcs	.+10     	; 0x118 <main+0x98>
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	86 39       	cpi	r24, 0x96	; 150
 114:	91 05       	cpc	r25, r1
 116:	c0 f4       	brcc	.+48     	; 0x148 <main+0xc8>
				MotorSpeed(50, 70);
 118:	66 e4       	ldi	r22, 0x46	; 70
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	80 d0       	rcall	.+256    	; 0x21e <MotorSpeed>
 11e:	90 ed       	ldi	r25, 0xD0	; 208
 120:	e9 2e       	mov	r14, r25
 122:	97 e0       	ldi	r25, 0x07	; 7
 124:	f9 2e       	mov	r15, r25
        sleep(36);
 126:	84 e2       	ldi	r24, 0x24	; 36
 128:	72 d1       	rcall	.+740    	; 0x40e <sleep>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	e8 1a       	sub	r14, r24
 12e:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 130:	e1 14       	cp	r14, r1
 132:	f1 04       	cpc	r15, r1
 134:	c1 f7       	brne	.-16     	; 0x126 <main+0xa6>
 136:	08 c0       	rjmp	.+16     	; 0x148 <main+0xc8>
				msleep(2000);
		}
		LineData(data);
		while ((data[LEFT] > 150) || (data[RIGHT] > 150)) 	//Geschwindigkeit 0 bei Licht über 100E
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	9c 81       	ldd	r25, Y+4	; 0x04
 13c:	87 39       	cpi	r24, 0x97	; 151
 13e:	91 05       	cpc	r25, r1
 140:	60 f0       	brcs	.+24     	; 0x15a <main+0xda>
		{	
			stopAsuro(500);
 142:	84 ef       	ldi	r24, 0xF4	; 244
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	8b df       	rcall	.-234    	; 0x5e <stopAsuro>
			LineData(data);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	82 d0       	rcall	.+260    	; 0x252 <LineData>
		if (((data[LEFT] > 50) || (data[RIGHT] > 50)) && ((data[LEFT] < 150) || (data[RIGHT] < 150))) { 		//Geschwindigkeit geringer bei Licht über 50E
				MotorSpeed(50, 70);
				msleep(2000);
		}
		LineData(data);
		while ((data[LEFT] > 150) || (data[RIGHT] > 150)) 	//Geschwindigkeit 0 bei Licht über 100E
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	87 39       	cpi	r24, 0x97	; 151
 154:	91 05       	cpc	r25, r1
 156:	80 f3       	brcs	.-32     	; 0x138 <main+0xb8>
 158:	f4 cf       	rjmp	.-24     	; 0x142 <main+0xc2>
		{	
			stopAsuro(500);
			LineData(data);
		} 
		
		if ( (i % 3000) == 0) {
 15a:	c8 01       	movw	r24, r16
 15c:	b6 01       	movw	r22, r12
 15e:	d0 d1       	rcall	.+928    	; 0x500 <__divmodhi4>
 160:	89 2b       	or	r24, r25
 162:	51 f4       	brne	.+20     	; 0x178 <main+0xf8>
			int ran;
			ran = rand() % 2;
 164:	29 d2       	rcall	.+1106   	; 0x5b8 <rand>
 166:	b5 01       	movw	r22, r10
 168:	cb d1       	rcall	.+918    	; 0x500 <__divmodhi4>
			if (ran) {
 16a:	89 2b       	or	r24, r25
 16c:	29 f0       	breq	.+10     	; 0x178 <main+0xf8>
				StatusLED(YELLOW);
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	1f d0       	rcall	.+62     	; 0x1b0 <StatusLED>
				stopAsuro(3000);
 172:	88 eb       	ldi	r24, 0xB8	; 184
 174:	9b e0       	ldi	r25, 0x0B	; 11
 176:	73 df       	rcall	.-282    	; 0x5e <stopAsuro>
			}
		}
		MotorSpeed(160, 210);
 178:	62 ed       	ldi	r22, 0xD2	; 210
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	50 d0       	rcall	.+160    	; 0x21e <MotorSpeed>
		StatusLED(GREEN);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	17 d0       	rcall	.+46     	; 0x1b0 <StatusLED>
		BackLED(OFF, OFF);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	34 d0       	rcall	.+104    	; 0x1f0 <BackLED>
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	e8 2e       	mov	r14, r24
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	f8 2e       	mov	r15, r24
        sleep(36);
 190:	84 e2       	ldi	r24, 0x24	; 36
 192:	3d d1       	rcall	.+634    	; 0x40e <sleep>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	e8 1a       	sub	r14, r24
 198:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 19a:	e1 14       	cp	r14, r1
 19c:	f1 04       	cpc	r15, r1
 19e:	c1 f7       	brne	.-16     	; 0x190 <main+0x110>
 1a0:	7f cf       	rjmp	.-258    	; 0xa0 <main+0x20>

000001a2 <Init>:
 1a2:	13 d1       	rcall	.+550    	; 0x3ca <Timer2Init>
 1a4:	43 d0       	rcall	.+134    	; 0x22c <MotorInit>
 1a6:	18 d0       	rcall	.+48     	; 0x1d8 <LEDInit>
 1a8:	47 d1       	rcall	.+654    	; 0x438 <ADCInit>
 1aa:	c1 d0       	rcall	.+386    	; 0x32e <SwitchInit>
 1ac:	78 94       	sei
 1ae:	08 95       	ret

000001b0 <StatusLED>:
 1b0:	c0 98       	cbi	0x18, 0	; 24
 1b2:	92 98       	cbi	0x12, 2	; 18
 1b4:	80 fd       	sbrc	r24, 0
 1b6:	c0 9a       	sbi	0x18, 0	; 24
 1b8:	81 fd       	sbrc	r24, 1
 1ba:	92 9a       	sbi	0x12, 2	; 18
 1bc:	08 95       	ret

000001be <BackLEDFast>:
 1be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1c0:	f8 94       	cli
 1c2:	88 23       	and	r24, r24
 1c4:	19 f0       	breq	.+6      	; 0x1cc <BackLEDFast+0xe>
 1c6:	97 98       	cbi	0x12, 7	; 18
 1c8:	a1 9a       	sbi	0x14, 1	; 20
 1ca:	a0 9a       	sbi	0x14, 0	; 20
 1cc:	95 b3       	in	r25, 0x15	; 21
 1ce:	9c 7f       	andi	r25, 0xFC	; 252
 1d0:	98 2b       	or	r25, r24
 1d2:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1d4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1d6:	08 95       	ret

000001d8 <LEDInit>:
 1d8:	b8 9a       	sbi	0x17, 0	; 23
 1da:	81 b3       	in	r24, 0x11	; 17
 1dc:	84 6c       	ori	r24, 0xC4	; 196
 1de:	81 bb       	out	0x11, r24	; 17
 1e0:	96 98       	cbi	0x12, 6	; 18
 1e2:	97 98       	cbi	0x12, 7	; 18
 1e4:	a1 9a       	sbi	0x14, 1	; 20
 1e6:	a0 9a       	sbi	0x14, 0	; 20
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	e9 df       	rcall	.-46     	; 0x1be <BackLEDFast>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	e0 cf       	rjmp	.-64     	; 0x1b0 <StatusLED>

000001f0 <BackLED>:
 1f0:	88 23       	and	r24, r24
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <BackLED+0x8>
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <BackLED+0xa>
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	61 11       	cpse	r22, r1
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <BackLED+0x12>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	89 2b       	or	r24, r25
 204:	dc cf       	rjmp	.-72     	; 0x1be <BackLEDFast>

00000206 <MotorDir>:
 206:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 208:	f8 94       	cli
 20a:	92 b3       	in	r25, 0x12	; 18
 20c:	9f 7c       	andi	r25, 0xCF	; 207
 20e:	89 2b       	or	r24, r25
 210:	82 bb       	out	0x12, r24	; 18
 212:	88 b3       	in	r24, 0x18	; 24
 214:	8f 7c       	andi	r24, 0xCF	; 207
 216:	68 2b       	or	r22, r24
 218:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 21a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 21c:	08 95       	ret

0000021e <MotorSpeed>:
 21e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 220:	f8 94       	cli
 222:	1b bc       	out	0x2b, r1	; 43
 224:	8a bd       	out	0x2a, r24	; 42
 226:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 228:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 22a:	08 95       	ret

0000022c <MotorInit>:
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	86 63       	ori	r24, 0x36	; 54
 230:	87 bb       	out	0x17, r24	; 23
 232:	81 b3       	in	r24, 0x11	; 17
 234:	80 63       	ori	r24, 0x30	; 48
 236:	81 bb       	out	0x11, r24	; 17
 238:	81 ea       	ldi	r24, 0xA1	; 161
 23a:	8f bd       	out	0x2f, r24	; 47
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	8e bd       	out	0x2e, r24	; 46
 240:	89 b7       	in	r24, 0x39	; 57
 242:	83 7c       	andi	r24, 0xC3	; 195
 244:	89 bf       	out	0x39, r24	; 57
 246:	60 e2       	ldi	r22, 0x20	; 32
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	dd df       	rcall	.-70     	; 0x206 <MotorDir>
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	e6 cf       	rjmp	.-52     	; 0x21e <MotorSpeed>

00000252 <LineData>:
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
 25a:	f4 d0       	rcall	.+488    	; 0x444 <__ADCBlockEnter>
 25c:	18 2f       	mov	r17, r24
 25e:	83 e4       	ldi	r24, 0x43	; 67
 260:	19 d1       	rcall	.+562    	; 0x494 <ADCSelectChannel>
 262:	21 d1       	rcall	.+578    	; 0x4a6 <ADCMeasure>
 264:	24 b1       	in	r18, 0x04	; 4
 266:	35 b1       	in	r19, 0x05	; 5
 268:	39 83       	std	Y+1, r19	; 0x01
 26a:	28 83       	st	Y, r18
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	12 d1       	rcall	.+548    	; 0x494 <ADCSelectChannel>
 270:	1a d1       	rcall	.+564    	; 0x4a6 <ADCMeasure>
 272:	24 b1       	in	r18, 0x04	; 4
 274:	35 b1       	in	r19, 0x05	; 5
 276:	3b 83       	std	Y+3, r19	; 0x03
 278:	2a 83       	std	Y+2, r18	; 0x02
 27a:	81 2f       	mov	r24, r17
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	f2 c0       	rjmp	.+484    	; 0x468 <__ADCBlockLeave>

00000284 <__vector_14>:
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
 2a6:	87 b1       	in	r24, 0x07	; 7
 2a8:	78 94       	sei
 2aa:	81 36       	cpi	r24, 0x61	; 97
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <__vector_14+0x30>
 2ae:	83 36       	cpi	r24, 0x63	; 99
 2b0:	a1 f0       	breq	.+40     	; 0x2da <__vector_14+0x56>
 2b2:	27 c0       	rjmp	.+78     	; 0x302 <__vector_14+0x7e>
 2b4:	80 91 67 00 	lds	r24, 0x0067
 2b8:	82 fd       	sbrc	r24, 2
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__vector_14+0x3c>
 2bc:	80 e6       	ldi	r24, 0x60	; 96
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <__vector_14+0x3e>
 2c0:	82 e6       	ldi	r24, 0x62	; 98
 2c2:	f8 94       	cli
 2c4:	95 b1       	in	r25, 0x05	; 5
 2c6:	90 93 69 00 	sts	0x0069, r25
 2ca:	90 91 64 00 	lds	r25, 0x0064
 2ce:	90 93 68 00 	sts	0x0068, r25
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	90 93 6c 00 	sts	0x006C, r25
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <__vector_14+0x7a>
 2da:	80 91 67 00 	lds	r24, 0x0067
 2de:	80 ff       	sbrs	r24, 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_14+0x62>
 2e2:	80 e6       	ldi	r24, 0x60	; 96
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <__vector_14+0x64>
 2e6:	82 e6       	ldi	r24, 0x62	; 98
 2e8:	f8 94       	cli
 2ea:	95 b1       	in	r25, 0x05	; 5
 2ec:	90 93 6b 00 	sts	0x006B, r25
 2f0:	90 91 64 00 	lds	r25, 0x0064
 2f4:	90 93 6a 00 	sts	0x006A, r25
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	90 93 66 00 	sts	0x0066, r25
 2fe:	78 94       	sei
 300:	04 c0       	rjmp	.+8      	; 0x30a <__vector_14+0x86>
 302:	95 b1       	in	r25, 0x05	; 5
 304:	90 93 64 00 	sts	0x0064, r25
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	d1 d0       	rcall	.+418    	; 0x4ae <ADCInterruptEnable>
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <SwitchInit>:
 32e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 330:	f8 94       	cli
 332:	8b b7       	in	r24, 0x3b	; 59
 334:	8f 77       	andi	r24, 0x7F	; 127
 336:	8b bf       	out	0x3b, r24	; 59
 338:	85 b7       	in	r24, 0x35	; 53
 33a:	87 7f       	andi	r24, 0xF7	; 247
 33c:	84 60       	ori	r24, 0x04	; 4
 33e:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 340:	9f bf       	out	0x3f, r25	; 63
 342:	a4 98       	cbi	0x14, 4	; 20
 344:	85 b3       	in	r24, 0x15	; 21
 346:	80 71       	andi	r24, 0x10	; 16
 348:	85 bb       	out	0x15, r24	; 21
 34a:	8b 98       	cbi	0x11, 3	; 17
 34c:	93 98       	cbi	0x12, 3	; 18
 34e:	10 92 6d 00 	sts	0x006D, r1
 352:	08 95       	ret

00000354 <PollSwitch>:
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	93 9a       	sbi	0x12, 3	; 18
 35e:	8b 9a       	sbi	0x11, 3	; 17
 360:	71 d0       	rcall	.+226    	; 0x444 <__ADCBlockEnter>
 362:	08 2f       	mov	r16, r24
 364:	84 e4       	ldi	r24, 0x44	; 68
 366:	96 d0       	rcall	.+300    	; 0x494 <ADCSelectChannel>
 368:	14 e0       	ldi	r17, 0x04	; 4
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	d0 e0       	ldi	r29, 0x00	; 0
 36e:	9b d0       	rcall	.+310    	; 0x4a6 <ADCMeasure>
 370:	24 b1       	in	r18, 0x04	; 4
 372:	35 b1       	in	r19, 0x05	; 5
 374:	c2 0f       	add	r28, r18
 376:	d3 1f       	adc	r29, r19
 378:	11 50       	subi	r17, 0x01	; 1
 37a:	c9 f7       	brne	.-14     	; 0x36e <PollSwitch+0x1a>
 37c:	80 2f       	mov	r24, r16
 37e:	74 d0       	rcall	.+232    	; 0x468 <__ADCBlockLeave>
 380:	8b 98       	cbi	0x11, 3	; 17
 382:	93 98       	cbi	0x12, 3	; 18
 384:	be 01       	movw	r22, r28
 386:	76 95       	lsr	r23
 388:	67 95       	ror	r22
 38a:	76 95       	lsr	r23
 38c:	67 95       	ror	r22
 38e:	cb 01       	movw	r24, r22
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	98 50       	subi	r25, 0x08	; 8
 396:	a0 d0       	rcall	.+320    	; 0x4d8 <__udivmodhi4>
 398:	82 ec       	ldi	r24, 0xC2	; 194
 39a:	86 0f       	add	r24, r22
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <__vector_2>:
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	8f 93       	push	r24
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 6d 00 	sts	0x006D, r24
 3b8:	8b b7       	in	r24, 0x3b	; 59
 3ba:	8f 77       	andi	r24, 0x7F	; 127
 3bc:	8b bf       	out	0x3b, r24	; 59
 3be:	8f 91       	pop	r24
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <Timer2Init>:
 3ca:	12 bc       	out	0x22, r1	; 34
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	85 bd       	out	0x25, r24	; 37
 3d0:	89 b7       	in	r24, 0x39	; 57
 3d2:	80 64       	ori	r24, 0x40	; 64
 3d4:	89 bf       	out	0x39, r24	; 57
 3d6:	81 e9       	ldi	r24, 0x91	; 145
 3d8:	83 bd       	out	0x23, r24	; 35
 3da:	85 b5       	in	r24, 0x25	; 37
 3dc:	87 78       	andi	r24, 0x87	; 135
 3de:	85 bd       	out	0x25, r24	; 37
 3e0:	bb 9a       	sbi	0x17, 3	; 23
 3e2:	c3 98       	cbi	0x18, 3	; 24
 3e4:	08 95       	ret

000003e6 <__vector_4>:
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
 3f2:	84 b5       	in	r24, 0x24	; 36
 3f4:	8b 5d       	subi	r24, 0xDB	; 219
 3f6:	84 bd       	out	0x24, r24	; 36
 3f8:	80 91 6e 00 	lds	r24, 0x006E
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	80 93 6e 00 	sts	0x006E, r24
 402:	8f 91       	pop	r24
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <sleep>:
 40e:	f8 94       	cli
 410:	95 b7       	in	r25, 0x35	; 53
 412:	9f 70       	andi	r25, 0x0F	; 15
 414:	90 68       	ori	r25, 0x80	; 128
 416:	95 bf       	out	0x35, r25	; 53
 418:	78 94       	sei
 41a:	90 91 6e 00 	lds	r25, 0x006E
 41e:	89 0f       	add	r24, r25
 420:	90 91 6e 00 	lds	r25, 0x006E
 424:	98 17       	cp	r25, r24
 426:	11 f0       	breq	.+4      	; 0x42c <sleep+0x1e>
 428:	88 95       	sleep
 42a:	fa cf       	rjmp	.-12     	; 0x420 <sleep+0x12>
 42c:	f8 94       	cli
 42e:	85 b7       	in	r24, 0x35	; 53
 430:	8f 77       	andi	r24, 0x7F	; 127
 432:	85 bf       	out	0x35, r24	; 53
 434:	78 94       	sei
 436:	08 95       	ret

00000438 <ADCInit>:
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	80 93 65 00 	sts	0x0065, r24
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	86 b9       	out	0x06, r24	; 6
 442:	08 95       	ret

00000444 <__ADCBlockEnter>:
 444:	2f b7       	in	r18, 0x3f	; 63
 446:	f8 94       	cli
 448:	87 b1       	in	r24, 0x07	; 7
 44a:	96 b1       	in	r25, 0x06	; 6
 44c:	39 2f       	mov	r19, r25
 44e:	38 78       	andi	r19, 0x88	; 136
 450:	31 f0       	breq	.+12     	; 0x45e <__ADCBlockEnter+0x1a>
 452:	93 ff       	sbrs	r25, 3
 454:	05 c0       	rjmp	.+10     	; 0x460 <__stack+0x1>
 456:	80 93 65 00 	sts	0x0065, r24
 45a:	86 e8       	ldi	r24, 0x86	; 134
 45c:	86 b9       	out	0x06, r24	; 6
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	2f bf       	out	0x3f, r18	; 63
 462:	36 99       	sbic	0x06, 6	; 6
 464:	fe cf       	rjmp	.-4      	; 0x462 <__stack+0x3>
 466:	08 95       	ret

00000468 <__ADCBlockLeave>:
 468:	3f b7       	in	r19, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	8f 3f       	cpi	r24, 0xFF	; 255
 46e:	31 f4       	brne	.+12     	; 0x47c <__ADCBlockLeave+0x14>
 470:	80 91 65 00 	lds	r24, 0x0065
 474:	8f 3f       	cpi	r24, 0xFF	; 255
 476:	51 f0       	breq	.+20     	; 0x48c <__ADCBlockLeave+0x24>
 478:	2e ed       	ldi	r18, 0xDE	; 222
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__ADCBlockLeave+0x16>
 47c:	26 ed       	ldi	r18, 0xD6	; 214
 47e:	97 b1       	in	r25, 0x07	; 7
 480:	98 27       	eor	r25, r24
 482:	90 7c       	andi	r25, 0xC0	; 192
 484:	09 f0       	breq	.+2      	; 0x488 <__ADCBlockLeave+0x20>
 486:	16 b8       	out	0x06, r1	; 6
 488:	87 b9       	out	0x07, r24	; 7
 48a:	01 c0       	rjmp	.+2      	; 0x48e <__ADCBlockLeave+0x26>
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	26 b9       	out	0x06, r18	; 6
 490:	3f bf       	out	0x3f, r19	; 63
 492:	08 95       	ret

00000494 <ADCSelectChannel>:
 494:	97 b1       	in	r25, 0x07	; 7
 496:	98 27       	eor	r25, r24
 498:	90 7c       	andi	r25, 0xC0	; 192
 49a:	09 f0       	breq	.+2      	; 0x49e <ADCSelectChannel+0xa>
 49c:	16 b8       	out	0x06, r1	; 6
 49e:	96 e8       	ldi	r25, 0x86	; 134
 4a0:	96 b9       	out	0x06, r25	; 6
 4a2:	87 b9       	out	0x07, r24	; 7
 4a4:	08 95       	ret

000004a6 <ADCMeasure>:
 4a6:	36 9a       	sbi	0x06, 6	; 6
 4a8:	36 99       	sbic	0x06, 6	; 6
 4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <ADCMeasure+0x2>
 4ac:	08 95       	ret

000004ae <ADCInterruptEnable>:
 4ae:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4b0:	f8 94       	cli
 4b2:	96 b1       	in	r25, 0x06	; 6
 4b4:	97 ff       	sbrs	r25, 7
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <ADCInterruptEnable+0xe>
 4b8:	93 ff       	sbrs	r25, 3
 4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <ADCInterruptEnable+0x22>
 4bc:	97 b1       	in	r25, 0x07	; 7
 4be:	98 27       	eor	r25, r24
 4c0:	90 7c       	andi	r25, 0xC0	; 192
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <ADCInterruptEnable+0x18>
 4c4:	16 b8       	out	0x06, r1	; 6
 4c6:	36 99       	sbic	0x06, 6	; 6
 4c8:	16 b8       	out	0x06, r1	; 6
 4ca:	87 b9       	out	0x07, r24	; 7
 4cc:	9e ed       	ldi	r25, 0xDE	; 222
 4ce:	96 b9       	out	0x06, r25	; 6
 4d0:	80 93 65 00 	sts	0x0065, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4d4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 4d6:	08 95       	ret

000004d8 <__udivmodhi4>:
 4d8:	aa 1b       	sub	r26, r26
 4da:	bb 1b       	sub	r27, r27
 4dc:	51 e1       	ldi	r21, 0x11	; 17
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__udivmodhi4_ep>

000004e0 <__udivmodhi4_loop>:
 4e0:	aa 1f       	adc	r26, r26
 4e2:	bb 1f       	adc	r27, r27
 4e4:	a6 17       	cp	r26, r22
 4e6:	b7 07       	cpc	r27, r23
 4e8:	10 f0       	brcs	.+4      	; 0x4ee <__udivmodhi4_ep>
 4ea:	a6 1b       	sub	r26, r22
 4ec:	b7 0b       	sbc	r27, r23

000004ee <__udivmodhi4_ep>:
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	5a 95       	dec	r21
 4f4:	a9 f7       	brne	.-22     	; 0x4e0 <__udivmodhi4_loop>
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	08 95       	ret

00000500 <__divmodhi4>:
 500:	97 fb       	bst	r25, 7
 502:	07 2e       	mov	r0, r23
 504:	16 f4       	brtc	.+4      	; 0x50a <__divmodhi4+0xa>
 506:	00 94       	com	r0
 508:	06 d0       	rcall	.+12     	; 0x516 <__divmodhi4_neg1>
 50a:	77 fd       	sbrc	r23, 7
 50c:	08 d0       	rcall	.+16     	; 0x51e <__divmodhi4_neg2>
 50e:	e4 df       	rcall	.-56     	; 0x4d8 <__udivmodhi4>
 510:	07 fc       	sbrc	r0, 7
 512:	05 d0       	rcall	.+10     	; 0x51e <__divmodhi4_neg2>
 514:	3e f4       	brtc	.+14     	; 0x524 <__divmodhi4_exit>

00000516 <__divmodhi4_neg1>:
 516:	90 95       	com	r25
 518:	81 95       	neg	r24
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__divmodhi4_neg2>:
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255

00000524 <__divmodhi4_exit>:
 524:	08 95       	ret

00000526 <do_rand>:
 526:	8f 92       	push	r8
 528:	9f 92       	push	r9
 52a:	af 92       	push	r10
 52c:	bf 92       	push	r11
 52e:	cf 92       	push	r12
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	ec 01       	movw	r28, r24
 53c:	68 81       	ld	r22, Y
 53e:	79 81       	ldd	r23, Y+1	; 0x01
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	9b 81       	ldd	r25, Y+3	; 0x03
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	81 05       	cpc	r24, r1
 54a:	91 05       	cpc	r25, r1
 54c:	21 f4       	brne	.+8      	; 0x556 <do_rand+0x30>
 54e:	64 e2       	ldi	r22, 0x24	; 36
 550:	79 ed       	ldi	r23, 0xD9	; 217
 552:	8b e5       	ldi	r24, 0x5B	; 91
 554:	97 e0       	ldi	r25, 0x07	; 7
 556:	2d e1       	ldi	r18, 0x1D	; 29
 558:	33 ef       	ldi	r19, 0xF3	; 243
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	3a d0       	rcall	.+116    	; 0x5d4 <__divmodsi4>
 560:	49 01       	movw	r8, r18
 562:	5a 01       	movw	r10, r20
 564:	9b 01       	movw	r18, r22
 566:	ac 01       	movw	r20, r24
 568:	a7 ea       	ldi	r26, 0xA7	; 167
 56a:	b1 e4       	ldi	r27, 0x41	; 65
 56c:	4f d0       	rcall	.+158    	; 0x60c <__muluhisi3>
 56e:	6b 01       	movw	r12, r22
 570:	7c 01       	movw	r14, r24
 572:	ac ee       	ldi	r26, 0xEC	; 236
 574:	b4 ef       	ldi	r27, 0xF4	; 244
 576:	a5 01       	movw	r20, r10
 578:	94 01       	movw	r18, r8
 57a:	54 d0       	rcall	.+168    	; 0x624 <__mulohisi3>
 57c:	c6 0e       	add	r12, r22
 57e:	d7 1e       	adc	r13, r23
 580:	e8 1e       	adc	r14, r24
 582:	f9 1e       	adc	r15, r25
 584:	f7 fe       	sbrs	r15, 7
 586:	06 c0       	rjmp	.+12     	; 0x594 <do_rand+0x6e>
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	c8 1a       	sub	r12, r24
 58c:	d1 08       	sbc	r13, r1
 58e:	e1 08       	sbc	r14, r1
 590:	80 e8       	ldi	r24, 0x80	; 128
 592:	f8 0a       	sbc	r15, r24
 594:	c8 82       	st	Y, r12
 596:	d9 82       	std	Y+1, r13	; 0x01
 598:	ea 82       	std	Y+2, r14	; 0x02
 59a:	fb 82       	std	Y+3, r15	; 0x03
 59c:	c6 01       	movw	r24, r12
 59e:	9f 77       	andi	r25, 0x7F	; 127
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	bf 90       	pop	r11
 5ae:	af 90       	pop	r10
 5b0:	9f 90       	pop	r9
 5b2:	8f 90       	pop	r8
 5b4:	08 95       	ret

000005b6 <rand_r>:
 5b6:	b7 cf       	rjmp	.-146    	; 0x526 <do_rand>

000005b8 <rand>:
 5b8:	80 e6       	ldi	r24, 0x60	; 96
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	b4 cf       	rjmp	.-152    	; 0x526 <do_rand>

000005be <srand>:
 5be:	a0 e0       	ldi	r26, 0x00	; 0
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	80 93 60 00 	sts	0x0060, r24
 5c6:	90 93 61 00 	sts	0x0061, r25
 5ca:	a0 93 62 00 	sts	0x0062, r26
 5ce:	b0 93 63 00 	sts	0x0063, r27
 5d2:	08 95       	ret

000005d4 <__divmodsi4>:
 5d4:	05 2e       	mov	r0, r21
 5d6:	97 fb       	bst	r25, 7
 5d8:	16 f4       	brtc	.+4      	; 0x5de <__divmodsi4+0xa>
 5da:	00 94       	com	r0
 5dc:	0f d0       	rcall	.+30     	; 0x5fc <__negsi2>
 5de:	57 fd       	sbrc	r21, 7
 5e0:	05 d0       	rcall	.+10     	; 0x5ec <__divmodsi4_neg2>
 5e2:	24 d0       	rcall	.+72     	; 0x62c <__udivmodsi4>
 5e4:	07 fc       	sbrc	r0, 7
 5e6:	02 d0       	rcall	.+4      	; 0x5ec <__divmodsi4_neg2>
 5e8:	46 f4       	brtc	.+16     	; 0x5fa <__divmodsi4_exit>
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__negsi2>

000005ec <__divmodsi4_neg2>:
 5ec:	50 95       	com	r21
 5ee:	40 95       	com	r20
 5f0:	30 95       	com	r19
 5f2:	21 95       	neg	r18
 5f4:	3f 4f       	sbci	r19, 0xFF	; 255
 5f6:	4f 4f       	sbci	r20, 0xFF	; 255
 5f8:	5f 4f       	sbci	r21, 0xFF	; 255

000005fa <__divmodsi4_exit>:
 5fa:	08 95       	ret

000005fc <__negsi2>:
 5fc:	90 95       	com	r25
 5fe:	80 95       	com	r24
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__muluhisi3>:
 60c:	31 d0       	rcall	.+98     	; 0x670 <__umulhisi3>
 60e:	a5 9f       	mul	r26, r21
 610:	90 0d       	add	r25, r0
 612:	b4 9f       	mul	r27, r20
 614:	90 0d       	add	r25, r0
 616:	a4 9f       	mul	r26, r20
 618:	80 0d       	add	r24, r0
 61a:	91 1d       	adc	r25, r1
 61c:	11 24       	eor	r1, r1
 61e:	08 95       	ret

00000620 <__mulshisi3>:
 620:	b7 ff       	sbrs	r27, 7
 622:	f4 cf       	rjmp	.-24     	; 0x60c <__muluhisi3>

00000624 <__mulohisi3>:
 624:	f3 df       	rcall	.-26     	; 0x60c <__muluhisi3>
 626:	82 1b       	sub	r24, r18
 628:	93 0b       	sbc	r25, r19
 62a:	08 95       	ret

0000062c <__udivmodsi4>:
 62c:	a1 e2       	ldi	r26, 0x21	; 33
 62e:	1a 2e       	mov	r1, r26
 630:	aa 1b       	sub	r26, r26
 632:	bb 1b       	sub	r27, r27
 634:	fd 01       	movw	r30, r26
 636:	0d c0       	rjmp	.+26     	; 0x652 <__udivmodsi4_ep>

00000638 <__udivmodsi4_loop>:
 638:	aa 1f       	adc	r26, r26
 63a:	bb 1f       	adc	r27, r27
 63c:	ee 1f       	adc	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	a2 17       	cp	r26, r18
 642:	b3 07       	cpc	r27, r19
 644:	e4 07       	cpc	r30, r20
 646:	f5 07       	cpc	r31, r21
 648:	20 f0       	brcs	.+8      	; 0x652 <__udivmodsi4_ep>
 64a:	a2 1b       	sub	r26, r18
 64c:	b3 0b       	sbc	r27, r19
 64e:	e4 0b       	sbc	r30, r20
 650:	f5 0b       	sbc	r31, r21

00000652 <__udivmodsi4_ep>:
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	1a 94       	dec	r1
 65c:	69 f7       	brne	.-38     	; 0x638 <__udivmodsi4_loop>
 65e:	60 95       	com	r22
 660:	70 95       	com	r23
 662:	80 95       	com	r24
 664:	90 95       	com	r25
 666:	9b 01       	movw	r18, r22
 668:	ac 01       	movw	r20, r24
 66a:	bd 01       	movw	r22, r26
 66c:	cf 01       	movw	r24, r30
 66e:	08 95       	ret

00000670 <__umulhisi3>:
 670:	a2 9f       	mul	r26, r18
 672:	b0 01       	movw	r22, r0
 674:	b3 9f       	mul	r27, r19
 676:	c0 01       	movw	r24, r0
 678:	a3 9f       	mul	r26, r19
 67a:	01 d0       	rcall	.+2      	; 0x67e <__umulhisi3+0xe>
 67c:	b2 9f       	mul	r27, r18
 67e:	70 0d       	add	r23, r0
 680:	81 1d       	adc	r24, r1
 682:	11 24       	eor	r1, r1
 684:	91 1d       	adc	r25, r1
 686:	08 95       	ret

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
