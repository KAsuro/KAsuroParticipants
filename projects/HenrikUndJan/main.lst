   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** 	
   2:main.c        **** // 	   			(K)iT lives!
   3:main.c        **** //*********************************************
   4:main.c        **** //*|x|**| |***| |****[___]****[_________]**|x|*
   5:main.c        **** //*|x|**| |***/ /*****| |*********| |******|x|*	 
   6:main.c        **** //*|x|**| |**/ /******| |*********| |******|x|*
   7:main.c        **** //*|x|**[     ]*******| |*********| |******|x|*
   8:main.c        **** //*|x|**| |**\ \******| |*********| |******|x|*
   9:main.c        **** //*|x|**| |***\ \*****| |*********| |******|x|*
  10:main.c        **** //*|x|**| |***| |****[___]*******[___]*****|x|*
  11:main.c        **** //*********************************************
  12:main.c        **** //
  13:main.c        **** #define SWITCH(X) 1<<X
  14:main.c        **** 
  15:main.c        **** 
  16:main.c        **** #include <asuro/asuro.h>
  17:main.c        **** 
  18:main.c        **** 
  19:main.c        **** 
  20:main.c        **** void main(void)		{
  16               		.loc 1 20 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  563	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  564	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__	 ;  565	*movhi/8	[length = 2]
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 6B97      		sbiw r28,27	 ;  566	*addhi3/3	[length = 1]
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 31
  33 000a 0FB6      		in __tmp_reg__,__SREG__	 ;  567	movhi_sp_r/3	[length = 5]
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 27 */
  40               	/* stack size = 29 */
  41               	.L__stack_usage = 29
  21:main.c        ****     Init();
  42               		.loc 1 21 0
  43 0014 00D0      		rcall Init	 ;  40	call_insn/2	[length = 1]
  44               	.LVL0:
  22:main.c        ****     
  23:main.c        ****     int pressed[]	= {0,0,0,0,0,0,0,0,0,0,0};
  45               		.loc 1 23 0
  46 0016 CE01      		movw r24,r28	 ;  554	*movhi/1	[length = 1]
  47 0018 0196      		adiw r24,1	 ;  474	*addhi3/3	[length = 1]
  48 001a 3C01      		movw r6,r24	 ;  555	*movhi/1	[length = 1]
  49 001c 86E1      		ldi r24,lo8(22)	 ;  551	movqi_insn/2	[length = 1]
  50 001e F301      		movw r30,r6	 ;  556	*movhi/1	[length = 1]
  51               		0:	 ;  43	*clrmemqi	[length = 3]
  52 0020 1192      		st Z+,__zero_reg__
  53 0022 8A95      		dec r24
  54 0024 01F4      		brne 0b
  55               	.LVL1:
  24:main.c        ****     int t			= 0;
  25:main.c        ****     int counter 	= 0;
  26:main.c        ****     int x			= 0;
  56               		.loc 1 26 0
  57 0026 E12C      		mov r14,__zero_reg__	 ;  22	*movhi/2	[length = 2]
  58 0028 F12C      		mov r15,__zero_reg__
  25:main.c        ****     int x			= 0;
  59               		.loc 1 25 0
  60 002a A12C      		mov r10,__zero_reg__	 ;  23	*movhi/2	[length = 2]
  61 002c B12C      		mov r11,__zero_reg__
  24:main.c        ****     int t			= 0;
  62               		.loc 1 24 0
  63 002e C12C      		mov r12,__zero_reg__	 ;  24	*movhi/2	[length = 2]
  64 0030 D12C      		mov r13,__zero_reg__
  65               	.LBB21:
  27:main.c        ****     int left 		= 0;
  28:main.c        ****     int right 		= 0;
  29:main.c        **** 	char a_pressed	= 0;
  30:main.c        **** 	char b_pressed	= 0;
  31:main.c        **** 	char c_pressed	= 0;
  32:main.c        **** 	char d_pressed	= 0;
  33:main.c        **** 	char e_pressed	= 0;
  34:main.c        **** 	char f_pressed	= 0;
  35:main.c        ****     
  36:main.c        **** 	while(1){
  37:main.c        **** 		
  38:main.c        **** 		
  39:main.c        **** 		uint16_t lineData[] = {0,0};
  40:main.c        **** 		LineData(lineData);
  41:main.c        **** 		
  42:main.c        **** 		char switches = PollSwitch();
  43:main.c        ****         switches &= 0b00111111;
  44:main.c        **** 		
  45:main.c        **** 		left  = ((int)lineData[LEFT] +160)  / 7;
  66               		.loc 1 45 0
  67 0032 47E0      		ldi r20,lo8(7)	 ;  573	*reload_inhi	[length = 3]
  68 0034 842E      		mov r8,r20
  69 0036 912C      		mov r9,__zero_reg__
  70               	.LVL2:
  71               	.L34:
  39:main.c        **** 		LineData(lineData);
  72               		.loc 1 39 0
  73 0038 188E      		std Y+24,__zero_reg__	 ;  498	*movhi/4	[length = 2]
  74 003a 1F8A      		std Y+23,__zero_reg__
  75 003c 1A8E      		std Y+26,__zero_reg__	 ;  499	*movhi/4	[length = 2]
  76 003e 198E      		std Y+25,__zero_reg__
  40:main.c        **** 		
  77               		.loc 1 40 0
  78 0040 CE01      		movw r24,r28	 ;  557	*movhi/1	[length = 1]
  79 0042 4796      		adiw r24,23	 ;  62	*addhi3/3	[length = 1]
  80 0044 00D0      		rcall LineData	 ;  63	call_insn/2	[length = 1]
  81               	.LVL3:
  42:main.c        ****         switches &= 0b00111111;
  82               		.loc 1 42 0
  83 0046 00D0      		rcall PollSwitch	 ;  64	call_value_insn/2	[length = 1]
  84               	.LVL4:
  85 0048 8B8F      		std Y+27,r24	 ;  65	movqi_insn/3	[length = 1]
  86               	.LVL5:
  87               		.loc 1 45 0
  88 004a 8F89      		ldd r24,Y+23	 ;  68	*movhi/3	[length = 2]
  89 004c 988D      		ldd r25,Y+24
  90               	.LVL6:
  91 004e 8056      		subi r24,96	 ;  69	addhi3_clobber/2	[length = 2]
  92 0050 9F4F      		sbci r25,-1
  93 0052 B401      		movw r22,r8	 ;  542	*movhi/1	[length = 1]
  94 0054 00D0      		rcall __divmodhi4	 ;  543	*divmodhi4_call	[length = 1]
  95 0056 8B01      		movw r16,r22	 ;  544	*movhi/1	[length = 1]
  96               	.LVL7:
  46:main.c        **** 		right = ((int)lineData[RIGHT]+100)  / 7;
  97               		.loc 1 46 0
  98 0058 898D      		ldd r24,Y+25	 ;  74	*movhi/3	[length = 2]
  99 005a 9A8D      		ldd r25,Y+26
 100 005c 8C59      		subi r24,-100	 ;  75	addhi3_clobber/2	[length = 2]
 101 005e 9F4F      		sbci r25,-1
 102 0060 B401      		movw r22,r8	 ;  547	*movhi/1	[length = 1]
 103 0062 00D0      		rcall __divmodhi4	 ;  548	*divmodhi4_call	[length = 1]
 104 0064 1B01      		movw r2,r22	 ;  549	*movhi/1	[length = 1]
 105 0066 2B01      		movw r4,r22	 ;  78	*movhi/1	[length = 1]
 106               	.LVL8:
  47:main.c        **** 		
  48:main.c        **** 		a_pressed = ( switches & SWITCH(1) );
  49:main.c        **** 		b_pressed = ( switches & SWITCH(4) );
  50:main.c        **** 		c_pressed = ( switches & SWITCH(0) );
  51:main.c        **** 		d_pressed = ( switches & SWITCH(3) );
  52:main.c        **** 		e_pressed = ( switches & SWITCH(2) );
  53:main.c        **** 		f_pressed = ( switches & SWITCH(5) );
  54:main.c        **** 		
  55:main.c        **** 		//fahren
  56:main.c        **** 		
  57:main.c        **** 		if (left>200 ){
 107               		.loc 1 57 0
 108 0068 093C      		cpi r16,-55	 ;  86	*cmphi/6	[length = 2]
 109 006a 1105      		cpc r17,__zero_reg__
 110 006c 04F4      		brge .L35	 ;  87	branch	[length = 1]
  58:main.c        **** 			left=200;
  59:main.c        **** 		}
  60:main.c        **** 		else if(left<100){
 111               		.loc 1 60 0
 112 006e 0436      		cpi r16,100	 ;  89	*cmphi/6	[length = 2]
 113 0070 1105      		cpc r17,__zero_reg__
 114 0072 04F4      		brge .L2	 ;  90	branch	[length = 1]
 115               	.LVL9:
  61:main.c        **** 			left=0;
  62:main.c        **** 			StatusLED(RED);
 116               		.loc 1 62 0
 117 0074 82E0      		ldi r24,lo8(2)	 ;  93	movqi_insn/2	[length = 1]
 118 0076 00D0      		rcall StatusLED	 ;  94	call_insn/2	[length = 1]
 119               	.LVL10:
  61:main.c        **** 			left=0;
 120               		.loc 1 61 0
 121 0078 00E0      		ldi r16,0	 ;  503	*movhi/2	[length = 2]
 122 007a 10E0      		ldi r17,0
 123 007c 00C0      		rjmp .L2	 ;  576	jump	[length = 1]
 124               	.LVL11:
 125               	.L35:
  58:main.c        **** 			left=200;
 126               		.loc 1 58 0
 127 007e 08EC      		ldi r16,lo8(-56)	 ;  502	*movhi/5	[length = 2]
 128 0080 10E0      		ldi r17,0
 129               	.LVL12:
 130               	.L2:
  63:main.c        **** 		}
  64:main.c        **** 				
  65:main.c        **** 		if (right>200){
 131               		.loc 1 65 0
 132 0082 F9EC      		ldi r31,-55	 ;  98	*cmphi/7	[length = 3]
 133 0084 2F16      		cp r2,r31
 134 0086 3104      		cpc r3,__zero_reg__
 135 0088 04F4      		brge .L36	 ;  99	branch	[length = 1]
  66:main.c        **** 			(right=200);
  67:main.c        **** 		}
  68:main.c        **** 		
  69:main.c        **** 		else if(right<100){
 136               		.loc 1 69 0
 137 008a 24E6      		ldi r18,100	 ;  101	*cmphi/7	[length = 3]
 138 008c 2216      		cp r2,r18
 139 008e 3104      		cpc r3,__zero_reg__
 140 0090 04F4      		brge .L3	 ;  102	branch	[length = 1]
 141               	.LVL13:
  70:main.c        **** 			right=0;
  71:main.c        **** 			StatusLED(RED);
 142               		.loc 1 71 0
 143 0092 82E0      		ldi r24,lo8(2)	 ;  105	movqi_insn/2	[length = 1]
 144 0094 00D0      		rcall StatusLED	 ;  106	call_insn/2	[length = 1]
 145               	.LVL14:
  70:main.c        **** 			right=0;
 146               		.loc 1 70 0
 147 0096 412C      		mov r4,__zero_reg__	 ;  505	*movhi/2	[length = 2]
 148 0098 512C      		mov r5,__zero_reg__
 149 009a 00C0      		rjmp .L3	 ;  578	jump	[length = 1]
 150               	.LVL15:
 151               	.L36:
  66:main.c        **** 			(right=200);
 152               		.loc 1 66 0
 153 009c 38EC      		ldi r19,lo8(-56)	 ;  572	*reload_inhi	[length = 3]
 154 009e 432E      		mov r4,r19
 155 00a0 512C      		mov r5,__zero_reg__
 156               	.LVL16:
 157               	.L3:
  72:main.c        **** 		}
  73:main.c        **** 			
  74:main.c        **** 		MotorDir(FWD,FWD);
 158               		.loc 1 74 0
 159 00a2 60E2      		ldi r22,lo8(32)	 ;  110	movqi_insn/2	[length = 1]
 160 00a4 80E2      		ldi r24,lo8(32)	 ;  111	movqi_insn/2	[length = 1]
 161 00a6 00D0      		rcall MotorDir	 ;  112	call_insn/2	[length = 1]
 162               	.LVL17:
  75:main.c        **** 		MotorSpeed(right,left);
 163               		.loc 1 75 0
 164 00a8 602F      		mov r22,r16	 ;  113	movqi_insn/1	[length = 1]
 165 00aa 842D      		mov r24,r4	 ;  114	movqi_insn/1	[length = 1]
 166 00ac 00D0      		rcall MotorSpeed	 ;  115	call_insn/2	[length = 1]
 167               	.LVL18:
 168 00ae 28E7      		ldi r18,lo8(120)	 ;  571	*reload_inhi	[length = 3]
 169 00b0 222E      		mov r2,r18
 170 00b2 312C      		mov r3,__zero_reg__
 171               	.LVL19:
 172               	.L5:
 173               	.LBB22:
 174               	.LBB23:
 175               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 176               		.loc 2 346 0
 177 00b4 84E2      		ldi r24,lo8(36)	 ;  120	movqi_insn/2	[length = 1]
 178 00b6 00D0      		rcall sleep	 ;  121	call_insn/2	[length = 1]
 179               	.LVL20:
 180 00b8 81E0      		ldi r24,1	 ;  125	addhi3_clobber/3	[length = 3]
 181 00ba 281A      		sub r2,r24
 182 00bc 3108      		sbc r3,__zero_reg__
 183               	.LVL21:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 184               		.loc 2 345 0
 185 00be 2114      		cp r2,__zero_reg__	 ;  126	*cmphi/2	[length = 2]
 186 00c0 3104      		cpc r3,__zero_reg__
 187 00c2 01F4      		brne .L5	 ;  127	branch	[length = 1]
 188               	.LBE23:
 189               	.LBE22:
  76:main.c        **** 		msleep(120);
  77:main.c        **** 						
  78:main.c        **** 		//LED Steuerung
  79:main.c        **** 		
  80:main.c        **** 		if(left > right){
 190               		.loc 1 80 0
 191 00c4 4016      		cp r4,r16	 ;  136	*cmphi/3	[length = 2]
 192 00c6 5106      		cpc r5,r17
 193 00c8 04F4      		brge .L6	 ;  137	branch	[length = 1]
  81:main.c        **** 			BackLED(OFF,ON);
 194               		.loc 1 81 0
 195 00ca 61E0      		ldi r22,lo8(1)	 ;  139	movqi_insn/2	[length = 1]
 196 00cc 80E0      		ldi r24,0	 ;  140	movqi_insn/1	[length = 1]
 197 00ce 00D0      		rcall BackLED	 ;  141	call_insn/2	[length = 1]
 198               	.LVL22:
 199               	.L6:
  82:main.c        **** 		}
  83:main.c        **** 		
  84:main.c        **** 		if(right > left){
 200               		.loc 1 84 0
 201 00d0 0415      		cp r16,r4	 ;  144	*cmphi/3	[length = 2]
 202 00d2 1505      		cpc r17,r5
 203 00d4 04F4      		brge .L7	 ;  145	branch	[length = 1]
  85:main.c        **** 			BackLED(ON,OFF);
 204               		.loc 1 85 0
 205 00d6 60E0      		ldi r22,0	 ;  147	movqi_insn/1	[length = 1]
 206 00d8 81E0      		ldi r24,lo8(1)	 ;  148	movqi_insn/2	[length = 1]
 207 00da 00D0      		rcall BackLED	 ;  149	call_insn/2	[length = 1]
 208               	.LVL23:
 209               	.L7:
  86:main.c        **** 		}
  87:main.c        **** 		
  88:main.c        **** 		if(right == left){
 210               		.loc 1 88 0
 211 00dc 4016      		cp r4,r16	 ;  152	*cmphi/3	[length = 2]
 212 00de 5106      		cpc r5,r17
 213 00e0 01F4      		brne .L8	 ;  153	branch	[length = 1]
  89:main.c        **** 			BackLED(ON,ON);
 214               		.loc 1 89 0
 215 00e2 61E0      		ldi r22,lo8(1)	 ;  155	movqi_insn/2	[length = 1]
 216 00e4 81E0      		ldi r24,lo8(1)	 ;  156	movqi_insn/2	[length = 1]
 217 00e6 00D0      		rcall BackLED	 ;  157	call_insn/2	[length = 1]
 218               	.LVL24:
 219               	.L8:
  90:main.c        **** 		}
  91:main.c        **** 		
  92:main.c        **** 		if(right && left < 80){
 220               		.loc 1 92 0
 221 00e8 4114      		cp r4,__zero_reg__	 ;  160	*cmphi/2	[length = 2]
 222 00ea 5104      		cpc r5,__zero_reg__
 223 00ec 01F0      		breq .L10	 ;  161	branch	[length = 1]
 224               		.loc 1 92 0 is_stmt 0 discriminator 1
 225 00ee 0035      		cpi r16,80	 ;  167	*cmphi/6	[length = 2]
 226 00f0 1105      		cpc r17,__zero_reg__
 227 00f2 04F4      		brge .L11	 ;  168	branch	[length = 1]
  93:main.c        **** 			StatusLED(RED);
 228               		.loc 1 93 0 is_stmt 1
 229 00f4 82E0      		ldi r24,lo8(2)	 ;  170	movqi_insn/2	[length = 1]
 230 00f6 00D0      		rcall StatusLED	 ;  171	call_insn/2	[length = 1]
 231               	.LVL25:
 232               	.L11:
  94:main.c        **** 		}
  95:main.c        **** 		
  96:main.c        **** 		if(80 < right && left < 120){
 233               		.loc 1 96 0
 234 00f8 91E5      		ldi r25,81	 ;  174	*cmphi/7	[length = 3]
 235 00fa 4916      		cp r4,r25
 236 00fc 5104      		cpc r5,__zero_reg__
 237 00fe 04F0      		brlt .L12	 ;  175	branch	[length = 1]
 238               		.loc 1 96 0 is_stmt 0 discriminator 1
 239 0100 0837      		cpi r16,120	 ;  177	*cmphi/6	[length = 2]
 240 0102 1105      		cpc r17,__zero_reg__
 241 0104 04F4      		brge .L12	 ;  178	branch	[length = 1]
  97:main.c        **** 			StatusLED(YELLOW);
 242               		.loc 1 97 0 is_stmt 1
 243 0106 83E0      		ldi r24,lo8(3)	 ;  180	movqi_insn/2	[length = 1]
 244 0108 00D0      		rcall StatusLED	 ;  181	call_insn/2	[length = 1]
 245               	.LVL26:
 246               	.L12:
  98:main.c        **** 		}
  99:main.c        **** 		
 100:main.c        **** 		if(right && left > 120){
 247               		.loc 1 100 0 discriminator 1
 248 010a 0937      		cpi r16,121	 ;  187	*cmphi/6	[length = 2]
 249 010c 1105      		cpc r17,__zero_reg__
 250 010e 04F0      		brlt .L10	 ;  188	branch	[length = 1]
 101:main.c        **** 			StatusLED(GREEN);
 251               		.loc 1 101 0
 252 0110 81E0      		ldi r24,lo8(1)	 ;  190	movqi_insn/2	[length = 1]
 253 0112 00D0      		rcall StatusLED	 ;  191	call_insn/2	[length = 1]
 254               	.LVL27:
 255               	.L10:
 102:main.c        **** 		}
 103:main.c        **** 		
 104:main.c        **** 		
 105:main.c        **** 			if(x == 3000){
 256               		.loc 1 105 0
 257 0114 E8EB      		ldi r30,-72	 ;  194	*cmphi/7	[length = 4]
 258 0116 EE16      		cp r14,r30
 259 0118 EBE0      		ldi r30,11
 260 011a FE06      		cpc r15,r30
 261 011c 01F4      		brne .L15	 ;  195	branch	[length = 1]
 106:main.c        **** 				FrontLED(ON);
 262               		.loc 1 106 0
 263 011e 81E0      		ldi r24,lo8(1)	 ;  197	movqi_insn/2	[length = 1]
 264 0120 00D0      		rcall FrontLED	 ;  198	call_insn/2	[length = 1]
 265               	.LVL28:
 107:main.c        **** 				x=0;
 266               		.loc 1 107 0
 267 0122 E12C      		mov r14,__zero_reg__	 ;  508	*movhi/2	[length = 2]
 268 0124 F12C      		mov r15,__zero_reg__
 269 0126 00C0      		rjmp .L16	 ;  580	jump	[length = 1]
 270               	.LVL29:
 271               	.L15:
 108:main.c        **** 		    }
 109:main.c        **** 		    if(x == 15){				
 272               		.loc 1 109 0
 273 0128 FFE0      		ldi r31,15	 ;  206	*cmphi/7	[length = 3]
 274 012a EF16      		cp r14,r31
 275 012c F104      		cpc r15,__zero_reg__
 276 012e 01F4      		brne .L16	 ;  207	branch	[length = 1]
 110:main.c        **** 				FrontLED(OFF);
 277               		.loc 1 110 0
 278 0130 80E0      		ldi r24,0	 ;  209	movqi_insn/1	[length = 1]
 279 0132 00D0      		rcall FrontLED	 ;  210	call_insn/2	[length = 1]
 280               	.LVL30:
 111:main.c        **** 				x++;
 281               		.loc 1 111 0
 282 0134 90E1      		ldi r25,lo8(16)	 ;  570	*reload_inhi	[length = 3]
 283 0136 E92E      		mov r14,r25
 284 0138 F12C      		mov r15,__zero_reg__
 285 013a 00C0      		rjmp .L17	 ;  582	jump	[length = 1]
 286               	.LVL31:
 287               	.L16:
 112:main.c        **** 			}
 113:main.c        **** 			else{
 114:main.c        **** 				x++;
 288               		.loc 1 114 0
 289 013c 2FEF      		ldi r18,-1	 ;  217	addhi3_clobber/3	[length = 3]
 290 013e E21A      		sub r14,r18
 291 0140 F20A      		sbc r15,r18
 292               	.LVL32:
 293               	.L17:
 294 0142 8B8D      		ldd r24,Y+27	 ;  558	movqi_insn/4	[length = 1]
 295 0144 8271      		andi r24,lo8(18)	 ;  222	andqi3/2	[length = 1]
 115:main.c        **** 			}
 116:main.c        **** 			
 117:main.c        **** 			
 118:main.c        **** 		
 119:main.c        **** 		//Rückfahrt
 120:main.c        **** 		
 121:main.c        **** 		if (a_pressed || b_pressed > 0) {
 296               		.loc 1 121 0
 297 0146 01F0      		breq .L18	 ;  224	branch	[length = 1]
 122:main.c        **** 			StatusLED(RED);
 298               		.loc 1 122 0
 299 0148 82E0      		ldi r24,lo8(2)	 ;  226	movqi_insn/2	[length = 1]
 300 014a 00D0      		rcall StatusLED	 ;  227	call_insn/2	[length = 1]
 301               	.LVL33:
 123:main.c        **** 			BackLED(OFF,ON);
 302               		.loc 1 123 0
 303 014c 61E0      		ldi r22,lo8(1)	 ;  228	movqi_insn/2	[length = 1]
 304 014e 80E0      		ldi r24,0	 ;  229	movqi_insn/1	[length = 1]
 305 0150 00D0      		rcall BackLED	 ;  230	call_insn/2	[length = 1]
 306               	.LVL34:
 307               	.LBB24:
 308               	.LBB25:
 309               		.loc 2 346 0
 310 0152 84E2      		ldi r24,lo8(36)	 ;  233	movqi_insn/2	[length = 1]
 311 0154 00D0      		rcall sleep	 ;  234	call_insn/2	[length = 1]
 312               	.LVL35:
 313               	.LBE25:
 314               	.LBE24:
 124:main.c        **** 			msleep(1);
 125:main.c        **** 			BackLED(ON,OFF);
 315               		.loc 1 125 0
 316 0156 60E0      		ldi r22,0	 ;  237	movqi_insn/1	[length = 1]
 317 0158 81E0      		ldi r24,lo8(1)	 ;  238	movqi_insn/2	[length = 1]
 318 015a 00D0      		rcall BackLED	 ;  239	call_insn/2	[length = 1]
 319               	.LVL36:
 126:main.c        **** 			MotorDir(RWD,RWD);
 320               		.loc 1 126 0
 321 015c 60E1      		ldi r22,lo8(16)	 ;  240	movqi_insn/2	[length = 1]
 322 015e 80E1      		ldi r24,lo8(16)	 ;  241	movqi_insn/2	[length = 1]
 323 0160 00D0      		rcall MotorDir	 ;  242	call_insn/2	[length = 1]
 324               	.LVL37:
 127:main.c        **** 			MotorSpeed(120,120);
 325               		.loc 1 127 0
 326 0162 68E7      		ldi r22,lo8(120)	 ;  243	movqi_insn/2	[length = 1]
 327 0164 88E7      		ldi r24,lo8(120)	 ;  244	movqi_insn/2	[length = 1]
 328 0166 00D0      		rcall MotorSpeed	 ;  245	call_insn/2	[length = 1]
 329               	.LVL38:
 330 0168 08E5      		ldi r16,lo8(88)	 ;  509	*movhi/5	[length = 2]
 331 016a 12E0      		ldi r17,lo8(2)
 332               	.LVL39:
 333               	.L20:
 334               	.LBB26:
 335               	.LBB27:
 336               		.loc 2 346 0
 337 016c 84E2      		ldi r24,lo8(36)	 ;  250	movqi_insn/2	[length = 1]
 338 016e 00D0      		rcall sleep	 ;  251	call_insn/2	[length = 1]
 339               	.LVL40:
 340 0170 0150      		subi r16,1	 ;  255	addhi3_clobber/2	[length = 2]
 341 0172 1109      		sbc r17,__zero_reg__
 342               	.LVL41:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 343               		.loc 2 345 0
 344 0174 0115      		cp r16,__zero_reg__	 ;  256	*cmphi/2	[length = 2]
 345 0176 1105      		cpc r17,__zero_reg__
 346 0178 01F4      		brne .L20	 ;  257	branch	[length = 1]
 347               	.LBE27:
 348               	.LBE26:
 128:main.c        **** 			msleep(600);
 129:main.c        **** 			MotorDir(BREAK,BREAK);
 349               		.loc 1 129 0
 350 017a 60E0      		ldi r22,0	 ;  266	movqi_insn/1	[length = 1]
 351 017c 80E0      		ldi r24,0	 ;  267	movqi_insn/1	[length = 1]
 352 017e 00D0      		rcall MotorDir	 ;  268	call_insn/2	[length = 1]
 353               	.LVL42:
 354               	.L18:
 355 0180 8B8D      		ldd r24,Y+27	 ;  559	movqi_insn/4	[length = 1]
 356 0182 8970      		andi r24,lo8(9)	 ;  271	andqi3/2	[length = 1]
 130:main.c        **** 		}
 131:main.c        **** 		
 132:main.c        **** 		if (c_pressed || d_pressed > 0) {
 357               		.loc 1 132 0
 358 0184 01F0      		breq .L21	 ;  273	branch	[length = 1]
 133:main.c        **** 			StatusLED(RED);
 359               		.loc 1 133 0
 360 0186 82E0      		ldi r24,lo8(2)	 ;  275	movqi_insn/2	[length = 1]
 361 0188 00D0      		rcall StatusLED	 ;  276	call_insn/2	[length = 1]
 362               	.LVL43:
 134:main.c        **** 			BackLED(OFF,ON);
 363               		.loc 1 134 0
 364 018a 61E0      		ldi r22,lo8(1)	 ;  277	movqi_insn/2	[length = 1]
 365 018c 80E0      		ldi r24,0	 ;  278	movqi_insn/1	[length = 1]
 366 018e 00D0      		rcall BackLED	 ;  279	call_insn/2	[length = 1]
 367               	.LVL44:
 368               	.LBB28:
 369               	.LBB29:
 370               		.loc 2 346 0
 371 0190 84E2      		ldi r24,lo8(36)	 ;  282	movqi_insn/2	[length = 1]
 372 0192 00D0      		rcall sleep	 ;  283	call_insn/2	[length = 1]
 373               	.LVL45:
 374               	.LBE29:
 375               	.LBE28:
 135:main.c        **** 			msleep(1);
 136:main.c        **** 			BackLED(ON,OFF);
 376               		.loc 1 136 0
 377 0194 60E0      		ldi r22,0	 ;  286	movqi_insn/1	[length = 1]
 378 0196 81E0      		ldi r24,lo8(1)	 ;  287	movqi_insn/2	[length = 1]
 379 0198 00D0      		rcall BackLED	 ;  288	call_insn/2	[length = 1]
 380               	.LVL46:
 137:main.c        **** 			MotorDir(RWD,RWD);
 381               		.loc 1 137 0
 382 019a 60E1      		ldi r22,lo8(16)	 ;  289	movqi_insn/2	[length = 1]
 383 019c 80E1      		ldi r24,lo8(16)	 ;  290	movqi_insn/2	[length = 1]
 384 019e 00D0      		rcall MotorDir	 ;  291	call_insn/2	[length = 1]
 385               	.LVL47:
 138:main.c        **** 			MotorSpeed(120,60);
 386               		.loc 1 138 0
 387 01a0 6CE3      		ldi r22,lo8(60)	 ;  292	movqi_insn/2	[length = 1]
 388 01a2 88E7      		ldi r24,lo8(120)	 ;  293	movqi_insn/2	[length = 1]
 389 01a4 00D0      		rcall MotorSpeed	 ;  294	call_insn/2	[length = 1]
 390               	.LVL48:
 391 01a6 08E5      		ldi r16,lo8(88)	 ;  510	*movhi/5	[length = 2]
 392 01a8 12E0      		ldi r17,lo8(2)
 393               	.LVL49:
 394               	.L23:
 395               	.LBB30:
 396               	.LBB31:
 397               		.loc 2 346 0
 398 01aa 84E2      		ldi r24,lo8(36)	 ;  299	movqi_insn/2	[length = 1]
 399 01ac 00D0      		rcall sleep	 ;  300	call_insn/2	[length = 1]
 400               	.LVL50:
 401 01ae 0150      		subi r16,1	 ;  304	addhi3_clobber/2	[length = 2]
 402 01b0 1109      		sbc r17,__zero_reg__
 403               	.LVL51:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 404               		.loc 2 345 0
 405 01b2 0115      		cp r16,__zero_reg__	 ;  305	*cmphi/2	[length = 2]
 406 01b4 1105      		cpc r17,__zero_reg__
 407 01b6 01F4      		brne .L23	 ;  306	branch	[length = 1]
 408               	.LBE31:
 409               	.LBE30:
 139:main.c        **** 			msleep(600);
 140:main.c        **** 			MotorDir(BREAK,BREAK);
 410               		.loc 1 140 0
 411 01b8 60E0      		ldi r22,0	 ;  315	movqi_insn/1	[length = 1]
 412 01ba 80E0      		ldi r24,0	 ;  316	movqi_insn/1	[length = 1]
 413 01bc 00D0      		rcall MotorDir	 ;  317	call_insn/2	[length = 1]
 414               	.LVL52:
 415               	.L21:
 416 01be 8B8D      		ldd r24,Y+27	 ;  560	movqi_insn/4	[length = 1]
 417 01c0 8472      		andi r24,lo8(36)	 ;  320	andqi3/2	[length = 1]
 141:main.c        **** 		}
 142:main.c        **** 		
 143:main.c        **** 		if (e_pressed || f_pressed > 0) {
 418               		.loc 1 143 0
 419 01c2 01F0      		breq .L24	 ;  322	branch	[length = 1]
 144:main.c        **** 			StatusLED(RED);
 420               		.loc 1 144 0
 421 01c4 82E0      		ldi r24,lo8(2)	 ;  324	movqi_insn/2	[length = 1]
 422 01c6 00D0      		rcall StatusLED	 ;  325	call_insn/2	[length = 1]
 423               	.LVL53:
 145:main.c        **** 			BackLED(OFF,ON);
 424               		.loc 1 145 0
 425 01c8 61E0      		ldi r22,lo8(1)	 ;  326	movqi_insn/2	[length = 1]
 426 01ca 80E0      		ldi r24,0	 ;  327	movqi_insn/1	[length = 1]
 427 01cc 00D0      		rcall BackLED	 ;  328	call_insn/2	[length = 1]
 428               	.LVL54:
 429               	.LBB32:
 430               	.LBB33:
 431               		.loc 2 346 0
 432 01ce 84E2      		ldi r24,lo8(36)	 ;  331	movqi_insn/2	[length = 1]
 433 01d0 00D0      		rcall sleep	 ;  332	call_insn/2	[length = 1]
 434               	.LVL55:
 435               	.LBE33:
 436               	.LBE32:
 146:main.c        **** 			msleep(1);
 147:main.c        **** 			BackLED(ON,OFF);
 437               		.loc 1 147 0
 438 01d2 60E0      		ldi r22,0	 ;  335	movqi_insn/1	[length = 1]
 439 01d4 81E0      		ldi r24,lo8(1)	 ;  336	movqi_insn/2	[length = 1]
 440 01d6 00D0      		rcall BackLED	 ;  337	call_insn/2	[length = 1]
 441               	.LVL56:
 148:main.c        **** 			MotorDir(RWD,RWD);
 442               		.loc 1 148 0
 443 01d8 60E1      		ldi r22,lo8(16)	 ;  338	movqi_insn/2	[length = 1]
 444 01da 80E1      		ldi r24,lo8(16)	 ;  339	movqi_insn/2	[length = 1]
 445 01dc 00D0      		rcall MotorDir	 ;  340	call_insn/2	[length = 1]
 446               	.LVL57:
 149:main.c        **** 			MotorSpeed(60,120);
 447               		.loc 1 149 0
 448 01de 68E7      		ldi r22,lo8(120)	 ;  341	movqi_insn/2	[length = 1]
 449 01e0 8CE3      		ldi r24,lo8(60)	 ;  342	movqi_insn/2	[length = 1]
 450 01e2 00D0      		rcall MotorSpeed	 ;  343	call_insn/2	[length = 1]
 451               	.LVL58:
 452 01e4 08E5      		ldi r16,lo8(88)	 ;  511	*movhi/5	[length = 2]
 453 01e6 12E0      		ldi r17,lo8(2)
 454               	.LVL59:
 455               	.L26:
 456               	.LBB34:
 457               	.LBB35:
 458               		.loc 2 346 0
 459 01e8 84E2      		ldi r24,lo8(36)	 ;  348	movqi_insn/2	[length = 1]
 460 01ea 00D0      		rcall sleep	 ;  349	call_insn/2	[length = 1]
 461               	.LVL60:
 462 01ec 0150      		subi r16,1	 ;  353	addhi3_clobber/2	[length = 2]
 463 01ee 1109      		sbc r17,__zero_reg__
 464               	.LVL61:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 465               		.loc 2 345 0
 466 01f0 0115      		cp r16,__zero_reg__	 ;  354	*cmphi/2	[length = 2]
 467 01f2 1105      		cpc r17,__zero_reg__
 468 01f4 01F4      		brne .L26	 ;  355	branch	[length = 1]
 469               	.LBE35:
 470               	.LBE34:
 150:main.c        **** 			msleep(600);
 151:main.c        **** 			MotorDir(BREAK,BREAK);
 471               		.loc 1 151 0
 472 01f6 60E0      		ldi r22,0	 ;  364	movqi_insn/1	[length = 1]
 473 01f8 80E0      		ldi r24,0	 ;  365	movqi_insn/1	[length = 1]
 474 01fa 00D0      		rcall MotorDir	 ;  366	call_insn/2	[length = 1]
 475               	.LVL62:
 476               	.L24:
 152:main.c        **** 		}
 153:main.c        **** 		
 154:main.c        **** 		if(counter>30){
 477               		.loc 1 154 0
 478 01fc 8FE1      		ldi r24,31	 ;  369	*cmphi/7	[length = 3]
 479 01fe A816      		cp r10,r24
 480 0200 B104      		cpc r11,__zero_reg__
 481 0202 04F0      		brlt .L27	 ;  370	branch	[length = 1]
 155:main.c        **** 			MotorDir(RWD,RWD);
 482               		.loc 1 155 0
 483 0204 60E1      		ldi r22,lo8(16)	 ;  372	movqi_insn/2	[length = 1]
 484 0206 80E1      		ldi r24,lo8(16)	 ;  373	movqi_insn/2	[length = 1]
 485 0208 00D0      		rcall MotorDir	 ;  374	call_insn/2	[length = 1]
 486               	.LVL63:
 156:main.c        **** 			MotorSpeed(60,60);
 487               		.loc 1 156 0
 488 020a 6CE3      		ldi r22,lo8(60)	 ;  375	movqi_insn/2	[length = 1]
 489 020c 8CE3      		ldi r24,lo8(60)	 ;  376	movqi_insn/2	[length = 1]
 490 020e 00D0      		rcall MotorSpeed	 ;  377	call_insn/2	[length = 1]
 491               	.LVL64:
 492 0210 0CE3      		ldi r16,lo8(60)	 ;  35	*movhi/5	[length = 2]
 493 0212 10E0      		ldi r17,0
 494               	.LVL65:
 495               	.L29:
 496               	.LBB36:
 497               	.LBB37:
 498               		.loc 2 346 0
 499 0214 84E2      		ldi r24,lo8(36)	 ;  382	movqi_insn/2	[length = 1]
 500 0216 00D0      		rcall sleep	 ;  383	call_insn/2	[length = 1]
 501               	.LVL66:
 502 0218 0150      		subi r16,1	 ;  387	addhi3_clobber/2	[length = 2]
 503 021a 1109      		sbc r17,__zero_reg__
 504               	.LVL67:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 505               		.loc 2 345 0
 506 021c 0115      		cp r16,__zero_reg__	 ;  388	*cmphi/2	[length = 2]
 507 021e 1105      		cpc r17,__zero_reg__
 508 0220 01F4      		brne .L29	 ;  389	branch	[length = 1]
 509 0222 00C0      		rjmp .L48	 ;  586	jump	[length = 1]
 510               	.LVL68:
 511               	.L27:
 512               	.LBE37:
 513               	.LBE36:
 157:main.c        **** 			msleep(60);
 158:main.c        **** 			counter=0;
 159:main.c        **** 		}
 160:main.c        **** 		else{
 161:main.c        **** 			counter++;		
 514               		.loc 1 161 0
 515 0224 9FEF      		ldi r25,-1	 ;  398	addhi3_clobber/3	[length = 3]
 516 0226 A91A      		sub r10,r25
 517 0228 B90A      		sbc r11,r25
 518               	.LVL69:
 519 022a 00C0      		rjmp .L32	 ;  588	jump	[length = 1]
 520               	.LVL70:
 521               	.L48:
 158:main.c        **** 		}
 522               		.loc 1 158 0
 523 022c A12C      		mov r10,__zero_reg__	 ;  512	*movhi/2	[length = 2]
 524 022e B12C      		mov r11,__zero_reg__
 525               	.LVL71:
 526               	.L32:
 527 0230 8601      		movw r16,r12	 ;  562	*movhi/1	[length = 1]
 528 0232 000F      		lsl r16	 ;  569	*ashlhi3_const/2	[length = 2]
 529 0234 111F      		rol r17
 530 0236 060D      		add r16,r6	 ;  441	*addhi3/1	[length = 2]
 531 0238 171D      		adc r17,r7
 158:main.c        **** 		}
 532               		.loc 1 158 0 is_stmt 0 discriminator 1
 533 023a 412C      		mov r4,__zero_reg__	 ;  514	*movhi/2	[length = 2]
 534 023c 512C      		mov r5,__zero_reg__
 535               	.L31:
 536               	.LVL72:
 162:main.c        **** 	}	
 163:main.c        **** 	while(lineData[LEFT] || lineData[RIGHT] > 900){
 537               		.loc 1 163 0 is_stmt 1 discriminator 1
 538 023e 8F89      		ldd r24,Y+23	 ;  447	*movhi/3	[length = 2]
 539 0240 988D      		ldd r25,Y+24
 540 0242 892B      		or r24,r25	 ;  448	*cmphi/1	[length = 1]
 541 0244 01F0      		breq .L49	 ;  449	branch	[length = 1]
 542               	.L33:
 164:main.c        **** 		MotorDir(BREAK,BREAK);
 543               		.loc 1 164 0
 544 0246 60E0      		ldi r22,0	 ;  403	movqi_insn/1	[length = 1]
 545 0248 80E0      		ldi r24,0	 ;  404	movqi_insn/1	[length = 1]
 546 024a 00D0      		rcall MotorDir	 ;  405	call_insn/2	[length = 1]
 547               	.LVL73:
 548 024c F801      		movw r30,r16	 ;  561	*movhi/1	[length = 1]
 549 024e E40D      		add r30,r4	 ;  406	*addhi3/1	[length = 2]
 550 0250 F51D      		adc r31,r5
 165:main.c        **** 		pressed[t]=pressed[t]+10;
 551               		.loc 1 165 0
 552 0252 8081      		ld r24,Z	 ;  407	*movhi/3	[length = 2]
 553 0254 9181      		ldd r25,Z+1
 554 0256 0A96      		adiw r24,10	 ;  408	addhi3_clobber/1	[length = 1]
 555 0258 9183      		std Z+1,r25	 ;  409	*movhi/4	[length = 2]
 556 025a 8083      		st Z,r24
 166:main.c        **** 		t++;
 557               		.loc 1 166 0
 558 025c EFEF      		ldi r30,-1	 ;  410	addhi3_clobber/3	[length = 3]
 559 025e CE1A      		sub r12,r30
 560 0260 DE0A      		sbc r13,r30
 561               	.LVL74:
 562 0262 F2E0      		ldi r31,2	 ;  412	addhi3_clobber/3	[length = 3]
 563 0264 4F0E      		add r4,r31
 564 0266 511C      		adc r5,__zero_reg__
 167:main.c        **** 		if(t == 10){
 565               		.loc 1 167 0
 566 0268 2AE0      		ldi r18,10	 ;  413	*cmphi/7	[length = 3]
 567 026a C216      		cp r12,r18
 568 026c D104      		cpc r13,__zero_reg__
 569 026e 01F4      		brne .L31	 ;  414	branch	[length = 1]
 168:main.c        **** 			MotorDir(FWD,FWD);
 570               		.loc 1 168 0
 571 0270 60E2      		ldi r22,lo8(32)	 ;  420	movqi_insn/2	[length = 1]
 572 0272 80E2      		ldi r24,lo8(32)	 ;  421	movqi_insn/2	[length = 1]
 573 0274 00D0      		rcall MotorDir	 ;  422	call_insn/2	[length = 1]
 574               	.LVL75:
 169:main.c        **** 			MotorSpeed(pressed[t],pressed[t]);
 575               		.loc 1 169 0
 576 0276 8D89      		ldd r24,Y+21	 ;  423	movqi_insn/4	[length = 1]
 577 0278 682F      		mov r22,r24	 ;  424	movqi_insn/1	[length = 1]
 578 027a 00D0      		rcall MotorSpeed	 ;  426	call_insn/2	[length = 1]
 579               	.LVL76:
 580               	.LBB38:
 581               	.LBB39:
 582               		.loc 2 346 0
 583 027c 84E2      		ldi r24,lo8(36)	 ;  429	movqi_insn/2	[length = 1]
 584 027e 00D0      		rcall sleep	 ;  430	call_insn/2	[length = 1]
 585               	.LVL77:
 586               	.LBE39:
 587               	.LBE38:
 170:main.c        **** 			msleep(1);
 171:main.c        **** 			t=0;
 588               		.loc 1 171 0
 589 0280 C12C      		mov r12,__zero_reg__	 ;  515	*movhi/2	[length = 2]
 590 0282 D12C      		mov r13,__zero_reg__
 591               	.LVL78:
 592 0284 00C0      		rjmp .L32	 ;  591	jump	[length = 1]
 593               	.LVL79:
 594               	.L49:
 163:main.c        **** 		MotorDir(BREAK,BREAK);
 595               		.loc 1 163 0 discriminator 2
 596 0286 898D      		ldd r24,Y+25	 ;  451	*movhi/3	[length = 2]
 597 0288 9A8D      		ldd r25,Y+26
 598 028a 8538      		cpi r24,-123	 ;  452	*cmphi/7	[length = 2]
 599 028c 9340      		sbci r25,3
 600 028e 00F4      		brsh .L33	 ;  453	branch	[length = 1]
 601 0290 00C0      		rjmp .L34	 ;  594	jump	[length = 1]
 602               	.LBE21:
 603               		.cfi_endproc
 604               	.LFE2:
 606               		.text
 607               	.Letext0:
 608               		.file 3 "/usr/lib/avr/include/stdint.h"
 609               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 610               		.file 5 "../../libtinyasuro/inc/asuro/led.h"
 611               		.file 6 "../../libtinyasuro/inc/asuro/motor.h"
 612               		.file 7 "../../libtinyasuro/inc/asuro/switches.h"
 613               		.file 8 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccUdpKF6.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccUdpKF6.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccUdpKF6.s:4      *ABS*:0000003f __SREG__
     /tmp/ccUdpKF6.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccUdpKF6.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccUdpKF6.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
LineData
PollSwitch
__divmodhi4
StatusLED
MotorDir
MotorSpeed
sleep
BackLED
FrontLED
