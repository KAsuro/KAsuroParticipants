   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        ****  * 	   (K)iT lives!
   3:main.c        ****  *		  
   4:main.c        ****  *          *
   5:main.c        ****  *         * *
   6:main.c        ****  *        * * * 
   7:main.c        ****  * 		 * * * *
   8:main.c        ****  * 		* * * * *
   9:main.c        ****  *     * * * * * *
  10:main.c        ****  *    * * * * * * *
  11:main.c        ****  *		   * *
  12:main.c        ****  *		   * *
  13:main.c        ****  * 		   * *
  14:main.c        ****  * 1
  15:main.c        ****  */
  16:main.c        **** 
  17:main.c        **** #define SWITCH(X) 1<<X
  18:main.c        **** #define SLOW 1000
  19:main.c        **** #define FAST 100
  20:main.c        **** 
  21:main.c        **** #include <asuro/asuro.h>
  22:main.c        **** 
  23:main.c        **** void main(void)		{
  16               		.loc 1 23 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  290	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  291	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               		 ; SP -= 4	 ;  295	*addhi3_sp	[length = 2]
  27 0004 00D0      		rcall .
  28 0006 00D0      		rcall .
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 8
  31 0008 CDB7      		in r28,__SP_L__	 ;  296	*movhi/8	[length = 2]
  32 000a DEB7      		in r29,__SP_H__
  33               	.LCFI3:
  34               		.cfi_def_cfa_register 28
  35               	/* prologue: function */
  36               	/* frame size = 4 */
  37               	/* stack size = 6 */
  38               	.L__stack_usage = 6
  24:main.c        ****     Init();
  39               		.loc 1 24 0
  40 000c 00D0      		rcall Init	 ;  11	call_insn/2	[length = 1]
  41               	.LVL0:
  42               	.LBB9:
  25:main.c        ****     
  26:main.c        ****     int left 		= 0;
  27:main.c        ****     int right 		= 0;
  28:main.c        **** 	char a_pressed	= 0;
  29:main.c        **** 	char b_pressed	= 0;
  30:main.c        ****     
  31:main.c        **** 	while(1){
  32:main.c        **** 		
  33:main.c        **** 		
  34:main.c        **** 		uint16_t lineData[] = {0,0};
  35:main.c        **** 		LineData(lineData);
  36:main.c        **** 		
  37:main.c        **** 		char switches = PollSwitch();
  38:main.c        ****         switches &= 0b00111111;
  39:main.c        **** 		
  40:main.c        **** 		left  = ((int)lineData[LEFT]+60	)  / 6;
  43               		.loc 1 40 0
  44 000e 36E0      		ldi r19,lo8(6)	 ;  301	*reload_inhi	[length = 3]
  45 0010 832E      		mov r8,r19
  46 0012 912C      		mov r9,__zero_reg__
  47               	.LVL1:
  48               	.L20:
  34:main.c        **** 		LineData(lineData);
  49               		.loc 1 34 0
  50 0014 1A82      		std Y+2,__zero_reg__	 ;  17	*movhi/4	[length = 2]
  51 0016 1982      		std Y+1,__zero_reg__
  52 0018 1C82      		std Y+4,__zero_reg__	 ;  18	*movhi/4	[length = 2]
  53 001a 1B82      		std Y+3,__zero_reg__
  35:main.c        **** 		
  54               		.loc 1 35 0
  55 001c CE01      		movw r24,r28	 ;  285	*movhi/1	[length = 1]
  56 001e 0196      		adiw r24,1	 ;  19	*addhi3/3	[length = 1]
  57 0020 00D0      		rcall LineData	 ;  20	call_insn/2	[length = 1]
  58               	.LVL2:
  37:main.c        ****         switches &= 0b00111111;
  59               		.loc 1 37 0
  60 0022 00D0      		rcall PollSwitch	 ;  21	call_value_insn/2	[length = 1]
  61               	.LVL3:
  62 0024 482F      		mov r20,r24	 ;  22	movqi_insn/1	[length = 1]
  63               	.LVL4:
  64               		.loc 1 40 0
  65 0026 8981      		ldd r24,Y+1	 ;  25	*movhi/3	[length = 2]
  66 0028 9A81      		ldd r25,Y+2
  67 002a CC96      		adiw r24,60	 ;  26	addhi3_clobber/1	[length = 1]
  68 002c B401      		movw r22,r8	 ;  274	*movhi/1	[length = 1]
  69 002e 00D0      		rcall __divmodhi4	 ;  275	*divmodhi4_call	[length = 1]
  70 0030 6B01      		movw r12,r22	 ;  276	*movhi/1	[length = 1]
  71 0032 8B01      		movw r16,r22	 ;  29	*movhi/1	[length = 1]
  72               	.LVL5:
  41:main.c        **** 		right = ((int)lineData[RIGHT]	)  / 6;
  73               		.loc 1 41 0
  74 0034 8B81      		ldd r24,Y+3	 ;  31	*movhi/3	[length = 2]
  75 0036 9C81      		ldd r25,Y+4
  76 0038 B401      		movw r22,r8	 ;  279	*movhi/1	[length = 1]
  77 003a 00D0      		rcall __divmodhi4	 ;  280	*divmodhi4_call	[length = 1]
  78 003c 5B01      		movw r10,r22	 ;  281	*movhi/1	[length = 1]
  79 003e 7B01      		movw r14,r22	 ;  34	*movhi/1	[length = 1]
  80               	.LVL6:
  42:main.c        **** 		
  43:main.c        **** 		a_pressed = ( switches & SWITCH(1) );
  81               		.loc 1 43 0
  82 0040 842F      		mov r24,r20	 ;  286	movqi_insn/1	[length = 1]
  83 0042 8270      		andi r24,lo8(2)	 ;  36	andqi3/2	[length = 1]
  84 0044 582E      		mov r5,r24	 ;  287	movqi_insn/1	[length = 1]
  85               	.LVL7:
  44:main.c        **** 		b_pressed = ( switches & SWITCH(4) );
  86               		.loc 1 44 0
  87 0046 4071      		andi r20,lo8(16)	 ;  38	andqi3/2	[length = 1]
  88               	.LVL8:
  89 0048 442E      		mov r4,r20	 ;  288	movqi_insn/1	[length = 1]
  90               	.LVL9:
  45:main.c        **** 	
  46:main.c        **** 		
  47:main.c        **** 		//fahren
  48:main.c        **** 		
  49:main.c        **** 		MotorDir(FWD,FWD);
  91               		.loc 1 49 0
  92 004a 60E2      		ldi r22,lo8(32)	 ;  40	movqi_insn/2	[length = 1]
  93 004c 80E2      		ldi r24,lo8(32)	 ;  41	movqi_insn/2	[length = 1]
  94 004e 00D0      		rcall MotorDir	 ;  42	call_insn/2	[length = 1]
  95               	.LVL10:
  50:main.c        **** 		MotorSpeed(right,left);
  96               		.loc 1 50 0
  97 0050 6C2D      		mov r22,r12	 ;  43	movqi_insn/1	[length = 1]
  98 0052 8A2D      		mov r24,r10	 ;  44	movqi_insn/1	[length = 1]
  99 0054 00D0      		rcall MotorSpeed	 ;  45	call_insn/2	[length = 1]
 100               	.LVL11:
 101 0056 28E7      		ldi r18,lo8(120)	 ;  300	*reload_inhi	[length = 3]
 102 0058 622E      		mov r6,r18
 103 005a 712C      		mov r7,__zero_reg__
 104               	.LVL12:
 105               	.L3:
 106               	.LBB10:
 107               	.LBB11:
 108               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 109               		.loc 2 346 0
 110 005c 84E2      		ldi r24,lo8(36)	 ;  50	movqi_insn/2	[length = 1]
 111 005e 00D0      		rcall sleep	 ;  51	call_insn/2	[length = 1]
 112               	.LVL13:
 113 0060 81E0      		ldi r24,1	 ;  55	addhi3_clobber/3	[length = 3]
 114 0062 681A      		sub r6,r24
 115 0064 7108      		sbc r7,__zero_reg__
 116               	.LVL14:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 117               		.loc 2 345 0
 118 0066 6114      		cp r6,__zero_reg__	 ;  56	*cmphi/2	[length = 2]
 119 0068 7104      		cpc r7,__zero_reg__
 120 006a 01F4      		brne .L3	 ;  57	branch	[length = 1]
 121               	.LBE11:
 122               	.LBE10:
  51:main.c        **** 		msleep(120);
  52:main.c        **** 		
  53:main.c        **** 		if (left>255){
 123               		.loc 1 53 0
 124 006c 8FEF      		ldi r24,-1	 ;  66	*cmphi/7	[length = 3]
 125 006e C816      		cp r12,r24
 126 0070 D104      		cpc r13,__zero_reg__
 127 0072 01F0      		breq .+2	 ;  67	difficult_branch	[length = 2]
 128 0074 04F4      		brge .L21
  54:main.c        **** 			left=254;
  55:main.c        **** 			}
  56:main.c        **** 		else if(left<90){
 129               		.loc 1 56 0
 130 0076 8AE5      		ldi r24,90	 ;  69	*cmphi/7	[length = 3]
 131 0078 C816      		cp r12,r24
 132 007a D104      		cpc r13,__zero_reg__
 133 007c 04F4      		brge .L4	 ;  70	branch	[length = 1]
  57:main.c        **** 			left=0;
 134               		.loc 1 57 0
 135 007e 00E0      		ldi r16,0	 ;  5	*movhi/2	[length = 2]
 136 0080 10E0      		ldi r17,0
 137 0082 00C0      		rjmp .L4	 ;  304	jump	[length = 1]
 138               	.L21:
  54:main.c        **** 			left=254;
 139               		.loc 1 54 0
 140 0084 0EEF      		ldi r16,lo8(-2)	 ;  252	*movhi/5	[length = 2]
 141 0086 10E0      		ldi r17,0
 142               	.L4:
 143               	.LVL15:
  58:main.c        **** 			}	
  59:main.c        **** 			
  60:main.c        **** 		if (right>255){
 144               		.loc 1 60 0
 145 0088 8FEF      		ldi r24,-1	 ;  75	*cmphi/7	[length = 3]
 146 008a A816      		cp r10,r24
 147 008c B104      		cpc r11,__zero_reg__
 148 008e 01F0      		breq .+2	 ;  76	difficult_branch	[length = 2]
 149 0090 04F4      		brge .L23
  61:main.c        **** 			right=254;
  62:main.c        **** 			}
  63:main.c        **** 		else if(right<90){
 150               		.loc 1 63 0
 151 0092 8AE5      		ldi r24,90	 ;  78	*cmphi/7	[length = 3]
 152 0094 A816      		cp r10,r24
 153 0096 B104      		cpc r11,__zero_reg__
 154 0098 04F4      		brge .L5	 ;  79	branch	[length = 1]
  64:main.c        **** 			right=0;
 155               		.loc 1 64 0
 156 009a E12C      		mov r14,__zero_reg__	 ;  7	*movhi/2	[length = 2]
 157 009c F12C      		mov r15,__zero_reg__
 158 009e 00C0      		rjmp .L5	 ;  306	jump	[length = 1]
 159               	.L23:
  61:main.c        **** 			right=254;
 160               		.loc 1 61 0
 161 00a0 9EEF      		ldi r25,lo8(-2)	 ;  299	*reload_inhi	[length = 3]
 162 00a2 E92E      		mov r14,r25
 163 00a4 F12C      		mov r15,__zero_reg__
 164               	.L5:
 165               	.LVL16:
  65:main.c        **** 			}	
  66:main.c        **** 					
  67:main.c        **** 					
  68:main.c        **** 		//LED Steuerung
  69:main.c        **** 		
  70:main.c        **** 		if(left > right){
 166               		.loc 1 70 0
 167 00a6 E016      		cp r14,r16	 ;  84	*cmphi/3	[length = 2]
 168 00a8 F106      		cpc r15,r17
 169 00aa 04F4      		brge .L6	 ;  85	branch	[length = 1]
  71:main.c        **** 			BackLED(OFF,ON);
 170               		.loc 1 71 0
 171 00ac 61E0      		ldi r22,lo8(1)	 ;  87	movqi_insn/2	[length = 1]
 172 00ae 80E0      		ldi r24,0	 ;  88	movqi_insn/1	[length = 1]
 173 00b0 00D0      		rcall BackLED	 ;  89	call_insn/2	[length = 1]
 174               	.LVL17:
 175               	.L6:
  72:main.c        **** 		}
  73:main.c        **** 		if(right > left){
 176               		.loc 1 73 0
 177 00b2 0E15      		cp r16,r14	 ;  92	*cmphi/3	[length = 2]
 178 00b4 1F05      		cpc r17,r15
 179 00b6 04F4      		brge .L7	 ;  93	branch	[length = 1]
  74:main.c        **** 			BackLED(ON,OFF);
 180               		.loc 1 74 0
 181 00b8 60E0      		ldi r22,0	 ;  95	movqi_insn/1	[length = 1]
 182 00ba 81E0      		ldi r24,lo8(1)	 ;  96	movqi_insn/2	[length = 1]
 183 00bc 00D0      		rcall BackLED	 ;  97	call_insn/2	[length = 1]
 184               	.LVL18:
 185               	.L7:
  75:main.c        **** 		}
  76:main.c        **** 		if(right == left){
 186               		.loc 1 76 0
 187 00be E016      		cp r14,r16	 ;  100	*cmphi/3	[length = 2]
 188 00c0 F106      		cpc r15,r17
 189 00c2 01F4      		brne .L8	 ;  101	branch	[length = 1]
  77:main.c        **** 			BackLED(ON,ON);
 190               		.loc 1 77 0
 191 00c4 61E0      		ldi r22,lo8(1)	 ;  103	movqi_insn/2	[length = 1]
 192 00c6 81E0      		ldi r24,lo8(1)	 ;  104	movqi_insn/2	[length = 1]
 193 00c8 00D0      		rcall BackLED	 ;  105	call_insn/2	[length = 1]
 194               	.LVL19:
 195               	.L8:
  78:main.c        **** 		}
  79:main.c        **** 		if(right && left < 80){
 196               		.loc 1 79 0
 197 00ca E114      		cp r14,__zero_reg__	 ;  108	*cmphi/2	[length = 2]
 198 00cc F104      		cpc r15,__zero_reg__
 199 00ce 01F0      		breq .L10	 ;  109	branch	[length = 1]
 200               		.loc 1 79 0 is_stmt 0 discriminator 1
 201 00d0 0035      		cpi r16,80	 ;  115	*cmphi/6	[length = 2]
 202 00d2 1105      		cpc r17,__zero_reg__
 203 00d4 04F4      		brge .L11	 ;  116	branch	[length = 1]
  80:main.c        **** 			StatusLED(RED);
 204               		.loc 1 80 0 is_stmt 1
 205 00d6 82E0      		ldi r24,lo8(2)	 ;  118	movqi_insn/2	[length = 1]
 206 00d8 00D0      		rcall StatusLED	 ;  119	call_insn/2	[length = 1]
 207               	.LVL20:
 208               	.L11:
  81:main.c        **** 		}
  82:main.c        **** 		if(80 < right && left < 100){
 209               		.loc 1 82 0
 210 00da 81E5      		ldi r24,81	 ;  122	*cmphi/7	[length = 3]
 211 00dc E816      		cp r14,r24
 212 00de F104      		cpc r15,__zero_reg__
 213 00e0 04F0      		brlt .L12	 ;  123	branch	[length = 1]
 214               		.loc 1 82 0 is_stmt 0 discriminator 1
 215 00e2 0436      		cpi r16,100	 ;  125	*cmphi/6	[length = 2]
 216 00e4 1105      		cpc r17,__zero_reg__
 217 00e6 04F4      		brge .L12	 ;  126	branch	[length = 1]
  83:main.c        **** 			StatusLED(YELLOW);
 218               		.loc 1 83 0 is_stmt 1
 219 00e8 83E0      		ldi r24,lo8(3)	 ;  128	movqi_insn/2	[length = 1]
 220 00ea 00D0      		rcall StatusLED	 ;  129	call_insn/2	[length = 1]
 221               	.LVL21:
 222               	.L12:
  84:main.c        **** 		}
  85:main.c        **** 		if(right && left > 100){
 223               		.loc 1 85 0 discriminator 1
 224 00ec 0536      		cpi r16,101	 ;  135	*cmphi/6	[length = 2]
 225 00ee 1105      		cpc r17,__zero_reg__
 226 00f0 04F0      		brlt .L10	 ;  136	branch	[length = 1]
  86:main.c        **** 			StatusLED(GREEN);
 227               		.loc 1 86 0
 228 00f2 81E0      		ldi r24,lo8(1)	 ;  138	movqi_insn/2	[length = 1]
 229 00f4 00D0      		rcall StatusLED	 ;  139	call_insn/2	[length = 1]
 230               	.LVL22:
 231               	.L10:
  87:main.c        **** 		}
  88:main.c        **** 		
  89:main.c        **** 		//Rückfahrt
  90:main.c        **** 		
  91:main.c        **** 		if (a_pressed | b_pressed > 0) {
 232               		.loc 1 91 0
 233 00f6 21E0      		ldi r18,lo8(1)	 ;  254	*movhi/5	[length = 2]
 234 00f8 30E0      		ldi r19,0
 235 00fa 4110      		cpse r4,__zero_reg__	 ;  143	enable_interrupt-3	[length = 1]
 236 00fc 00C0      		rjmp .L16
 237 00fe 20E0      		ldi r18,0	 ;  145	*movhi/2	[length = 2]
 238 0100 30E0      		ldi r19,0
 239               	.L16:
 240 0102 2529      		or r18,r5	 ;  289	iorqi3/1	[length = 1]
 241 0104 232B      		or r18,r19	 ;  149	*cmphi/2	[length = 1]
 242 0106 01F0      		breq .L15	 ;  150	branch	[length = 1]
  92:main.c        **** 			BackLED(OFF,ON);
 243               		.loc 1 92 0
 244 0108 61E0      		ldi r22,lo8(1)	 ;  152	movqi_insn/2	[length = 1]
 245 010a 80E0      		ldi r24,0	 ;  153	movqi_insn/1	[length = 1]
 246 010c 00D0      		rcall BackLED	 ;  154	call_insn/2	[length = 1]
 247               	.LVL23:
 248               	.LBB12:
 249               	.LBB13:
 250               		.loc 2 346 0
 251 010e 84E2      		ldi r24,lo8(36)	 ;  157	movqi_insn/2	[length = 1]
 252 0110 00D0      		rcall sleep	 ;  158	call_insn/2	[length = 1]
 253               	.LVL24:
 254               	.LBE13:
 255               	.LBE12:
  93:main.c        **** 			msleep(1);
  94:main.c        **** 			BackLED(ON,OFF);
 256               		.loc 1 94 0
 257 0112 60E0      		ldi r22,0	 ;  161	movqi_insn/1	[length = 1]
 258 0114 81E0      		ldi r24,lo8(1)	 ;  162	movqi_insn/2	[length = 1]
 259 0116 00D0      		rcall BackLED	 ;  163	call_insn/2	[length = 1]
 260               	.LVL25:
  95:main.c        **** 			MotorDir(RWD,RWD);
 261               		.loc 1 95 0
 262 0118 60E1      		ldi r22,lo8(16)	 ;  164	movqi_insn/2	[length = 1]
 263 011a 80E1      		ldi r24,lo8(16)	 ;  165	movqi_insn/2	[length = 1]
 264 011c 00D0      		rcall MotorDir	 ;  166	call_insn/2	[length = 1]
 265               	.LVL26:
  96:main.c        **** 			MotorSpeed(120,120);
 266               		.loc 1 96 0
 267 011e 68E7      		ldi r22,lo8(120)	 ;  167	movqi_insn/2	[length = 1]
 268 0120 88E7      		ldi r24,lo8(120)	 ;  168	movqi_insn/2	[length = 1]
 269 0122 00D0      		rcall MotorSpeed	 ;  169	call_insn/2	[length = 1]
 270               	.LVL27:
 271 0124 88E5      		ldi r24,lo8(88)	 ;  298	*reload_inhi	[length = 4]
 272 0126 C82E      		mov r12,r24
 273 0128 82E0      		ldi r24,lo8(2)
 274 012a D82E      		mov r13,r24
 275               	.LVL28:
 276               	.L18:
 277               	.LBB14:
 278               	.LBB15:
 279               		.loc 2 346 0
 280 012c 84E2      		ldi r24,lo8(36)	 ;  174	movqi_insn/2	[length = 1]
 281 012e 00D0      		rcall sleep	 ;  175	call_insn/2	[length = 1]
 282               	.LVL29:
 283 0130 81E0      		ldi r24,1	 ;  179	addhi3_clobber/3	[length = 3]
 284 0132 C81A      		sub r12,r24
 285 0134 D108      		sbc r13,__zero_reg__
 286               	.LVL30:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 287               		.loc 2 345 0
 288 0136 C114      		cp r12,__zero_reg__	 ;  180	*cmphi/2	[length = 2]
 289 0138 D104      		cpc r13,__zero_reg__
 290 013a 01F4      		brne .L18	 ;  181	branch	[length = 1]
 291               	.LBE15:
 292               	.LBE14:
  97:main.c        **** 			msleep(600);
  98:main.c        **** 			MotorDir(BREAK,BREAK);
 293               		.loc 1 98 0
 294 013c 60E0      		ldi r22,0	 ;  190	movqi_insn/1	[length = 1]
 295 013e 80E0      		ldi r24,0	 ;  191	movqi_insn/1	[length = 1]
 296 0140 00D0      		rcall MotorDir	 ;  192	call_insn/2	[length = 1]
 297               	.LVL31:
 298               	.L15:
  99:main.c        **** 			}
 100:main.c        **** 			
 101:main.c        **** 			
 102:main.c        **** 		//Lichtsuche
 103:main.c        **** 		
 104:main.c        **** 		if(left && right < 80){
 299               		.loc 1 104 0
 300 0142 012B      		or r16,r17	 ;  195	*cmphi/2	[length = 1]
 301 0144 01F4      		brne .+2	 ;  196	branch	[length = 2]
 302 0146 00C0      		rjmp .L20
 303               		.loc 1 104 0 is_stmt 0 discriminator 1
 304 0148 80E5      		ldi r24,80	 ;  198	*cmphi/7	[length = 3]
 305 014a E816      		cp r14,r24
 306 014c F104      		cpc r15,__zero_reg__
 307 014e 04F0      		brlt .+2	 ;  199	branch	[length = 2]
 308 0150 00C0      		rjmp .L20
 105:main.c        **** 			MotorDir(RWD,FWD);
 309               		.loc 1 105 0 is_stmt 1
 310 0152 60E2      		ldi r22,lo8(32)	 ;  201	movqi_insn/2	[length = 1]
 311 0154 80E1      		ldi r24,lo8(16)	 ;  202	movqi_insn/2	[length = 1]
 312 0156 00D0      		rcall MotorDir	 ;  203	call_insn/2	[length = 1]
 313               	.LVL32:
 106:main.c        **** 			MotorSpeed(120,120);
 314               		.loc 1 106 0
 315 0158 68E7      		ldi r22,lo8(120)	 ;  204	movqi_insn/2	[length = 1]
 316 015a 88E7      		ldi r24,lo8(120)	 ;  205	movqi_insn/2	[length = 1]
 317 015c 00D0      		rcall MotorSpeed	 ;  206	call_insn/2	[length = 1]
 318               	.LVL33:
 319               	.LBE9:
 107:main.c        **** 			}
 108:main.c        **** 					
 109:main.c        **** }	
 320               		.loc 1 109 0
 321 015e 00C0      		rjmp .L20	 ;  308	jump	[length = 1]
 322               		.cfi_endproc
 323               	.LFE2:
 325               		.text
 326               	.Letext0:
 327               		.file 3 "/usr/lib/avr/include/stdint.h"
 328               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 329               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 330               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 331               		.file 7 "../../libtinyasuro/inc/asuro/switches.h"
 332               		.file 8 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cch88gX3.s:2      *ABS*:0000003e __SP_H__
     /tmp/cch88gX3.s:3      *ABS*:0000003d __SP_L__
     /tmp/cch88gX3.s:4      *ABS*:0000003f __SREG__
     /tmp/cch88gX3.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cch88gX3.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cch88gX3.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
LineData
PollSwitch
__divmodhi4
MotorDir
MotorSpeed
sleep
BackLED
StatusLED
