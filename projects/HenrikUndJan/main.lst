   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** 	
   2:main.c        **** // 	   			(K)iT lives!
   3:main.c        **** //*********************************************
   4:main.c        **** //*|x|**| |***| |****[___]****[_________]**|x|*
   5:main.c        **** //*|x|**| |***/ /*****| |*********| |******|x|*	 
   6:main.c        **** //*|x|**| |**/ /******| |*********| |******|x|*
   7:main.c        **** //*|x|**[     ]*******| |*********| |******|x|*
   8:main.c        **** //*|x|**| |**\ \******| |*********| |******|x|*
   9:main.c        **** //*|x|**| |***\ \*****| |*********| |******|x|*
  10:main.c        **** //*|x|**| |***| |****[___]*******[___]*****|x|*
  11:main.c        **** //*********************************************
  12:main.c        **** //
  13:main.c        **** #define SWITCH(X) 1<<X
  14:main.c        **** #define SLOW 1000
  15:main.c        **** #define FAST 100
  16:main.c        **** 
  17:main.c        **** #include <asuro/asuro.h>
  18:main.c        **** 
  19:main.c        **** void main(void)		{
  16               		.loc 1 19 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  293	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  294	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               		 ; SP -= 4	 ;  298	*addhi3_sp	[length = 2]
  27 0004 00D0      		rcall .
  28 0006 00D0      		rcall .
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 8
  31 0008 CDB7      		in r28,__SP_L__	 ;  299	*movhi/8	[length = 2]
  32 000a DEB7      		in r29,__SP_H__
  33               	.LCFI3:
  34               		.cfi_def_cfa_register 28
  35               	/* prologue: function */
  36               	/* frame size = 4 */
  37               	/* stack size = 6 */
  38               	.L__stack_usage = 6
  20:main.c        ****     Init();
  39               		.loc 1 20 0
  40 000c 00D0      		rcall Init	 ;  15	call_insn/2	[length = 1]
  41               	.LVL0:
  21:main.c        ****     
  22:main.c        ****     int counter 	= 0;
  23:main.c        ****     int x			= 0;
  42               		.loc 1 23 0
  43 000e C12C      		mov r12,__zero_reg__	 ;  3	*movhi/2	[length = 2]
  44 0010 D12C      		mov r13,__zero_reg__
  45               	.LBB9:
  24:main.c        ****     int left 		= 0;
  25:main.c        ****     int right 		= 0;
  26:main.c        **** 	char a_pressed	= 0;
  27:main.c        **** 	char b_pressed	= 0;
  28:main.c        **** 	char c_pressed	= 0;
  29:main.c        **** 	char d_pressed	= 0;
  30:main.c        **** 	char e_pressed	= 0;
  31:main.c        **** 	char f_pressed	= 0;
  32:main.c        ****     
  33:main.c        **** 	while(1){
  34:main.c        **** 		
  35:main.c        **** 		
  36:main.c        **** 		uint16_t lineData[] = {0,0};
  37:main.c        **** 		LineData(lineData);
  38:main.c        **** 		
  39:main.c        **** 		char switches = PollSwitch();
  40:main.c        ****         switches &= 0b00111111;
  41:main.c        **** 		
  42:main.c        **** 		left  = ((int)lineData[LEFT] +160)  / 7;
  46               		.loc 1 42 0
  47 0012 37E0      		ldi r19,lo8(7)	 ;  304	*reload_inhi	[length = 3]
  48 0014 A32E      		mov r10,r19
  49 0016 B12C      		mov r11,__zero_reg__
  50               	.LVL1:
  51               	.L20:
  36:main.c        **** 		LineData(lineData);
  52               		.loc 1 36 0
  53 0018 1A82      		std Y+2,__zero_reg__	 ;  28	*movhi/4	[length = 2]
  54 001a 1982      		std Y+1,__zero_reg__
  55 001c 1C82      		std Y+4,__zero_reg__	 ;  29	*movhi/4	[length = 2]
  56 001e 1B82      		std Y+3,__zero_reg__
  37:main.c        **** 		
  57               		.loc 1 37 0
  58 0020 CE01      		movw r24,r28	 ;  292	*movhi/1	[length = 1]
  59 0022 0196      		adiw r24,1	 ;  30	*addhi3/3	[length = 1]
  60 0024 00D0      		rcall LineData	 ;  31	call_insn/2	[length = 1]
  61               	.LVL2:
  39:main.c        ****         switches &= 0b00111111;
  62               		.loc 1 39 0
  63 0026 00D0      		rcall PollSwitch	 ;  32	call_value_insn/2	[length = 1]
  64               	.LVL3:
  65               		.loc 1 42 0
  66 0028 8981      		ldd r24,Y+1	 ;  35	*movhi/3	[length = 2]
  67 002a 9A81      		ldd r25,Y+2
  68 002c 8056      		subi r24,96	 ;  36	addhi3_clobber/2	[length = 2]
  69 002e 9F4F      		sbci r25,-1
  70 0030 B501      		movw r22,r10	 ;  281	*movhi/1	[length = 1]
  71 0032 00D0      		rcall __divmodhi4	 ;  282	*divmodhi4_call	[length = 1]
  72 0034 8B01      		movw r16,r22	 ;  283	*movhi/1	[length = 1]
  73               	.LVL4:
  43:main.c        **** 		right = ((int)lineData[RIGHT]+100)  / 7;
  74               		.loc 1 43 0
  75 0036 8B81      		ldd r24,Y+3	 ;  41	*movhi/3	[length = 2]
  76 0038 9C81      		ldd r25,Y+4
  77 003a 8C59      		subi r24,-100	 ;  42	addhi3_clobber/2	[length = 2]
  78 003c 9F4F      		sbci r25,-1
  79 003e B501      		movw r22,r10	 ;  286	*movhi/1	[length = 1]
  80 0040 00D0      		rcall __divmodhi4	 ;  287	*divmodhi4_call	[length = 1]
  81 0042 7B01      		movw r14,r22	 ;  45	*movhi/1	[length = 1]
  82               	.LVL5:
  44:main.c        **** 		
  45:main.c        **** 		a_pressed = ( switches & SWITCH(1) );
  46:main.c        **** 		b_pressed = ( switches & SWITCH(4) );
  47:main.c        **** 		c_pressed = ( switches & SWITCH(0) );
  48:main.c        **** 		d_pressed = ( switches & SWITCH(3) );
  49:main.c        **** 		e_pressed = ( switches & SWITCH(2) );
  50:main.c        **** 		f_pressed = ( switches & SWITCH(5) );
  51:main.c        **** 		
  52:main.c        **** 		//fahren
  53:main.c        **** 		
  54:main.c        **** 		if (left>200 ){
  83               		.loc 1 54 0
  84 0044 093C      		cpi r16,-55	 ;  53	*cmphi/6	[length = 2]
  85 0046 1105      		cpc r17,__zero_reg__
  86 0048 04F4      		brge .L21	 ;  54	branch	[length = 1]
  55:main.c        **** 			left=200;
  56:main.c        **** 		}
  57:main.c        **** 		else if(left<100){
  87               		.loc 1 57 0
  88 004a 0436      		cpi r16,100	 ;  56	*cmphi/6	[length = 2]
  89 004c 1105      		cpc r17,__zero_reg__
  90 004e 04F4      		brge .L2	 ;  57	branch	[length = 1]
  58:main.c        **** 			left=0;
  91               		.loc 1 58 0
  92 0050 00E0      		ldi r16,0	 ;  5	*movhi/2	[length = 2]
  93 0052 10E0      		ldi r17,0
  94               	.LVL6:
  95 0054 00C0      		rjmp .L2	 ;  307	jump	[length = 1]
  96               	.LVL7:
  97               	.L21:
  55:main.c        **** 			left=200;
  98               		.loc 1 55 0
  99 0056 08EC      		ldi r16,lo8(-56)	 ;  252	*movhi/5	[length = 2]
 100 0058 10E0      		ldi r17,0
 101               	.LVL8:
 102               	.L2:
  59:main.c        **** 		}		
  60:main.c        **** 		if (right>200){
 103               		.loc 1 60 0
 104 005a 693C      		cpi r22,-55	 ;  62	*cmphi/6	[length = 2]
 105 005c 7105      		cpc r23,__zero_reg__
 106 005e 04F4      		brge .L23	 ;  63	branch	[length = 1]
  61:main.c        **** 			(right=200);
  62:main.c        **** 		}
  63:main.c        **** 		else if(right<100){
 107               		.loc 1 63 0
 108 0060 6436      		cpi r22,100	 ;  65	*cmphi/6	[length = 2]
 109 0062 7105      		cpc r23,__zero_reg__
 110 0064 04F4      		brge .L3	 ;  66	branch	[length = 1]
  64:main.c        **** 			right=0;
 111               		.loc 1 64 0
 112 0066 E12C      		mov r14,__zero_reg__	 ;  7	*movhi/2	[length = 2]
 113 0068 F12C      		mov r15,__zero_reg__
 114               	.LVL9:
 115 006a 00C0      		rjmp .L3	 ;  309	jump	[length = 1]
 116               	.LVL10:
 117               	.L23:
  61:main.c        **** 			(right=200);
 118               		.loc 1 61 0
 119 006c 28EC      		ldi r18,lo8(-56)	 ;  303	*reload_inhi	[length = 3]
 120 006e E22E      		mov r14,r18
 121 0070 F12C      		mov r15,__zero_reg__
 122               	.LVL11:
 123               	.L3:
  65:main.c        **** 		}
  66:main.c        **** 			
  67:main.c        **** 		MotorDir(FWD,FWD);
 124               		.loc 1 67 0
 125 0072 60E2      		ldi r22,lo8(32)	 ;  71	movqi_insn/2	[length = 1]
 126 0074 80E2      		ldi r24,lo8(32)	 ;  72	movqi_insn/2	[length = 1]
 127 0076 00D0      		rcall MotorDir	 ;  73	call_insn/2	[length = 1]
 128               	.LVL12:
  68:main.c        **** 		MotorSpeed(right,left);
 129               		.loc 1 68 0
 130 0078 602F      		mov r22,r16	 ;  74	movqi_insn/1	[length = 1]
 131 007a 8E2D      		mov r24,r14	 ;  75	movqi_insn/1	[length = 1]
 132 007c 00D0      		rcall MotorSpeed	 ;  76	call_insn/2	[length = 1]
 133               	.LVL13:
 134 007e 98E7      		ldi r25,lo8(120)	 ;  302	*reload_inhi	[length = 3]
 135 0080 892E      		mov r8,r25
 136 0082 912C      		mov r9,__zero_reg__
 137               	.LVL14:
 138               	.L5:
 139               	.LBB10:
 140               	.LBB11:
 141               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle fÃ¼r die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermÃ¶glichen, den Prozessor fÃ¼r einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nÃ¤chsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der FunktionalitÃ¤t aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * AuÃerdem wird die MÃ¶glichkeit geboten, die Taktausgabe fÃ¼r die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * ZusÃ¤tzlich besteht die MÃ¶glichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszufÃ¼hren, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      FÃ¼r eine korrekte Funktion des Moduls mÃ¼ssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind fÃ¼r kurze Zeitspannen zulÃ¤ssig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      kÃ¶nnen aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benÃ¶tigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-TrÃ¤ger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  ZÃ¤hlervariable zugÃ¤nglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros fÃ¼r sleep, msleep und sleepUntilInterrupt hinzugefÃ¼gt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook fÃ¼r Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro fÃ¼r sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro fÃ¼r msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro fÃ¼r sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine ZÃ¤hlvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die MÃ¶glichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszufÃ¼hren. Die interne FunktionalitÃ¤t bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion mÃ¶glichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese FunktionalitÃ¤t steht nicht zur VerfÃ¼gung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator fÃ¼r die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe fÃ¼r die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals fÃ¼r die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschÃ¤nkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgefÃ¼hrt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals fÃ¼r die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschrÃ¤nkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgefÃ¼hrt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * HÃ¤lt den Programmfluss fÃ¼r die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor wÃ¤hrendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgefÃ¼hrt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurÃ¼ck, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelÃ¶st wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * VerhÃ¤lt sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 142               		.loc 2 346 0
 143 0084 84E2      		ldi r24,lo8(36)	 ;  81	movqi_insn/2	[length = 1]
 144 0086 00D0      		rcall sleep	 ;  82	call_insn/2	[length = 1]
 145               	.LVL15:
 146 0088 81E0      		ldi r24,1	 ;  86	addhi3_clobber/3	[length = 3]
 147 008a 881A      		sub r8,r24
 148 008c 9108      		sbc r9,__zero_reg__
 149               	.LVL16:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 150               		.loc 2 345 0
 151 008e 8114      		cp r8,__zero_reg__	 ;  87	*cmphi/2	[length = 2]
 152 0090 9104      		cpc r9,__zero_reg__
 153 0092 01F4      		brne .L5	 ;  88	branch	[length = 1]
 154               	.LBE11:
 155               	.LBE10:
  69:main.c        **** 		msleep(120);
  70:main.c        **** 						
  71:main.c        **** 		//LED Steuerung
  72:main.c        **** 		
  73:main.c        **** 		if(left > right){
 156               		.loc 1 73 0
 157 0094 E016      		cp r14,r16	 ;  97	*cmphi/3	[length = 2]
 158 0096 F106      		cpc r15,r17
 159 0098 04F4      		brge .L6	 ;  98	branch	[length = 1]
  74:main.c        **** 			BackLED(OFF,ON);
 160               		.loc 1 74 0
 161 009a 61E0      		ldi r22,lo8(1)	 ;  100	movqi_insn/2	[length = 1]
 162 009c 80E0      		ldi r24,0	 ;  101	movqi_insn/1	[length = 1]
 163 009e 00D0      		rcall BackLED	 ;  102	call_insn/2	[length = 1]
 164               	.LVL17:
 165               	.L6:
  75:main.c        **** 		}
  76:main.c        **** 		if(right > left){
 166               		.loc 1 76 0
 167 00a0 0E15      		cp r16,r14	 ;  105	*cmphi/3	[length = 2]
 168 00a2 1F05      		cpc r17,r15
 169 00a4 04F4      		brge .L7	 ;  106	branch	[length = 1]
  77:main.c        **** 			BackLED(ON,OFF);
 170               		.loc 1 77 0
 171 00a6 60E0      		ldi r22,0	 ;  108	movqi_insn/1	[length = 1]
 172 00a8 81E0      		ldi r24,lo8(1)	 ;  109	movqi_insn/2	[length = 1]
 173 00aa 00D0      		rcall BackLED	 ;  110	call_insn/2	[length = 1]
 174               	.LVL18:
 175               	.L7:
  78:main.c        **** 		}
  79:main.c        **** 		if(right == left){
 176               		.loc 1 79 0
 177 00ac E016      		cp r14,r16	 ;  113	*cmphi/3	[length = 2]
 178 00ae F106      		cpc r15,r17
 179 00b0 01F4      		brne .L8	 ;  114	branch	[length = 1]
  80:main.c        **** 			BackLED(ON,ON);
 180               		.loc 1 80 0
 181 00b2 61E0      		ldi r22,lo8(1)	 ;  116	movqi_insn/2	[length = 1]
 182 00b4 81E0      		ldi r24,lo8(1)	 ;  117	movqi_insn/2	[length = 1]
 183 00b6 00D0      		rcall BackLED	 ;  118	call_insn/2	[length = 1]
 184               	.LVL19:
 185               	.L8:
  81:main.c        **** 		}
  82:main.c        **** 		if(right && left < 80){
 186               		.loc 1 82 0
 187 00b8 E114      		cp r14,__zero_reg__	 ;  121	*cmphi/2	[length = 2]
 188 00ba F104      		cpc r15,__zero_reg__
 189 00bc 01F0      		breq .L10	 ;  122	branch	[length = 1]
 190               		.loc 1 82 0 is_stmt 0 discriminator 1
 191 00be 0035      		cpi r16,80	 ;  128	*cmphi/6	[length = 2]
 192 00c0 1105      		cpc r17,__zero_reg__
 193 00c2 04F4      		brge .L11	 ;  129	branch	[length = 1]
  83:main.c        **** 			StatusLED(RED);
 194               		.loc 1 83 0 is_stmt 1
 195 00c4 82E0      		ldi r24,lo8(2)	 ;  131	movqi_insn/2	[length = 1]
 196 00c6 00D0      		rcall StatusLED	 ;  132	call_insn/2	[length = 1]
 197               	.LVL20:
 198               	.L11:
  84:main.c        **** 		}
  85:main.c        **** 		if(80 < right && left < 120){
 199               		.loc 1 85 0
 200 00c8 81E5      		ldi r24,81	 ;  135	*cmphi/7	[length = 3]
 201 00ca E816      		cp r14,r24
 202 00cc F104      		cpc r15,__zero_reg__
 203 00ce 04F0      		brlt .L12	 ;  136	branch	[length = 1]
 204               		.loc 1 85 0 is_stmt 0 discriminator 1
 205 00d0 0837      		cpi r16,120	 ;  138	*cmphi/6	[length = 2]
 206 00d2 1105      		cpc r17,__zero_reg__
 207 00d4 04F4      		brge .L12	 ;  139	branch	[length = 1]
  86:main.c        **** 			StatusLED(YELLOW);
 208               		.loc 1 86 0 is_stmt 1
 209 00d6 83E0      		ldi r24,lo8(3)	 ;  141	movqi_insn/2	[length = 1]
 210 00d8 00D0      		rcall StatusLED	 ;  142	call_insn/2	[length = 1]
 211               	.LVL21:
 212               	.L12:
  87:main.c        **** 		}
  88:main.c        **** 		if(right && left > 120){
 213               		.loc 1 88 0 discriminator 1
 214 00da 0937      		cpi r16,121	 ;  148	*cmphi/6	[length = 2]
 215 00dc 1105      		cpc r17,__zero_reg__
 216 00de 04F0      		brlt .L10	 ;  149	branch	[length = 1]
  89:main.c        **** 			StatusLED(GREEN);
 217               		.loc 1 89 0
 218 00e0 81E0      		ldi r24,lo8(1)	 ;  151	movqi_insn/2	[length = 1]
 219 00e2 00D0      		rcall StatusLED	 ;  152	call_insn/2	[length = 1]
 220               	.LVL22:
 221               	.L10:
  90:main.c        **** 		}
  91:main.c        **** 		
  92:main.c        **** 			if(x == 29){
 222               		.loc 1 92 0
 223 00e4 8DE1      		ldi r24,29	 ;  155	*cmphi/7	[length = 3]
 224 00e6 C816      		cp r12,r24
 225 00e8 D104      		cpc r13,__zero_reg__
 226 00ea 01F4      		brne .L15	 ;  156	branch	[length = 1]
  93:main.c        **** 				FrontLED(ON);
 227               		.loc 1 93 0
 228 00ec 81E0      		ldi r24,lo8(1)	 ;  158	movqi_insn/2	[length = 1]
 229 00ee 00D0      		rcall FrontLED	 ;  159	call_insn/2	[length = 1]
 230               	.LVL23:
 231 00f0 08EC      		ldi r16,lo8(-56)	 ;  257	*movhi/5	[length = 2]
 232 00f2 10E0      		ldi r17,0
 233               	.LVL24:
 234               	.L17:
 235               	.LBB12:
 236               	.LBB13:
 237               		.loc 2 346 0
 238 00f4 84E2      		ldi r24,lo8(36)	 ;  164	movqi_insn/2	[length = 1]
 239 00f6 00D0      		rcall sleep	 ;  165	call_insn/2	[length = 1]
 240               	.LVL25:
 241 00f8 0150      		subi r16,1	 ;  169	addhi3_clobber/2	[length = 2]
 242 00fa 1109      		sbc r17,__zero_reg__
 243               	.LVL26:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 244               		.loc 2 345 0
 245 00fc 0115      		cp r16,__zero_reg__	 ;  170	*cmphi/2	[length = 2]
 246 00fe 1105      		cpc r17,__zero_reg__
 247 0100 01F4      		brne .L17	 ;  171	branch	[length = 1]
 248 0102 00C0      		rjmp .L28	 ;  313	jump	[length = 1]
 249               	.LVL27:
 250               	.L15:
 251               	.LBE13:
 252               	.LBE12:
  94:main.c        **** 				msleep(200);
  95:main.c        **** 				x=0;
  96:main.c        **** 		    }
  97:main.c        **** 		    if(x == 15){				
 253               		.loc 1 97 0
 254 0104 8FE0      		ldi r24,15	 ;  181	*cmphi/7	[length = 3]
 255 0106 C816      		cp r12,r24
 256 0108 D104      		cpc r13,__zero_reg__
 257 010a 01F4      		brne .L16	 ;  182	branch	[length = 1]
  98:main.c        **** 				FrontLED(OFF);
 258               		.loc 1 98 0
 259 010c 80E0      		ldi r24,0	 ;  184	movqi_insn/1	[length = 1]
 260 010e 00D0      		rcall FrontLED	 ;  185	call_insn/2	[length = 1]
 261               	.LVL28:
 262 0110 08EC      		ldi r16,lo8(-56)	 ;  255	*movhi/5	[length = 2]
 263 0112 10E0      		ldi r17,0
 264               	.LVL29:
 265               	.L19:
 266               	.LBB14:
 267               	.LBB15:
 268               		.loc 2 346 0
 269 0114 84E2      		ldi r24,lo8(36)	 ;  190	movqi_insn/2	[length = 1]
 270 0116 00D0      		rcall sleep	 ;  191	call_insn/2	[length = 1]
 271               	.LVL30:
 272 0118 0150      		subi r16,1	 ;  195	addhi3_clobber/2	[length = 2]
 273 011a 1109      		sbc r17,__zero_reg__
 274               	.LVL31:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 275               		.loc 2 345 0
 276 011c 0115      		cp r16,__zero_reg__	 ;  196	*cmphi/2	[length = 2]
 277 011e 1105      		cpc r17,__zero_reg__
 278 0120 01F4      		brne .L19	 ;  197	branch	[length = 1]
 279 0122 00C0      		rjmp .L29	 ;  317	jump	[length = 1]
 280               	.LVL32:
 281               	.L28:
 282               	.LBE15:
 283               	.LBE14:
  95:main.c        **** 		    }
 284               		.loc 1 95 0
 285 0124 C12C      		mov r12,__zero_reg__	 ;  11	*movhi/2	[length = 2]
 286 0126 D12C      		mov r13,__zero_reg__
 287               	.LVL33:
 288               	.L16:
  99:main.c        **** 				msleep(200);
 100:main.c        **** 				x++;
 101:main.c        **** 				}
 102:main.c        **** 			else{
 103:main.c        **** 				x++;
 289               		.loc 1 103 0
 290 0128 8FEF      		ldi r24,-1	 ;  207	addhi3_clobber/3	[length = 3]
 291 012a C81A      		sub r12,r24
 292 012c D80A      		sbc r13,r24
 293               	.LVL34:
 294 012e 00C0      		rjmp .L20	 ;  319	jump	[length = 1]
 295               	.LVL35:
 296               	.L29:
 100:main.c        **** 				}
 297               		.loc 1 100 0
 298 0130 80E1      		ldi r24,lo8(16)	 ;  301	*reload_inhi	[length = 3]
 299 0132 C82E      		mov r12,r24
 300 0134 D12C      		mov r13,__zero_reg__
 301               	.LVL36:
 302               	.LBE9:
 104:main.c        **** 				}
 105:main.c        **** 			
 106:main.c        **** 		}	
 303               		.loc 1 106 0
 304 0136 00C0      		rjmp .L20	 ;  321	jump	[length = 1]
 305               		.cfi_endproc
 306               	.LFE2:
 308               		.text
 309               	.Letext0:
 310               		.file 3 "/usr/lib/avr/include/stdint.h"
 311               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 312               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 313               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 314               		.file 7 "../../libtinyasuro/inc/asuro/switches.h"
 315               		.file 8 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccHMOqui.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccHMOqui.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccHMOqui.s:4      *ABS*:0000003f __SREG__
     /tmp/ccHMOqui.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccHMOqui.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccHMOqui.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
LineData
PollSwitch
__divmodhi4
MotorDir
MotorSpeed
sleep
BackLED
StatusLED
FrontLED
