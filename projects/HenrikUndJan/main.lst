   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        ****  * 	   (K)iT lives!
   3:main.c        ****  *		  	  *
   4:main.c        ****  *           * *
   5:main.c        ****  * 			* * *
   6:main.c        ****  *         * * * *
   7:main.c        ****  *        * * * * *
   8:main.c        ****  * 		 * * * * * *
   9:main.c        ****  * 		* * * * * * *
  10:main.c        ****  *     * * * * * * * *
  11:main.c        ****  *    * * * * * * * * *
  12:main.c        ****  *		   	 * *
  13:main.c        ****  *		   	 * *
  14:main.c        ****  * 		   	 * *
  15:main.c        ****  * 
  16:main.c        ****  */
  17:main.c        **** 
  18:main.c        **** #define SWITCH(X) 1<<X
  19:main.c        **** #define SLOW 1000
  20:main.c        **** #define FAST 100
  21:main.c        **** 
  22:main.c        **** #include <asuro/asuro.h>
  23:main.c        **** 
  24:main.c        **** void main(void)		{
  16               		.loc 1 24 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  442	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  443	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               		 ; SP -= 6	 ;  447	*addhi3_sp	[length = 3]
  27 0004 00D0      		rcall .
  28 0006 00D0      		rcall .
  29 0008 00D0      		rcall .
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 10
  32 000a CDB7      		in r28,__SP_L__	 ;  448	*movhi/8	[length = 2]
  33 000c DEB7      		in r29,__SP_H__
  34               	.LCFI3:
  35               		.cfi_def_cfa_register 28
  36               	/* prologue: function */
  37               	/* frame size = 6 */
  38               	/* stack size = 8 */
  39               	.L__stack_usage = 8
  25:main.c        ****     Init();
  40               		.loc 1 25 0
  41 000e 00D0      		rcall Init	 ;  13	call_insn/2	[length = 1]
  42               	.LVL0:
  43               	.LBB17:
  26:main.c        ****     
  27:main.c        ****     int left 		= 0;
  28:main.c        ****     int right 		= 0;
  29:main.c        **** 	char a_pressed	= 0;
  30:main.c        **** 	char b_pressed	= 0;
  31:main.c        **** 	char c_pressed	= 0;
  32:main.c        **** 	char d_pressed	= 0;
  33:main.c        **** 	char e_pressed	= 0;
  34:main.c        **** 	char f_pressed	= 0;
  35:main.c        ****     
  36:main.c        **** 	while(1){
  37:main.c        **** 		
  38:main.c        **** 		
  39:main.c        **** 		uint16_t lineData[] = {0,0};
  40:main.c        **** 		LineData(lineData);
  41:main.c        **** 		
  42:main.c        **** 		char switches = PollSwitch();
  43:main.c        ****         switches &= 0b00111111;
  44:main.c        **** 		
  45:main.c        **** 		left  = ((int)lineData[LEFT]+60	)  / 6;
  44               		.loc 1 45 0
  45 0010 56E0      		ldi r21,lo8(6)	 ;  455	*reload_inhi	[length = 3]
  46 0012 852E      		mov r8,r21
  47 0014 912C      		mov r9,__zero_reg__
  48               	.LVL1:
  49               	.L28:
  39:main.c        **** 		LineData(lineData);
  50               		.loc 1 39 0
  51 0016 1A82      		std Y+2,__zero_reg__	 ;  23	*movhi/4	[length = 2]
  52 0018 1982      		std Y+1,__zero_reg__
  53 001a 1C82      		std Y+4,__zero_reg__	 ;  24	*movhi/4	[length = 2]
  54 001c 1B82      		std Y+3,__zero_reg__
  40:main.c        **** 		
  55               		.loc 1 40 0
  56 001e CE01      		movw r24,r28	 ;  425	*movhi/1	[length = 1]
  57 0020 0196      		adiw r24,1	 ;  25	*addhi3/3	[length = 1]
  58 0022 00D0      		rcall LineData	 ;  26	call_insn/2	[length = 1]
  59               	.LVL2:
  42:main.c        ****         switches &= 0b00111111;
  60               		.loc 1 42 0
  61 0024 00D0      		rcall PollSwitch	 ;  27	call_value_insn/2	[length = 1]
  62               	.LVL3:
  63 0026 282F      		mov r18,r24	 ;  28	movqi_insn/1	[length = 1]
  64               	.LVL4:
  65               		.loc 1 45 0
  66 0028 8981      		ldd r24,Y+1	 ;  31	*movhi/3	[length = 2]
  67 002a 9A81      		ldd r25,Y+2
  68 002c CC96      		adiw r24,60	 ;  32	addhi3_clobber/1	[length = 1]
  69 002e B401      		movw r22,r8	 ;  414	*movhi/1	[length = 1]
  70 0030 00D0      		rcall __divmodhi4	 ;  415	*divmodhi4_call	[length = 1]
  71 0032 6B01      		movw r12,r22	 ;  416	*movhi/1	[length = 1]
  72 0034 8B01      		movw r16,r22	 ;  35	*movhi/1	[length = 1]
  73               	.LVL5:
  46:main.c        **** 		right = ((int)lineData[RIGHT]	)  / 6;
  74               		.loc 1 46 0
  75 0036 8B81      		ldd r24,Y+3	 ;  37	*movhi/3	[length = 2]
  76 0038 9C81      		ldd r25,Y+4
  77 003a B401      		movw r22,r8	 ;  419	*movhi/1	[length = 1]
  78 003c 00D0      		rcall __divmodhi4	 ;  420	*divmodhi4_call	[length = 1]
  79 003e 5B01      		movw r10,r22	 ;  421	*movhi/1	[length = 1]
  80 0040 7B01      		movw r14,r22	 ;  40	*movhi/1	[length = 1]
  81               	.LVL6:
  47:main.c        **** 		
  48:main.c        **** 		a_pressed = ( switches & SWITCH(1) );
  82               		.loc 1 48 0
  83 0042 822F      		mov r24,r18	 ;  426	movqi_insn/1	[length = 1]
  84 0044 8270      		andi r24,lo8(2)	 ;  42	andqi3/2	[length = 1]
  85 0046 382E      		mov r3,r24	 ;  427	movqi_insn/1	[length = 1]
  86               	.LVL7:
  49:main.c        **** 		b_pressed = ( switches & SWITCH(4) );
  87               		.loc 1 49 0
  88 0048 822F      		mov r24,r18	 ;  428	movqi_insn/1	[length = 1]
  89 004a 8071      		andi r24,lo8(16)	 ;  44	andqi3/2	[length = 1]
  90 004c 282E      		mov r2,r24	 ;  429	movqi_insn/1	[length = 1]
  91               	.LVL8:
  50:main.c        **** 		c_pressed = ( switches & SWITCH(0) );
  92               		.loc 1 50 0
  93 004e 822F      		mov r24,r18	 ;  430	movqi_insn/1	[length = 1]
  94 0050 8170      		andi r24,lo8(1)	 ;  46	andqi3/2	[length = 1]
  95 0052 582E      		mov r5,r24	 ;  431	movqi_insn/1	[length = 1]
  96               	.LVL9:
  51:main.c        **** 		d_pressed = ( switches & SWITCH(3) );
  97               		.loc 1 51 0
  98 0054 822F      		mov r24,r18	 ;  432	movqi_insn/1	[length = 1]
  99 0056 8870      		andi r24,lo8(8)	 ;  48	andqi3/2	[length = 1]
 100 0058 482E      		mov r4,r24	 ;  433	movqi_insn/1	[length = 1]
 101               	.LVL10:
  52:main.c        **** 		e_pressed = ( switches & SWITCH(2) );
 102               		.loc 1 52 0
 103 005a 822F      		mov r24,r18	 ;  434	movqi_insn/1	[length = 1]
 104 005c 8470      		andi r24,lo8(4)	 ;  50	andqi3/2	[length = 1]
 105 005e 8D83      		std Y+5,r24	 ;  435	movqi_insn/3	[length = 1]
 106               	.LVL11:
  53:main.c        **** 		f_pressed = ( switches & SWITCH(5) );
 107               		.loc 1 53 0
 108 0060 2072      		andi r18,lo8(32)	 ;  52	andqi3/2	[length = 1]
 109               	.LVL12:
 110 0062 2E83      		std Y+6,r18	 ;  436	movqi_insn/3	[length = 1]
 111               	.LVL13:
  54:main.c        **** 		
  55:main.c        **** 		//fahren
  56:main.c        **** 		
  57:main.c        **** 		MotorDir(FWD,FWD);
 112               		.loc 1 57 0
 113 0064 60E2      		ldi r22,lo8(32)	 ;  54	movqi_insn/2	[length = 1]
 114 0066 80E2      		ldi r24,lo8(32)	 ;  55	movqi_insn/2	[length = 1]
 115               	.LVL14:
 116 0068 00D0      		rcall MotorDir	 ;  56	call_insn/2	[length = 1]
 117               	.LVL15:
  58:main.c        **** 		MotorSpeed(right,left);
 118               		.loc 1 58 0
 119 006a 6C2D      		mov r22,r12	 ;  57	movqi_insn/1	[length = 1]
 120 006c 8A2D      		mov r24,r10	 ;  58	movqi_insn/1	[length = 1]
 121 006e 00D0      		rcall MotorSpeed	 ;  59	call_insn/2	[length = 1]
 122               	.LVL16:
 123 0070 48E7      		ldi r20,lo8(120)	 ;  454	*reload_inhi	[length = 3]
 124 0072 642E      		mov r6,r20
 125 0074 712C      		mov r7,__zero_reg__
 126               	.LVL17:
 127               	.L3:
 128               	.LBB18:
 129               	.LBB19:
 130               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 131               		.loc 2 346 0
 132 0076 84E2      		ldi r24,lo8(36)	 ;  64	movqi_insn/2	[length = 1]
 133 0078 00D0      		rcall sleep	 ;  65	call_insn/2	[length = 1]
 134               	.LVL18:
 135 007a 21E0      		ldi r18,1	 ;  69	addhi3_clobber/3	[length = 3]
 136 007c 621A      		sub r6,r18
 137 007e 7108      		sbc r7,__zero_reg__
 138               	.LVL19:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 139               		.loc 2 345 0
 140 0080 6114      		cp r6,__zero_reg__	 ;  70	*cmphi/2	[length = 2]
 141 0082 7104      		cpc r7,__zero_reg__
 142 0084 01F4      		brne .L3	 ;  71	branch	[length = 1]
 143               	.LBE19:
 144               	.LBE18:
  59:main.c        **** 		msleep(120);
  60:main.c        **** 		
  61:main.c        **** 		if (left>255){
 145               		.loc 1 61 0
 146 0086 8FEF      		ldi r24,-1	 ;  80	*cmphi/7	[length = 3]
 147 0088 C816      		cp r12,r24
 148 008a D104      		cpc r13,__zero_reg__
 149 008c 01F0      		breq .+2	 ;  81	difficult_branch	[length = 2]
 150 008e 04F4      		brge .L29
  62:main.c        **** 			left=254;
  63:main.c        **** 			}
  64:main.c        **** 		else if(left<100){
 151               		.loc 1 64 0
 152 0090 24E6      		ldi r18,100	 ;  83	*cmphi/7	[length = 3]
 153 0092 C216      		cp r12,r18
 154 0094 D104      		cpc r13,__zero_reg__
 155 0096 04F4      		brge .L4	 ;  84	branch	[length = 1]
  65:main.c        **** 			left=0;
 156               		.loc 1 65 0
 157 0098 00E0      		ldi r16,0	 ;  5	*movhi/2	[length = 2]
 158 009a 10E0      		ldi r17,0
 159 009c 00C0      		rjmp .L4	 ;  458	jump	[length = 1]
 160               	.L29:
  62:main.c        **** 			left=254;
 161               		.loc 1 62 0
 162 009e 0EEF      		ldi r16,lo8(-2)	 ;  384	*movhi/5	[length = 2]
 163 00a0 10E0      		ldi r17,0
 164               	.L4:
 165               	.LVL20:
  66:main.c        **** 			}	
  67:main.c        **** 			
  68:main.c        **** 		if (right>255){
 166               		.loc 1 68 0
 167 00a2 8FEF      		ldi r24,-1	 ;  89	*cmphi/7	[length = 3]
 168 00a4 A816      		cp r10,r24
 169 00a6 B104      		cpc r11,__zero_reg__
 170 00a8 01F0      		breq .+2	 ;  90	difficult_branch	[length = 2]
 171 00aa 04F4      		brge .L31
  69:main.c        **** 			right=254;
  70:main.c        **** 			}
  71:main.c        **** 		else if(right<100){
 172               		.loc 1 71 0
 173 00ac 24E6      		ldi r18,100	 ;  92	*cmphi/7	[length = 3]
 174 00ae A216      		cp r10,r18
 175 00b0 B104      		cpc r11,__zero_reg__
 176 00b2 04F4      		brge .L5	 ;  93	branch	[length = 1]
  72:main.c        **** 			right=0;
 177               		.loc 1 72 0
 178 00b4 E12C      		mov r14,__zero_reg__	 ;  7	*movhi/2	[length = 2]
 179 00b6 F12C      		mov r15,__zero_reg__
 180 00b8 00C0      		rjmp .L5	 ;  460	jump	[length = 1]
 181               	.L31:
  69:main.c        **** 			right=254;
 182               		.loc 1 69 0
 183 00ba 3EEF      		ldi r19,lo8(-2)	 ;  453	*reload_inhi	[length = 3]
 184 00bc E32E      		mov r14,r19
 185 00be F12C      		mov r15,__zero_reg__
 186               	.L5:
 187               	.LVL21:
  73:main.c        **** 			}	
  74:main.c        **** 					
  75:main.c        **** 					
  76:main.c        **** 		//LED Steuerung
  77:main.c        **** 		
  78:main.c        **** 		if(left > right){
 188               		.loc 1 78 0
 189 00c0 E016      		cp r14,r16	 ;  98	*cmphi/3	[length = 2]
 190 00c2 F106      		cpc r15,r17
 191 00c4 04F4      		brge .L6	 ;  99	branch	[length = 1]
  79:main.c        **** 			BackLED(OFF,ON);
 192               		.loc 1 79 0
 193 00c6 61E0      		ldi r22,lo8(1)	 ;  101	movqi_insn/2	[length = 1]
 194 00c8 80E0      		ldi r24,0	 ;  102	movqi_insn/1	[length = 1]
 195 00ca 00D0      		rcall BackLED	 ;  103	call_insn/2	[length = 1]
 196               	.LVL22:
 197               	.L6:
  80:main.c        **** 		}
  81:main.c        **** 		if(right > left){
 198               		.loc 1 81 0
 199 00cc 0E15      		cp r16,r14	 ;  106	*cmphi/3	[length = 2]
 200 00ce 1F05      		cpc r17,r15
 201 00d0 04F4      		brge .L7	 ;  107	branch	[length = 1]
  82:main.c        **** 			BackLED(ON,OFF);
 202               		.loc 1 82 0
 203 00d2 60E0      		ldi r22,0	 ;  109	movqi_insn/1	[length = 1]
 204 00d4 81E0      		ldi r24,lo8(1)	 ;  110	movqi_insn/2	[length = 1]
 205 00d6 00D0      		rcall BackLED	 ;  111	call_insn/2	[length = 1]
 206               	.LVL23:
 207               	.L7:
  83:main.c        **** 		}
  84:main.c        **** 		if(right == left){
 208               		.loc 1 84 0
 209 00d8 E016      		cp r14,r16	 ;  114	*cmphi/3	[length = 2]
 210 00da F106      		cpc r15,r17
 211 00dc 01F4      		brne .L8	 ;  115	branch	[length = 1]
  85:main.c        **** 			BackLED(ON,ON);
 212               		.loc 1 85 0
 213 00de 61E0      		ldi r22,lo8(1)	 ;  117	movqi_insn/2	[length = 1]
 214 00e0 81E0      		ldi r24,lo8(1)	 ;  118	movqi_insn/2	[length = 1]
 215 00e2 00D0      		rcall BackLED	 ;  119	call_insn/2	[length = 1]
 216               	.LVL24:
 217               	.L8:
  86:main.c        **** 		}
  87:main.c        **** 		if(right && left < 80){
 218               		.loc 1 87 0
 219 00e4 E114      		cp r14,__zero_reg__	 ;  122	*cmphi/2	[length = 2]
 220 00e6 F104      		cpc r15,__zero_reg__
 221 00e8 01F0      		breq .L10	 ;  123	branch	[length = 1]
 222               		.loc 1 87 0 is_stmt 0 discriminator 1
 223 00ea 0035      		cpi r16,80	 ;  129	*cmphi/6	[length = 2]
 224 00ec 1105      		cpc r17,__zero_reg__
 225 00ee 04F4      		brge .L11	 ;  130	branch	[length = 1]
  88:main.c        **** 			StatusLED(RED);
 226               		.loc 1 88 0 is_stmt 1
 227 00f0 82E0      		ldi r24,lo8(2)	 ;  132	movqi_insn/2	[length = 1]
 228 00f2 00D0      		rcall StatusLED	 ;  133	call_insn/2	[length = 1]
 229               	.LVL25:
 230               	.L11:
  89:main.c        **** 		}
  90:main.c        **** 		if(80 < right && left < 100){
 231               		.loc 1 90 0
 232 00f4 81E5      		ldi r24,81	 ;  136	*cmphi/7	[length = 3]
 233 00f6 E816      		cp r14,r24
 234 00f8 F104      		cpc r15,__zero_reg__
 235 00fa 04F0      		brlt .L12	 ;  137	branch	[length = 1]
 236               		.loc 1 90 0 is_stmt 0 discriminator 1
 237 00fc 0436      		cpi r16,100	 ;  139	*cmphi/6	[length = 2]
 238 00fe 1105      		cpc r17,__zero_reg__
 239 0100 04F4      		brge .L12	 ;  140	branch	[length = 1]
  91:main.c        **** 			StatusLED(YELLOW);
 240               		.loc 1 91 0 is_stmt 1
 241 0102 83E0      		ldi r24,lo8(3)	 ;  142	movqi_insn/2	[length = 1]
 242 0104 00D0      		rcall StatusLED	 ;  143	call_insn/2	[length = 1]
 243               	.LVL26:
 244               	.L12:
  92:main.c        **** 		}
  93:main.c        **** 		if(right && left > 100){
 245               		.loc 1 93 0 discriminator 1
 246 0106 0536      		cpi r16,101	 ;  149	*cmphi/6	[length = 2]
 247 0108 1105      		cpc r17,__zero_reg__
 248 010a 04F0      		brlt .L10	 ;  150	branch	[length = 1]
  94:main.c        **** 			StatusLED(GREEN);
 249               		.loc 1 94 0
 250 010c 81E0      		ldi r24,lo8(1)	 ;  152	movqi_insn/2	[length = 1]
 251 010e 00D0      		rcall StatusLED	 ;  153	call_insn/2	[length = 1]
 252               	.LVL27:
 253               	.L10:
  95:main.c        **** 		}
  96:main.c        **** 		
  97:main.c        **** 		//Rückfahrt
  98:main.c        **** 		
  99:main.c        **** 		if (a_pressed | b_pressed > 0) {
 254               		.loc 1 99 0
 255 0110 81E0      		ldi r24,lo8(1)	 ;  386	*movhi/5	[length = 2]
 256 0112 90E0      		ldi r25,0
 257 0114 2110      		cpse r2,__zero_reg__	 ;  157	enable_interrupt-3	[length = 1]
 258 0116 00C0      		rjmp .L16
 259 0118 80E0      		ldi r24,0	 ;  159	*movhi/2	[length = 2]
 260 011a 90E0      		ldi r25,0
 261               	.L16:
 262 011c 8329      		or r24,r3	 ;  441	iorqi3/1	[length = 1]
 263 011e 892B      		or r24,r25	 ;  163	*cmphi/1	[length = 1]
 264 0120 01F0      		breq .L15	 ;  164	branch	[length = 1]
 100:main.c        **** 			BackLED(OFF,ON);
 265               		.loc 1 100 0
 266 0122 61E0      		ldi r22,lo8(1)	 ;  166	movqi_insn/2	[length = 1]
 267 0124 80E0      		ldi r24,0	 ;  167	movqi_insn/1	[length = 1]
 268 0126 00D0      		rcall BackLED	 ;  168	call_insn/2	[length = 1]
 269               	.LVL28:
 270               	.LBB20:
 271               	.LBB21:
 272               		.loc 2 346 0
 273 0128 84E2      		ldi r24,lo8(36)	 ;  171	movqi_insn/2	[length = 1]
 274 012a 00D0      		rcall sleep	 ;  172	call_insn/2	[length = 1]
 275               	.LVL29:
 276               	.LBE21:
 277               	.LBE20:
 101:main.c        **** 			msleep(1);
 102:main.c        **** 			BackLED(ON,OFF);
 278               		.loc 1 102 0
 279 012c 60E0      		ldi r22,0	 ;  175	movqi_insn/1	[length = 1]
 280 012e 81E0      		ldi r24,lo8(1)	 ;  176	movqi_insn/2	[length = 1]
 281 0130 00D0      		rcall BackLED	 ;  177	call_insn/2	[length = 1]
 282               	.LVL30:
 103:main.c        **** 			MotorDir(RWD,RWD);
 283               		.loc 1 103 0
 284 0132 60E1      		ldi r22,lo8(16)	 ;  178	movqi_insn/2	[length = 1]
 285 0134 80E1      		ldi r24,lo8(16)	 ;  179	movqi_insn/2	[length = 1]
 286 0136 00D0      		rcall MotorDir	 ;  180	call_insn/2	[length = 1]
 287               	.LVL31:
 104:main.c        **** 			MotorSpeed(120,120);
 288               		.loc 1 104 0
 289 0138 68E7      		ldi r22,lo8(120)	 ;  181	movqi_insn/2	[length = 1]
 290 013a 88E7      		ldi r24,lo8(120)	 ;  182	movqi_insn/2	[length = 1]
 291 013c 00D0      		rcall MotorSpeed	 ;  183	call_insn/2	[length = 1]
 292               	.LVL32:
 293 013e 28E5      		ldi r18,lo8(88)	 ;  452	*reload_inhi	[length = 4]
 294 0140 C22E      		mov r12,r18
 295 0142 22E0      		ldi r18,lo8(2)
 296 0144 D22E      		mov r13,r18
 297               	.LVL33:
 298               	.L18:
 299               	.LBB22:
 300               	.LBB23:
 301               		.loc 2 346 0
 302 0146 84E2      		ldi r24,lo8(36)	 ;  188	movqi_insn/2	[length = 1]
 303 0148 00D0      		rcall sleep	 ;  189	call_insn/2	[length = 1]
 304               	.LVL34:
 305 014a 21E0      		ldi r18,1	 ;  193	addhi3_clobber/3	[length = 3]
 306 014c C21A      		sub r12,r18
 307 014e D108      		sbc r13,__zero_reg__
 308               	.LVL35:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 309               		.loc 2 345 0
 310 0150 C114      		cp r12,__zero_reg__	 ;  194	*cmphi/2	[length = 2]
 311 0152 D104      		cpc r13,__zero_reg__
 312 0154 01F4      		brne .L18	 ;  195	branch	[length = 1]
 313               	.LBE23:
 314               	.LBE22:
 105:main.c        **** 			msleep(600);
 106:main.c        **** 			MotorDir(BREAK,BREAK);
 315               		.loc 1 106 0
 316 0156 60E0      		ldi r22,0	 ;  204	movqi_insn/1	[length = 1]
 317 0158 80E0      		ldi r24,0	 ;  205	movqi_insn/1	[length = 1]
 318 015a 00D0      		rcall MotorDir	 ;  206	call_insn/2	[length = 1]
 319               	.LVL36:
 320               	.L15:
 107:main.c        **** 			}
 108:main.c        **** 		
 109:main.c        **** 		if (c_pressed | d_pressed > 0) {
 321               		.loc 1 109 0
 322 015c 81E0      		ldi r24,lo8(1)	 ;  388	*movhi/5	[length = 2]
 323 015e 90E0      		ldi r25,0
 324 0160 4110      		cpse r4,__zero_reg__	 ;  210	enable_interrupt-3	[length = 1]
 325 0162 00C0      		rjmp .L20
 326 0164 80E0      		ldi r24,0	 ;  212	*movhi/2	[length = 2]
 327 0166 90E0      		ldi r25,0
 328               	.L20:
 329 0168 8529      		or r24,r5	 ;  440	iorqi3/1	[length = 1]
 330 016a 892B      		or r24,r25	 ;  216	*cmphi/1	[length = 1]
 331 016c 01F0      		breq .L19	 ;  217	branch	[length = 1]
 110:main.c        **** 			BackLED(OFF,ON);
 332               		.loc 1 110 0
 333 016e 61E0      		ldi r22,lo8(1)	 ;  219	movqi_insn/2	[length = 1]
 334 0170 80E0      		ldi r24,0	 ;  220	movqi_insn/1	[length = 1]
 335 0172 00D0      		rcall BackLED	 ;  221	call_insn/2	[length = 1]
 336               	.LVL37:
 337               	.LBB24:
 338               	.LBB25:
 339               		.loc 2 346 0
 340 0174 84E2      		ldi r24,lo8(36)	 ;  224	movqi_insn/2	[length = 1]
 341 0176 00D0      		rcall sleep	 ;  225	call_insn/2	[length = 1]
 342               	.LVL38:
 343               	.LBE25:
 344               	.LBE24:
 111:main.c        **** 			msleep(1);
 112:main.c        **** 			BackLED(ON,OFF);
 345               		.loc 1 112 0
 346 0178 60E0      		ldi r22,0	 ;  228	movqi_insn/1	[length = 1]
 347 017a 81E0      		ldi r24,lo8(1)	 ;  229	movqi_insn/2	[length = 1]
 348 017c 00D0      		rcall BackLED	 ;  230	call_insn/2	[length = 1]
 349               	.LVL39:
 113:main.c        **** 			MotorDir(RWD,RWD);
 350               		.loc 1 113 0
 351 017e 60E1      		ldi r22,lo8(16)	 ;  231	movqi_insn/2	[length = 1]
 352 0180 80E1      		ldi r24,lo8(16)	 ;  232	movqi_insn/2	[length = 1]
 353 0182 00D0      		rcall MotorDir	 ;  233	call_insn/2	[length = 1]
 354               	.LVL40:
 114:main.c        **** 			MotorSpeed(120,60);
 355               		.loc 1 114 0
 356 0184 6CE3      		ldi r22,lo8(60)	 ;  234	movqi_insn/2	[length = 1]
 357 0186 88E7      		ldi r24,lo8(120)	 ;  235	movqi_insn/2	[length = 1]
 358 0188 00D0      		rcall MotorSpeed	 ;  236	call_insn/2	[length = 1]
 359               	.LVL41:
 360 018a 98E5      		ldi r25,lo8(88)	 ;  451	*reload_inhi	[length = 4]
 361 018c C92E      		mov r12,r25
 362 018e 92E0      		ldi r25,lo8(2)
 363 0190 D92E      		mov r13,r25
 364               	.LVL42:
 365               	.L22:
 366               	.LBB26:
 367               	.LBB27:
 368               		.loc 2 346 0
 369 0192 84E2      		ldi r24,lo8(36)	 ;  241	movqi_insn/2	[length = 1]
 370 0194 00D0      		rcall sleep	 ;  242	call_insn/2	[length = 1]
 371               	.LVL43:
 372 0196 81E0      		ldi r24,1	 ;  246	addhi3_clobber/3	[length = 3]
 373 0198 C81A      		sub r12,r24
 374 019a D108      		sbc r13,__zero_reg__
 375               	.LVL44:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 376               		.loc 2 345 0
 377 019c C114      		cp r12,__zero_reg__	 ;  247	*cmphi/2	[length = 2]
 378 019e D104      		cpc r13,__zero_reg__
 379 01a0 01F4      		brne .L22	 ;  248	branch	[length = 1]
 380               	.LBE27:
 381               	.LBE26:
 115:main.c        **** 			msleep(600);
 116:main.c        **** 			MotorDir(BREAK,BREAK);
 382               		.loc 1 116 0
 383 01a2 60E0      		ldi r22,0	 ;  257	movqi_insn/1	[length = 1]
 384 01a4 80E0      		ldi r24,0	 ;  258	movqi_insn/1	[length = 1]
 385 01a6 00D0      		rcall MotorDir	 ;  259	call_insn/2	[length = 1]
 386               	.LVL45:
 387               	.L19:
 117:main.c        **** 			}
 118:main.c        **** 		
 119:main.c        **** 		if (e_pressed | f_pressed > 0) {
 388               		.loc 1 119 0
 389 01a8 81E0      		ldi r24,lo8(1)	 ;  390	*movhi/5	[length = 2]
 390 01aa 90E0      		ldi r25,0
 391 01ac 2E81      		ldd r18,Y+6	 ;  437	movqi_insn/4	[length = 1]
 392 01ae 2111      		cpse r18,__zero_reg__	 ;  263	enable_interrupt-3	[length = 1]
 393 01b0 00C0      		rjmp .L24
 394 01b2 80E0      		ldi r24,0	 ;  265	*movhi/2	[length = 2]
 395 01b4 90E0      		ldi r25,0
 396               	.L24:
 397 01b6 2D81      		ldd r18,Y+5	 ;  438	movqi_insn/4	[length = 1]
 398 01b8 822B      		or r24,r18	 ;  439	iorqi3/1	[length = 1]
 399 01ba 892B      		or r24,r25	 ;  269	*cmphi/1	[length = 1]
 400 01bc 01F0      		breq .L23	 ;  270	branch	[length = 1]
 120:main.c        **** 			BackLED(OFF,ON);
 401               		.loc 1 120 0
 402 01be 61E0      		ldi r22,lo8(1)	 ;  272	movqi_insn/2	[length = 1]
 403 01c0 80E0      		ldi r24,0	 ;  273	movqi_insn/1	[length = 1]
 404 01c2 00D0      		rcall BackLED	 ;  274	call_insn/2	[length = 1]
 405               	.LVL46:
 406               	.LBB28:
 407               	.LBB29:
 408               		.loc 2 346 0
 409 01c4 84E2      		ldi r24,lo8(36)	 ;  277	movqi_insn/2	[length = 1]
 410 01c6 00D0      		rcall sleep	 ;  278	call_insn/2	[length = 1]
 411               	.LVL47:
 412               	.LBE29:
 413               	.LBE28:
 121:main.c        **** 			msleep(1);
 122:main.c        **** 			BackLED(ON,OFF);
 414               		.loc 1 122 0
 415 01c8 60E0      		ldi r22,0	 ;  281	movqi_insn/1	[length = 1]
 416 01ca 81E0      		ldi r24,lo8(1)	 ;  282	movqi_insn/2	[length = 1]
 417 01cc 00D0      		rcall BackLED	 ;  283	call_insn/2	[length = 1]
 418               	.LVL48:
 123:main.c        **** 			MotorDir(RWD,RWD);
 419               		.loc 1 123 0
 420 01ce 60E1      		ldi r22,lo8(16)	 ;  284	movqi_insn/2	[length = 1]
 421 01d0 80E1      		ldi r24,lo8(16)	 ;  285	movqi_insn/2	[length = 1]
 422 01d2 00D0      		rcall MotorDir	 ;  286	call_insn/2	[length = 1]
 423               	.LVL49:
 124:main.c        **** 			MotorSpeed(60,120);
 424               		.loc 1 124 0
 425 01d4 68E7      		ldi r22,lo8(120)	 ;  287	movqi_insn/2	[length = 1]
 426 01d6 8CE3      		ldi r24,lo8(60)	 ;  288	movqi_insn/2	[length = 1]
 427 01d8 00D0      		rcall MotorSpeed	 ;  289	call_insn/2	[length = 1]
 428               	.LVL50:
 429 01da 88E5      		ldi r24,lo8(88)	 ;  450	*reload_inhi	[length = 4]
 430 01dc C82E      		mov r12,r24
 431 01de 82E0      		ldi r24,lo8(2)
 432 01e0 D82E      		mov r13,r24
 433               	.LVL51:
 434               	.L26:
 435               	.LBB30:
 436               	.LBB31:
 437               		.loc 2 346 0
 438 01e2 84E2      		ldi r24,lo8(36)	 ;  294	movqi_insn/2	[length = 1]
 439 01e4 00D0      		rcall sleep	 ;  295	call_insn/2	[length = 1]
 440               	.LVL52:
 441 01e6 81E0      		ldi r24,1	 ;  299	addhi3_clobber/3	[length = 3]
 442 01e8 C81A      		sub r12,r24
 443 01ea D108      		sbc r13,__zero_reg__
 444               	.LVL53:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 445               		.loc 2 345 0
 446 01ec C114      		cp r12,__zero_reg__	 ;  300	*cmphi/2	[length = 2]
 447 01ee D104      		cpc r13,__zero_reg__
 448 01f0 01F4      		brne .L26	 ;  301	branch	[length = 1]
 449               	.LBE31:
 450               	.LBE30:
 125:main.c        **** 			msleep(600);
 126:main.c        **** 			MotorDir(BREAK,BREAK);
 451               		.loc 1 126 0
 452 01f2 60E0      		ldi r22,0	 ;  310	movqi_insn/1	[length = 1]
 453 01f4 80E0      		ldi r24,0	 ;  311	movqi_insn/1	[length = 1]
 454 01f6 00D0      		rcall MotorDir	 ;  312	call_insn/2	[length = 1]
 455               	.LVL54:
 456               	.L23:
 127:main.c        **** 			}
 128:main.c        **** 			
 129:main.c        **** 			
 130:main.c        **** 		//Lichtsuche
 131:main.c        **** 		
 132:main.c        **** 		if(left && right < 90){
 457               		.loc 1 132 0
 458 01f8 012B      		or r16,r17	 ;  315	*cmphi/2	[length = 1]
 459 01fa 01F4      		brne .+2	 ;  316	branch	[length = 2]
 460 01fc 00C0      		rjmp .L28
 461               		.loc 1 132 0 is_stmt 0 discriminator 1
 462 01fe 2AE5      		ldi r18,90	 ;  318	*cmphi/7	[length = 3]
 463 0200 E216      		cp r14,r18
 464 0202 F104      		cpc r15,__zero_reg__
 465 0204 04F0      		brlt .+2	 ;  319	branch	[length = 2]
 466 0206 00C0      		rjmp .L28
 133:main.c        **** 			MotorDir(RWD,FWD);
 467               		.loc 1 133 0 is_stmt 1
 468 0208 60E2      		ldi r22,lo8(32)	 ;  321	movqi_insn/2	[length = 1]
 469 020a 80E1      		ldi r24,lo8(16)	 ;  322	movqi_insn/2	[length = 1]
 470 020c 00D0      		rcall MotorDir	 ;  323	call_insn/2	[length = 1]
 471               	.LVL55:
 134:main.c        **** 			MotorSpeed(120,120);
 472               		.loc 1 134 0
 473 020e 68E7      		ldi r22,lo8(120)	 ;  324	movqi_insn/2	[length = 1]
 474 0210 88E7      		ldi r24,lo8(120)	 ;  325	movqi_insn/2	[length = 1]
 475 0212 00D0      		rcall MotorSpeed	 ;  326	call_insn/2	[length = 1]
 476               	.LVL56:
 477               	.LBE17:
 135:main.c        **** 			}
 136:main.c        **** 					
 137:main.c        **** }	
 478               		.loc 1 137 0
 479 0214 00C0      		rjmp .L28	 ;  462	jump	[length = 1]
 480               		.cfi_endproc
 481               	.LFE2:
 483               		.text
 484               	.Letext0:
 485               		.file 3 "/usr/lib/avr/include/stdint.h"
 486               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 487               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 488               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 489               		.file 7 "../../libtinyasuro/inc/asuro/switches.h"
 490               		.file 8 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccNifif5.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccNifif5.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccNifif5.s:4      *ABS*:0000003f __SREG__
     /tmp/ccNifif5.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccNifif5.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccNifif5.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
LineData
PollSwitch
__divmodhi4
MotorDir
MotorSpeed
sleep
BackLED
StatusLED
