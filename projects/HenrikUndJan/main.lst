   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** 	
   2:main.c        **** // 	   			(K)iT lives!
   3:main.c        **** //*********************************************
   4:main.c        **** //*|x|**| |***| |****[___]****[_________]**|x|*
   5:main.c        **** //*|x|**| |***/ /*****| |*********| |******|x|*	 
   6:main.c        **** //*|x|**| |**/ /******| |*********| |******|x|*
   7:main.c        **** //*|x|**[     ]*******| |*********| |******|x|*
   8:main.c        **** //*|x|**| |**\ \******| |*********| |******|x|*
   9:main.c        **** //*|x|**| |***\ \*****| |*********| |******|x|*
  10:main.c        **** //*|x|**| |***| |****[___]*******[___]*****|x|*
  11:main.c        **** //*********************************************
  12:main.c        **** //
  13:main.c        **** #define SWITCH(X) 1<<X
  14:main.c        **** 
  15:main.c        **** 
  16:main.c        **** #include <asuro/asuro.h>
  17:main.c        **** 
  18:main.c        **** 
  19:main.c        **** 
  20:main.c        **** void main(void)		{
  16               		.loc 1 20 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  514	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  515	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__	 ;  516	*movhi/8	[length = 2]
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 6A97      		sbiw r28,26	 ;  517	*addhi3/3	[length = 1]
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 30
  33 000a 0FB6      		in __tmp_reg__,__SREG__	 ;  518	movhi_sp_r/3	[length = 5]
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 26 */
  40               	/* stack size = 28 */
  41               	.L__stack_usage = 28
  21:main.c        ****     Init();
  42               		.loc 1 21 0
  43 0014 00D0      		rcall Init	 ;  37	call_insn/2	[length = 1]
  44               	.LVL0:
  22:main.c        ****     
  23:main.c        ****     int pressed[]	= {0,0,0,0,0,0,0,0,0,0,0};
  45               		.loc 1 23 0
  46 0016 CE01      		movw r24,r28	 ;  505	*movhi/1	[length = 1]
  47 0018 0196      		adiw r24,1	 ;  431	*addhi3/3	[length = 1]
  48 001a 5C01      		movw r10,r24	 ;  506	*movhi/1	[length = 1]
  49 001c 86E1      		ldi r24,lo8(22)	 ;  502	movqi_insn/2	[length = 1]
  50 001e F501      		movw r30,r10	 ;  507	*movhi/1	[length = 1]
  51               		0:	 ;  40	*clrmemqi	[length = 3]
  52 0020 1192      		st Z+,__zero_reg__
  53 0022 8A95      		dec r24
  54 0024 01F4      		brne 0b
  55               	.LVL1:
  24:main.c        ****     int t			= 0;
  25:main.c        ****     int x			= 0;
  56               		.loc 1 25 0
  57 0026 E12C      		mov r14,__zero_reg__	 ;  22	*movhi/2	[length = 2]
  58 0028 F12C      		mov r15,__zero_reg__
  24:main.c        ****     int t			= 0;
  59               		.loc 1 24 0
  60 002a C12C      		mov r12,__zero_reg__	 ;  23	*movhi/2	[length = 2]
  61 002c D12C      		mov r13,__zero_reg__
  62               	.LBB19:
  26:main.c        ****     int left 		= 0;
  27:main.c        ****     int right 		= 0;
  28:main.c        **** 	char a_pressed	= 0;
  29:main.c        **** 	char b_pressed	= 0;
  30:main.c        **** 	char c_pressed	= 0;
  31:main.c        **** 	char d_pressed	= 0;
  32:main.c        **** 	char e_pressed	= 0;
  33:main.c        **** 	char f_pressed	= 0;
  34:main.c        ****     
  35:main.c        **** 	while(1){
  36:main.c        **** 		
  37:main.c        **** 		
  38:main.c        **** 		uint16_t lineData[] = {0,0};
  39:main.c        **** 		LineData(lineData);
  40:main.c        **** 		
  41:main.c        **** 		char switches = PollSwitch();
  42:main.c        ****         switches &= 0b00111111;
  43:main.c        **** 		
  44:main.c        **** 		left  = ((int)lineData[LEFT] +160)  / 7;
  63               		.loc 1 44 0
  64 002e 47E0      		ldi r20,lo8(7)	 ;  524	*reload_inhi	[length = 3]
  65 0030 842E      		mov r8,r20
  66 0032 912C      		mov r9,__zero_reg__
  67               	.LVL2:
  68               	.L31:
  38:main.c        **** 		LineData(lineData);
  69               		.loc 1 38 0
  70 0034 188E      		std Y+24,__zero_reg__	 ;  455	*movhi/4	[length = 2]
  71 0036 1F8A      		std Y+23,__zero_reg__
  72 0038 1A8E      		std Y+26,__zero_reg__	 ;  456	*movhi/4	[length = 2]
  73 003a 198E      		std Y+25,__zero_reg__
  39:main.c        **** 		
  74               		.loc 1 39 0
  75 003c CE01      		movw r24,r28	 ;  508	*movhi/1	[length = 1]
  76 003e 4796      		adiw r24,23	 ;  57	*addhi3/3	[length = 1]
  77 0040 00D0      		rcall LineData	 ;  58	call_insn/2	[length = 1]
  78               	.LVL3:
  41:main.c        ****         switches &= 0b00111111;
  79               		.loc 1 41 0
  80 0042 00D0      		rcall PollSwitch	 ;  59	call_value_insn/2	[length = 1]
  81               	.LVL4:
  82 0044 582E      		mov r5,r24	 ;  60	movqi_insn/1	[length = 1]
  83               	.LVL5:
  84               		.loc 1 44 0
  85 0046 8F89      		ldd r24,Y+23	 ;  63	*movhi/3	[length = 2]
  86 0048 988D      		ldd r25,Y+24
  87 004a 8056      		subi r24,96	 ;  64	addhi3_clobber/2	[length = 2]
  88 004c 9F4F      		sbci r25,-1
  89 004e B401      		movw r22,r8	 ;  493	*movhi/1	[length = 1]
  90 0050 00D0      		rcall __divmodhi4	 ;  494	*divmodhi4_call	[length = 1]
  91 0052 8B01      		movw r16,r22	 ;  495	*movhi/1	[length = 1]
  92               	.LVL6:
  45:main.c        **** 		right = ((int)lineData[RIGHT]+100)  / 7;
  93               		.loc 1 45 0
  94 0054 898D      		ldd r24,Y+25	 ;  69	*movhi/3	[length = 2]
  95 0056 9A8D      		ldd r25,Y+26
  96 0058 8C59      		subi r24,-100	 ;  70	addhi3_clobber/2	[length = 2]
  97 005a 9F4F      		sbci r25,-1
  98 005c B401      		movw r22,r8	 ;  498	*movhi/1	[length = 1]
  99 005e 00D0      		rcall __divmodhi4	 ;  499	*divmodhi4_call	[length = 1]
 100 0060 1B01      		movw r2,r22	 ;  500	*movhi/1	[length = 1]
 101 0062 3B01      		movw r6,r22	 ;  73	*movhi/1	[length = 1]
 102               	.LVL7:
  46:main.c        **** 		
  47:main.c        **** 		a_pressed = ( switches & SWITCH(1) );
  48:main.c        **** 		b_pressed = ( switches & SWITCH(4) );
  49:main.c        **** 		c_pressed = ( switches & SWITCH(0) );
  50:main.c        **** 		d_pressed = ( switches & SWITCH(3) );
  51:main.c        **** 		e_pressed = ( switches & SWITCH(2) );
  52:main.c        **** 		f_pressed = ( switches & SWITCH(5) );
  53:main.c        **** 		
  54:main.c        **** 		//fahren
  55:main.c        **** 		
  56:main.c        **** 		if (left>200 ){
 103               		.loc 1 56 0
 104 0064 093C      		cpi r16,-55	 ;  81	*cmphi/6	[length = 2]
 105 0066 1105      		cpc r17,__zero_reg__
 106 0068 04F4      		brge .L32	 ;  82	branch	[length = 1]
  57:main.c        **** 			left=200;
  58:main.c        **** 		}
  59:main.c        **** 		else if(left<100){
 107               		.loc 1 59 0
 108 006a 0436      		cpi r16,100	 ;  84	*cmphi/6	[length = 2]
 109 006c 1105      		cpc r17,__zero_reg__
 110 006e 04F4      		brge .L2	 ;  85	branch	[length = 1]
 111               	.LVL8:
  60:main.c        **** 			left=0;
  61:main.c        **** 			StatusLED(RED);
 112               		.loc 1 61 0
 113 0070 82E0      		ldi r24,lo8(2)	 ;  88	movqi_insn/2	[length = 1]
 114 0072 00D0      		rcall StatusLED	 ;  89	call_insn/2	[length = 1]
 115               	.LVL9:
  60:main.c        **** 			left=0;
 116               		.loc 1 60 0
 117 0074 00E0      		ldi r16,0	 ;  460	*movhi/2	[length = 2]
 118 0076 10E0      		ldi r17,0
 119 0078 00C0      		rjmp .L2	 ;  527	jump	[length = 1]
 120               	.LVL10:
 121               	.L32:
  57:main.c        **** 			left=200;
 122               		.loc 1 57 0
 123 007a 08EC      		ldi r16,lo8(-56)	 ;  459	*movhi/5	[length = 2]
 124 007c 10E0      		ldi r17,0
 125               	.LVL11:
 126               	.L2:
  62:main.c        **** 		}
  63:main.c        **** 				
  64:main.c        **** 		if (right>200){
 127               		.loc 1 64 0
 128 007e F9EC      		ldi r31,-55	 ;  93	*cmphi/7	[length = 3]
 129 0080 2F16      		cp r2,r31
 130 0082 3104      		cpc r3,__zero_reg__
 131 0084 04F4      		brge .L33	 ;  94	branch	[length = 1]
  65:main.c        **** 			(right=200);
  66:main.c        **** 		}
  67:main.c        **** 		
  68:main.c        **** 		else if(right<100){
 132               		.loc 1 68 0
 133 0086 24E6      		ldi r18,100	 ;  96	*cmphi/7	[length = 3]
 134 0088 2216      		cp r2,r18
 135 008a 3104      		cpc r3,__zero_reg__
 136 008c 04F4      		brge .L3	 ;  97	branch	[length = 1]
 137               	.LVL12:
  69:main.c        **** 			right=0;
  70:main.c        **** 			StatusLED(RED);
 138               		.loc 1 70 0
 139 008e 82E0      		ldi r24,lo8(2)	 ;  100	movqi_insn/2	[length = 1]
 140 0090 00D0      		rcall StatusLED	 ;  101	call_insn/2	[length = 1]
 141               	.LVL13:
  69:main.c        **** 			right=0;
 142               		.loc 1 69 0
 143 0092 612C      		mov r6,__zero_reg__	 ;  462	*movhi/2	[length = 2]
 144 0094 712C      		mov r7,__zero_reg__
 145 0096 00C0      		rjmp .L3	 ;  529	jump	[length = 1]
 146               	.LVL14:
 147               	.L33:
  65:main.c        **** 			(right=200);
 148               		.loc 1 65 0
 149 0098 38EC      		ldi r19,lo8(-56)	 ;  523	*reload_inhi	[length = 3]
 150 009a 632E      		mov r6,r19
 151 009c 712C      		mov r7,__zero_reg__
 152               	.LVL15:
 153               	.L3:
  71:main.c        **** 		}
  72:main.c        **** 			
  73:main.c        **** 		MotorDir(FWD,FWD);
 154               		.loc 1 73 0
 155 009e 60E2      		ldi r22,lo8(32)	 ;  105	movqi_insn/2	[length = 1]
 156 00a0 80E2      		ldi r24,lo8(32)	 ;  106	movqi_insn/2	[length = 1]
 157 00a2 00D0      		rcall MotorDir	 ;  107	call_insn/2	[length = 1]
 158               	.LVL16:
  74:main.c        **** 		MotorSpeed(right,left);
 159               		.loc 1 74 0
 160 00a4 602F      		mov r22,r16	 ;  108	movqi_insn/1	[length = 1]
 161 00a6 862D      		mov r24,r6	 ;  109	movqi_insn/1	[length = 1]
 162 00a8 00D0      		rcall MotorSpeed	 ;  110	call_insn/2	[length = 1]
 163               	.LVL17:
 164 00aa 28E7      		ldi r18,lo8(120)	 ;  522	*reload_inhi	[length = 3]
 165 00ac 222E      		mov r2,r18
 166 00ae 312C      		mov r3,__zero_reg__
 167               	.LVL18:
 168               	.L5:
 169               	.LBB20:
 170               	.LBB21:
 171               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 172               		.loc 2 346 0
 173 00b0 84E2      		ldi r24,lo8(36)	 ;  115	movqi_insn/2	[length = 1]
 174 00b2 00D0      		rcall sleep	 ;  116	call_insn/2	[length = 1]
 175               	.LVL19:
 176 00b4 81E0      		ldi r24,1	 ;  120	addhi3_clobber/3	[length = 3]
 177 00b6 281A      		sub r2,r24
 178 00b8 3108      		sbc r3,__zero_reg__
 179               	.LVL20:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 180               		.loc 2 345 0
 181 00ba 2114      		cp r2,__zero_reg__	 ;  121	*cmphi/2	[length = 2]
 182 00bc 3104      		cpc r3,__zero_reg__
 183 00be 01F4      		brne .L5	 ;  122	branch	[length = 1]
 184               	.LBE21:
 185               	.LBE20:
  75:main.c        **** 		msleep(120);
  76:main.c        **** 						
  77:main.c        **** 		//LED Steuerung
  78:main.c        **** 		
  79:main.c        **** 		if(left > right){
 186               		.loc 1 79 0
 187 00c0 6016      		cp r6,r16	 ;  131	*cmphi/3	[length = 2]
 188 00c2 7106      		cpc r7,r17
 189 00c4 04F4      		brge .L6	 ;  132	branch	[length = 1]
  80:main.c        **** 			BackLED(OFF,ON);
 190               		.loc 1 80 0
 191 00c6 61E0      		ldi r22,lo8(1)	 ;  134	movqi_insn/2	[length = 1]
 192 00c8 80E0      		ldi r24,0	 ;  135	movqi_insn/1	[length = 1]
 193 00ca 00D0      		rcall BackLED	 ;  136	call_insn/2	[length = 1]
 194               	.LVL21:
 195               	.L6:
  81:main.c        **** 		}
  82:main.c        **** 		
  83:main.c        **** 		if(right > left){
 196               		.loc 1 83 0
 197 00cc 0615      		cp r16,r6	 ;  139	*cmphi/3	[length = 2]
 198 00ce 1705      		cpc r17,r7
 199 00d0 04F4      		brge .L7	 ;  140	branch	[length = 1]
  84:main.c        **** 			BackLED(ON,OFF);
 200               		.loc 1 84 0
 201 00d2 60E0      		ldi r22,0	 ;  142	movqi_insn/1	[length = 1]
 202 00d4 81E0      		ldi r24,lo8(1)	 ;  143	movqi_insn/2	[length = 1]
 203 00d6 00D0      		rcall BackLED	 ;  144	call_insn/2	[length = 1]
 204               	.LVL22:
 205               	.L7:
  85:main.c        **** 		}
  86:main.c        **** 		
  87:main.c        **** 		if(right == left){
 206               		.loc 1 87 0
 207 00d8 6016      		cp r6,r16	 ;  147	*cmphi/3	[length = 2]
 208 00da 7106      		cpc r7,r17
 209 00dc 01F4      		brne .L8	 ;  148	branch	[length = 1]
  88:main.c        **** 			BackLED(ON,ON);
 210               		.loc 1 88 0
 211 00de 61E0      		ldi r22,lo8(1)	 ;  150	movqi_insn/2	[length = 1]
 212 00e0 81E0      		ldi r24,lo8(1)	 ;  151	movqi_insn/2	[length = 1]
 213 00e2 00D0      		rcall BackLED	 ;  152	call_insn/2	[length = 1]
 214               	.LVL23:
 215               	.L8:
  89:main.c        **** 		}
  90:main.c        **** 		
  91:main.c        **** 		if(right && left < 80){
 216               		.loc 1 91 0
 217 00e4 6114      		cp r6,__zero_reg__	 ;  155	*cmphi/2	[length = 2]
 218 00e6 7104      		cpc r7,__zero_reg__
 219 00e8 01F0      		breq .L10	 ;  156	branch	[length = 1]
 220               		.loc 1 91 0 is_stmt 0 discriminator 1
 221 00ea 0035      		cpi r16,80	 ;  162	*cmphi/6	[length = 2]
 222 00ec 1105      		cpc r17,__zero_reg__
 223 00ee 04F4      		brge .L11	 ;  163	branch	[length = 1]
  92:main.c        **** 			StatusLED(RED);
 224               		.loc 1 92 0 is_stmt 1
 225 00f0 82E0      		ldi r24,lo8(2)	 ;  165	movqi_insn/2	[length = 1]
 226 00f2 00D0      		rcall StatusLED	 ;  166	call_insn/2	[length = 1]
 227               	.LVL24:
 228               	.L11:
  93:main.c        **** 		}
  94:main.c        **** 		
  95:main.c        **** 		if(80 < right && left < 120){
 229               		.loc 1 95 0
 230 00f4 91E5      		ldi r25,81	 ;  169	*cmphi/7	[length = 3]
 231 00f6 6916      		cp r6,r25
 232 00f8 7104      		cpc r7,__zero_reg__
 233 00fa 04F0      		brlt .L12	 ;  170	branch	[length = 1]
 234               		.loc 1 95 0 is_stmt 0 discriminator 1
 235 00fc 0837      		cpi r16,120	 ;  172	*cmphi/6	[length = 2]
 236 00fe 1105      		cpc r17,__zero_reg__
 237 0100 04F4      		brge .L12	 ;  173	branch	[length = 1]
  96:main.c        **** 			StatusLED(YELLOW);
 238               		.loc 1 96 0 is_stmt 1
 239 0102 83E0      		ldi r24,lo8(3)	 ;  175	movqi_insn/2	[length = 1]
 240 0104 00D0      		rcall StatusLED	 ;  176	call_insn/2	[length = 1]
 241               	.LVL25:
 242               	.L12:
  97:main.c        **** 		}
  98:main.c        **** 		
  99:main.c        **** 		if(right && left > 120){
 243               		.loc 1 99 0 discriminator 1
 244 0106 0937      		cpi r16,121	 ;  182	*cmphi/6	[length = 2]
 245 0108 1105      		cpc r17,__zero_reg__
 246 010a 04F0      		brlt .L10	 ;  183	branch	[length = 1]
 100:main.c        **** 			StatusLED(GREEN);
 247               		.loc 1 100 0
 248 010c 81E0      		ldi r24,lo8(1)	 ;  185	movqi_insn/2	[length = 1]
 249 010e 00D0      		rcall StatusLED	 ;  186	call_insn/2	[length = 1]
 250               	.LVL26:
 251               	.L10:
 101:main.c        **** 		}
 102:main.c        **** 		
 103:main.c        **** 		
 104:main.c        **** 			if(x == 3000){
 252               		.loc 1 104 0
 253 0110 E8EB      		ldi r30,-72	 ;  189	*cmphi/7	[length = 4]
 254 0112 EE16      		cp r14,r30
 255 0114 EBE0      		ldi r30,11
 256 0116 FE06      		cpc r15,r30
 257 0118 01F4      		brne .L15	 ;  190	branch	[length = 1]
 105:main.c        **** 				FrontLED(ON);
 258               		.loc 1 105 0
 259 011a 81E0      		ldi r24,lo8(1)	 ;  192	movqi_insn/2	[length = 1]
 260 011c 00D0      		rcall FrontLED	 ;  193	call_insn/2	[length = 1]
 261               	.LVL27:
 106:main.c        **** 				x=0;
 262               		.loc 1 106 0
 263 011e E12C      		mov r14,__zero_reg__	 ;  465	*movhi/2	[length = 2]
 264 0120 F12C      		mov r15,__zero_reg__
 265 0122 00C0      		rjmp .L16	 ;  531	jump	[length = 1]
 266               	.LVL28:
 267               	.L15:
 107:main.c        **** 		    }
 108:main.c        **** 		    if(x == 15){				
 268               		.loc 1 108 0
 269 0124 FFE0      		ldi r31,15	 ;  201	*cmphi/7	[length = 3]
 270 0126 EF16      		cp r14,r31
 271 0128 F104      		cpc r15,__zero_reg__
 272 012a 01F4      		brne .L16	 ;  202	branch	[length = 1]
 109:main.c        **** 				FrontLED(OFF);
 273               		.loc 1 109 0
 274 012c 80E0      		ldi r24,0	 ;  204	movqi_insn/1	[length = 1]
 275 012e 00D0      		rcall FrontLED	 ;  205	call_insn/2	[length = 1]
 276               	.LVL29:
 110:main.c        **** 				x++;
 277               		.loc 1 110 0
 278 0130 90E1      		ldi r25,lo8(16)	 ;  521	*reload_inhi	[length = 3]
 279 0132 E92E      		mov r14,r25
 280 0134 F12C      		mov r15,__zero_reg__
 281 0136 00C0      		rjmp .L17	 ;  533	jump	[length = 1]
 282               	.LVL30:
 283               	.L16:
 111:main.c        **** 			}
 112:main.c        **** 			else{
 113:main.c        **** 				x++;
 284               		.loc 1 113 0
 285 0138 2FEF      		ldi r18,-1	 ;  212	addhi3_clobber/3	[length = 3]
 286 013a E21A      		sub r14,r18
 287 013c F20A      		sbc r15,r18
 288               	.LVL31:
 289               	.L17:
 290 013e 852D      		mov r24,r5	 ;  509	movqi_insn/1	[length = 1]
 291 0140 8271      		andi r24,lo8(18)	 ;  217	andqi3/2	[length = 1]
 114:main.c        **** 			}
 115:main.c        **** 			
 116:main.c        **** 			
 117:main.c        **** 		
 118:main.c        **** 		//Rückfahrt
 119:main.c        **** 		
 120:main.c        **** 		if (a_pressed || b_pressed > 0) {
 292               		.loc 1 120 0
 293 0142 01F0      		breq .L18	 ;  219	branch	[length = 1]
 121:main.c        **** 			StatusLED(RED);
 294               		.loc 1 121 0
 295 0144 82E0      		ldi r24,lo8(2)	 ;  221	movqi_insn/2	[length = 1]
 296 0146 00D0      		rcall StatusLED	 ;  222	call_insn/2	[length = 1]
 297               	.LVL32:
 122:main.c        **** 			BackLED(OFF,ON);
 298               		.loc 1 122 0
 299 0148 61E0      		ldi r22,lo8(1)	 ;  223	movqi_insn/2	[length = 1]
 300 014a 80E0      		ldi r24,0	 ;  224	movqi_insn/1	[length = 1]
 301 014c 00D0      		rcall BackLED	 ;  225	call_insn/2	[length = 1]
 302               	.LVL33:
 303               	.LBB22:
 304               	.LBB23:
 305               		.loc 2 346 0
 306 014e 84E2      		ldi r24,lo8(36)	 ;  228	movqi_insn/2	[length = 1]
 307 0150 00D0      		rcall sleep	 ;  229	call_insn/2	[length = 1]
 308               	.LVL34:
 309               	.LBE23:
 310               	.LBE22:
 123:main.c        **** 			msleep(1);
 124:main.c        **** 			BackLED(ON,OFF);
 311               		.loc 1 124 0
 312 0152 60E0      		ldi r22,0	 ;  232	movqi_insn/1	[length = 1]
 313 0154 81E0      		ldi r24,lo8(1)	 ;  233	movqi_insn/2	[length = 1]
 314 0156 00D0      		rcall BackLED	 ;  234	call_insn/2	[length = 1]
 315               	.LVL35:
 125:main.c        **** 			MotorDir(RWD,RWD);
 316               		.loc 1 125 0
 317 0158 60E1      		ldi r22,lo8(16)	 ;  235	movqi_insn/2	[length = 1]
 318 015a 80E1      		ldi r24,lo8(16)	 ;  236	movqi_insn/2	[length = 1]
 319 015c 00D0      		rcall MotorDir	 ;  237	call_insn/2	[length = 1]
 320               	.LVL36:
 126:main.c        **** 			MotorSpeed(120,120);
 321               		.loc 1 126 0
 322 015e 68E7      		ldi r22,lo8(120)	 ;  238	movqi_insn/2	[length = 1]
 323 0160 88E7      		ldi r24,lo8(120)	 ;  239	movqi_insn/2	[length = 1]
 324 0162 00D0      		rcall MotorSpeed	 ;  240	call_insn/2	[length = 1]
 325               	.LVL37:
 326 0164 08E5      		ldi r16,lo8(88)	 ;  466	*movhi/5	[length = 2]
 327 0166 12E0      		ldi r17,lo8(2)
 328               	.LVL38:
 329               	.L20:
 330               	.LBB24:
 331               	.LBB25:
 332               		.loc 2 346 0
 333 0168 84E2      		ldi r24,lo8(36)	 ;  245	movqi_insn/2	[length = 1]
 334 016a 00D0      		rcall sleep	 ;  246	call_insn/2	[length = 1]
 335               	.LVL39:
 336 016c 0150      		subi r16,1	 ;  250	addhi3_clobber/2	[length = 2]
 337 016e 1109      		sbc r17,__zero_reg__
 338               	.LVL40:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 339               		.loc 2 345 0
 340 0170 0115      		cp r16,__zero_reg__	 ;  251	*cmphi/2	[length = 2]
 341 0172 1105      		cpc r17,__zero_reg__
 342 0174 01F4      		brne .L20	 ;  252	branch	[length = 1]
 343               	.LBE25:
 344               	.LBE24:
 127:main.c        **** 			msleep(600);
 128:main.c        **** 			MotorDir(BREAK,BREAK);
 345               		.loc 1 128 0
 346 0176 60E0      		ldi r22,0	 ;  261	movqi_insn/1	[length = 1]
 347 0178 80E0      		ldi r24,0	 ;  262	movqi_insn/1	[length = 1]
 348 017a 00D0      		rcall MotorDir	 ;  263	call_insn/2	[length = 1]
 349               	.LVL41:
 350               	.L18:
 351 017c 852D      		mov r24,r5	 ;  510	movqi_insn/1	[length = 1]
 352 017e 8970      		andi r24,lo8(9)	 ;  266	andqi3/2	[length = 1]
 129:main.c        **** 		}
 130:main.c        **** 		
 131:main.c        **** 		if (c_pressed || d_pressed > 0) {
 353               		.loc 1 131 0
 354 0180 01F0      		breq .L21	 ;  268	branch	[length = 1]
 132:main.c        **** 			StatusLED(RED);
 355               		.loc 1 132 0
 356 0182 82E0      		ldi r24,lo8(2)	 ;  270	movqi_insn/2	[length = 1]
 357 0184 00D0      		rcall StatusLED	 ;  271	call_insn/2	[length = 1]
 358               	.LVL42:
 133:main.c        **** 			BackLED(OFF,ON);
 359               		.loc 1 133 0
 360 0186 61E0      		ldi r22,lo8(1)	 ;  272	movqi_insn/2	[length = 1]
 361 0188 80E0      		ldi r24,0	 ;  273	movqi_insn/1	[length = 1]
 362 018a 00D0      		rcall BackLED	 ;  274	call_insn/2	[length = 1]
 363               	.LVL43:
 364               	.LBB26:
 365               	.LBB27:
 366               		.loc 2 346 0
 367 018c 84E2      		ldi r24,lo8(36)	 ;  277	movqi_insn/2	[length = 1]
 368 018e 00D0      		rcall sleep	 ;  278	call_insn/2	[length = 1]
 369               	.LVL44:
 370               	.LBE27:
 371               	.LBE26:
 134:main.c        **** 			msleep(1);
 135:main.c        **** 			BackLED(ON,OFF);
 372               		.loc 1 135 0
 373 0190 60E0      		ldi r22,0	 ;  281	movqi_insn/1	[length = 1]
 374 0192 81E0      		ldi r24,lo8(1)	 ;  282	movqi_insn/2	[length = 1]
 375 0194 00D0      		rcall BackLED	 ;  283	call_insn/2	[length = 1]
 376               	.LVL45:
 136:main.c        **** 			MotorDir(RWD,RWD);
 377               		.loc 1 136 0
 378 0196 60E1      		ldi r22,lo8(16)	 ;  284	movqi_insn/2	[length = 1]
 379 0198 80E1      		ldi r24,lo8(16)	 ;  285	movqi_insn/2	[length = 1]
 380 019a 00D0      		rcall MotorDir	 ;  286	call_insn/2	[length = 1]
 381               	.LVL46:
 137:main.c        **** 			MotorSpeed(120,60);
 382               		.loc 1 137 0
 383 019c 6CE3      		ldi r22,lo8(60)	 ;  287	movqi_insn/2	[length = 1]
 384 019e 88E7      		ldi r24,lo8(120)	 ;  288	movqi_insn/2	[length = 1]
 385 01a0 00D0      		rcall MotorSpeed	 ;  289	call_insn/2	[length = 1]
 386               	.LVL47:
 387 01a2 08E5      		ldi r16,lo8(88)	 ;  467	*movhi/5	[length = 2]
 388 01a4 12E0      		ldi r17,lo8(2)
 389               	.LVL48:
 390               	.L23:
 391               	.LBB28:
 392               	.LBB29:
 393               		.loc 2 346 0
 394 01a6 84E2      		ldi r24,lo8(36)	 ;  294	movqi_insn/2	[length = 1]
 395 01a8 00D0      		rcall sleep	 ;  295	call_insn/2	[length = 1]
 396               	.LVL49:
 397 01aa 0150      		subi r16,1	 ;  299	addhi3_clobber/2	[length = 2]
 398 01ac 1109      		sbc r17,__zero_reg__
 399               	.LVL50:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 400               		.loc 2 345 0
 401 01ae 0115      		cp r16,__zero_reg__	 ;  300	*cmphi/2	[length = 2]
 402 01b0 1105      		cpc r17,__zero_reg__
 403 01b2 01F4      		brne .L23	 ;  301	branch	[length = 1]
 404               	.LBE29:
 405               	.LBE28:
 138:main.c        **** 			msleep(600);
 139:main.c        **** 			MotorDir(BREAK,BREAK);
 406               		.loc 1 139 0
 407 01b4 60E0      		ldi r22,0	 ;  310	movqi_insn/1	[length = 1]
 408 01b6 80E0      		ldi r24,0	 ;  311	movqi_insn/1	[length = 1]
 409 01b8 00D0      		rcall MotorDir	 ;  312	call_insn/2	[length = 1]
 410               	.LVL51:
 411               	.L21:
 412 01ba 852D      		mov r24,r5	 ;  511	movqi_insn/1	[length = 1]
 413 01bc 8472      		andi r24,lo8(36)	 ;  315	andqi3/2	[length = 1]
 140:main.c        **** 		}
 141:main.c        **** 		
 142:main.c        **** 		if (e_pressed || f_pressed > 0) {
 414               		.loc 1 142 0
 415 01be 01F4      		brne .+2	 ;  317	branch	[length = 2]
 416 01c0 00C0      		rjmp .L27
 143:main.c        **** 			StatusLED(RED);
 417               		.loc 1 143 0
 418 01c2 82E0      		ldi r24,lo8(2)	 ;  319	movqi_insn/2	[length = 1]
 419 01c4 00D0      		rcall StatusLED	 ;  320	call_insn/2	[length = 1]
 420               	.LVL52:
 144:main.c        **** 			BackLED(OFF,ON);
 421               		.loc 1 144 0
 422 01c6 61E0      		ldi r22,lo8(1)	 ;  321	movqi_insn/2	[length = 1]
 423 01c8 80E0      		ldi r24,0	 ;  322	movqi_insn/1	[length = 1]
 424 01ca 00D0      		rcall BackLED	 ;  323	call_insn/2	[length = 1]
 425               	.LVL53:
 426               	.LBB30:
 427               	.LBB31:
 428               		.loc 2 346 0
 429 01cc 84E2      		ldi r24,lo8(36)	 ;  326	movqi_insn/2	[length = 1]
 430 01ce 00D0      		rcall sleep	 ;  327	call_insn/2	[length = 1]
 431               	.LVL54:
 432               	.LBE31:
 433               	.LBE30:
 145:main.c        **** 			msleep(1);
 146:main.c        **** 			BackLED(ON,OFF);
 434               		.loc 1 146 0
 435 01d0 60E0      		ldi r22,0	 ;  330	movqi_insn/1	[length = 1]
 436 01d2 81E0      		ldi r24,lo8(1)	 ;  331	movqi_insn/2	[length = 1]
 437 01d4 00D0      		rcall BackLED	 ;  332	call_insn/2	[length = 1]
 438               	.LVL55:
 147:main.c        **** 			MotorDir(RWD,RWD);
 439               		.loc 1 147 0
 440 01d6 60E1      		ldi r22,lo8(16)	 ;  333	movqi_insn/2	[length = 1]
 441 01d8 80E1      		ldi r24,lo8(16)	 ;  334	movqi_insn/2	[length = 1]
 442 01da 00D0      		rcall MotorDir	 ;  335	call_insn/2	[length = 1]
 443               	.LVL56:
 148:main.c        **** 			MotorSpeed(60,120);
 444               		.loc 1 148 0
 445 01dc 68E7      		ldi r22,lo8(120)	 ;  336	movqi_insn/2	[length = 1]
 446 01de 8CE3      		ldi r24,lo8(60)	 ;  337	movqi_insn/2	[length = 1]
 447 01e0 00D0      		rcall MotorSpeed	 ;  338	call_insn/2	[length = 1]
 448               	.LVL57:
 449 01e2 08E5      		ldi r16,lo8(88)	 ;  468	*movhi/5	[length = 2]
 450 01e4 12E0      		ldi r17,lo8(2)
 451               	.LVL58:
 452               	.L26:
 453               	.LBB32:
 454               	.LBB33:
 455               		.loc 2 346 0
 456 01e6 84E2      		ldi r24,lo8(36)	 ;  343	movqi_insn/2	[length = 1]
 457 01e8 00D0      		rcall sleep	 ;  344	call_insn/2	[length = 1]
 458               	.LVL59:
 459 01ea 0150      		subi r16,1	 ;  348	addhi3_clobber/2	[length = 2]
 460 01ec 1109      		sbc r17,__zero_reg__
 461               	.LVL60:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 462               		.loc 2 345 0
 463 01ee 0115      		cp r16,__zero_reg__	 ;  349	*cmphi/2	[length = 2]
 464 01f0 1105      		cpc r17,__zero_reg__
 465 01f2 01F4      		brne .L26	 ;  350	branch	[length = 1]
 466               	.LBE33:
 467               	.LBE32:
 149:main.c        **** 			msleep(600);
 150:main.c        **** 			MotorDir(BREAK,BREAK);
 468               		.loc 1 150 0
 469 01f4 60E0      		ldi r22,0	 ;  359	movqi_insn/1	[length = 1]
 470 01f6 80E0      		ldi r24,0	 ;  360	movqi_insn/1	[length = 1]
 471 01f8 00D0      		rcall MotorDir	 ;  361	call_insn/2	[length = 1]
 472               	.LVL61:
 473 01fa 00C0      		rjmp .L27	 ;  535	jump	[length = 1]
 474               	.LVL62:
 475               	.L29:
 151:main.c        **** 		}	
 152:main.c        **** 	while(lineData[LEFT] || lineData[RIGHT] > 900){
 476               		.loc 1 152 0 discriminator 1
 477 01fc 8F89      		ldd r24,Y+23	 ;  406	*movhi/3	[length = 2]
 478 01fe 988D      		ldd r25,Y+24
 479 0200 892B      		or r24,r25	 ;  407	*cmphi/1	[length = 1]
 480 0202 01F0      		breq .L44	 ;  408	branch	[length = 1]
 481               	.L30:
 153:main.c        **** 		MotorDir(BREAK,BREAK);
 482               		.loc 1 153 0
 483 0204 60E0      		ldi r22,0	 ;  367	movqi_insn/1	[length = 1]
 484 0206 80E0      		ldi r24,0	 ;  368	movqi_insn/1	[length = 1]
 485 0208 00D0      		rcall MotorDir	 ;  369	call_insn/2	[length = 1]
 486               	.LVL63:
 487 020a F801      		movw r30,r16	 ;  512	*movhi/1	[length = 1]
 488 020c E60D      		add r30,r6	 ;  370	*addhi3/1	[length = 2]
 489 020e F71D      		adc r31,r7
 154:main.c        **** 		pressed[t]=pressed[t]+10;
 490               		.loc 1 154 0
 491 0210 8081      		ld r24,Z	 ;  371	*movhi/3	[length = 2]
 492 0212 9181      		ldd r25,Z+1
 493 0214 0A96      		adiw r24,10	 ;  372	addhi3_clobber/1	[length = 1]
 494 0216 9183      		std Z+1,r25	 ;  373	*movhi/4	[length = 2]
 495 0218 8083      		st Z,r24
 155:main.c        **** 		t++;
 496               		.loc 1 155 0
 497 021a 8FEF      		ldi r24,-1	 ;  374	addhi3_clobber/3	[length = 3]
 498 021c C81A      		sub r12,r24
 499 021e D80A      		sbc r13,r24
 500               	.LVL64:
 501 0220 92E0      		ldi r25,2	 ;  376	addhi3_clobber/3	[length = 3]
 502 0222 690E      		add r6,r25
 503 0224 711C      		adc r7,__zero_reg__
 156:main.c        **** 		if(t == 10){
 504               		.loc 1 156 0
 505 0226 EAE0      		ldi r30,10	 ;  377	*cmphi/7	[length = 3]
 506 0228 CE16      		cp r12,r30
 507 022a D104      		cpc r13,__zero_reg__
 508 022c 01F4      		brne .L29	 ;  378	branch	[length = 1]
 157:main.c        **** 			MotorDir(FWD,FWD);
 509               		.loc 1 157 0
 510 022e 60E2      		ldi r22,lo8(32)	 ;  384	movqi_insn/2	[length = 1]
 511 0230 80E2      		ldi r24,lo8(32)	 ;  385	movqi_insn/2	[length = 1]
 512 0232 00D0      		rcall MotorDir	 ;  386	call_insn/2	[length = 1]
 513               	.LVL65:
 158:main.c        **** 			MotorSpeed(pressed[t],pressed[t]);
 514               		.loc 1 158 0
 515 0234 8D89      		ldd r24,Y+21	 ;  387	movqi_insn/4	[length = 1]
 516 0236 682F      		mov r22,r24	 ;  388	movqi_insn/1	[length = 1]
 517 0238 00D0      		rcall MotorSpeed	 ;  390	call_insn/2	[length = 1]
 518               	.LVL66:
 519               	.LBB34:
 520               	.LBB35:
 521               		.loc 2 346 0
 522 023a 84E2      		ldi r24,lo8(36)	 ;  393	movqi_insn/2	[length = 1]
 523 023c 00D0      		rcall sleep	 ;  394	call_insn/2	[length = 1]
 524               	.LVL67:
 525               	.LBE35:
 526               	.LBE34:
 159:main.c        **** 			msleep(1);
 160:main.c        **** 			t=0;
 527               		.loc 1 160 0
 528 023e C12C      		mov r12,__zero_reg__	 ;  471	*movhi/2	[length = 2]
 529 0240 D12C      		mov r13,__zero_reg__
 530               	.LVL68:
 531               	.L27:
 532 0242 8601      		movw r16,r12	 ;  513	*movhi/1	[length = 1]
 533 0244 000F      		lsl r16	 ;  520	*ashlhi3_const/2	[length = 2]
 534 0246 111F      		rol r17
 535 0248 0A0D      		add r16,r10	 ;  401	*addhi3/1	[length = 2]
 536 024a 1B1D      		adc r17,r11
 148:main.c        **** 			msleep(600);
 537               		.loc 1 148 0 discriminator 1
 538 024c 612C      		mov r6,__zero_reg__	 ;  470	*movhi/2	[length = 2]
 539 024e 712C      		mov r7,__zero_reg__
 540 0250 00C0      		rjmp .L29	 ;  538	jump	[length = 1]
 541               	.LVL69:
 542               	.L44:
 152:main.c        **** 		MotorDir(BREAK,BREAK);
 543               		.loc 1 152 0 discriminator 2
 544 0252 898D      		ldd r24,Y+25	 ;  410	*movhi/3	[length = 2]
 545 0254 9A8D      		ldd r25,Y+26
 546 0256 8538      		cpi r24,-123	 ;  411	*cmphi/7	[length = 2]
 547 0258 9340      		sbci r25,3
 548 025a 00F4      		brsh .L30	 ;  412	branch	[length = 1]
 549 025c 00C0      		rjmp .L31	 ;  541	jump	[length = 1]
 550               	.LBE19:
 551               		.cfi_endproc
 552               	.LFE2:
 554               		.text
 555               	.Letext0:
 556               		.file 3 "/usr/lib/avr/include/stdint.h"
 557               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 558               		.file 5 "../../libtinyasuro/inc/asuro/led.h"
 559               		.file 6 "../../libtinyasuro/inc/asuro/motor.h"
 560               		.file 7 "../../libtinyasuro/inc/asuro/switches.h"
 561               		.file 8 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccpiAgHk.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccpiAgHk.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccpiAgHk.s:4      *ABS*:0000003f __SREG__
     /tmp/ccpiAgHk.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccpiAgHk.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccpiAgHk.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
LineData
PollSwitch
__divmodhi4
StatusLED
MotorDir
MotorSpeed
sleep
BackLED
FrontLED
