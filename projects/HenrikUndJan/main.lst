   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.c"
   1:main.c        **** 	
   2:main.c        **** // 	   			(K)iT lives!
   3:main.c        **** //*********************************************
   4:main.c        **** //*|x|**| |***| |****[___]****[_________]**|x|*
   5:main.c        **** //*|x|**| |***/ /*****| |*********| |******|x|*	 
   6:main.c        **** //*|x|**| |**/ /******| |*********| |******|x|*
   7:main.c        **** //*|x|**[     ]*******| |*********| |******|x|*
   8:main.c        **** //*|x|**| |**\ \******| |*********| |******|x|*
   9:main.c        **** //*|x|**| |***\ \*****| |*********| |******|x|*
  10:main.c        **** //*|x|**| |***| |****[___]*******[___]*****|x|*
  11:main.c        **** //*********************************************
  12:main.c        **** //
  13:main.c        **** #define SWITCH(X) 1<<X
  14:main.c        **** #define SLOW 1000
  15:main.c        **** #define FAST 100
  16:main.c        **** 
  17:main.c        **** #include <asuro/asuro.h>
  18:main.c        **** 
  19:main.c        **** void main(void)		{
  16               		.loc 1 19 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28	 ;  468	pushqi1/1	[length = 1]
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29	 ;  469	pushqi1/1	[length = 1]
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               		 ; SP -= 4	 ;  473	*addhi3_sp	[length = 2]
  27 0004 00D0      		rcall .
  28 0006 00D0      		rcall .
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 8
  31 0008 CDB7      		in r28,__SP_L__	 ;  474	*movhi/8	[length = 2]
  32 000a DEB7      		in r29,__SP_H__
  33               	.LCFI3:
  34               		.cfi_def_cfa_register 28
  35               	/* prologue: function */
  36               	/* frame size = 4 */
  37               	/* stack size = 6 */
  38               	.L__stack_usage = 6
  20:main.c        ****     Init();
  39               		.loc 1 20 0
  40 000c 00D0      		rcall Init	 ;  19	call_insn/2	[length = 1]
  41               	.LVL0:
  21:main.c        ****     
  22:main.c        ****     int counter 	= 0;
  23:main.c        ****     int x			= 0;
  42               		.loc 1 23 0
  43 000e C12C      		mov r12,__zero_reg__	 ;  3	*movhi/2	[length = 2]
  44 0010 D12C      		mov r13,__zero_reg__
  22:main.c        ****     int x			= 0;
  45               		.loc 1 22 0
  46 0012 A12C      		mov r10,__zero_reg__	 ;  4	*movhi/2	[length = 2]
  47 0014 B12C      		mov r11,__zero_reg__
  48               	.LBB19:
  24:main.c        ****     int left 		= 0;
  25:main.c        ****     int right 		= 0;
  26:main.c        **** 	char a_pressed	= 0;
  27:main.c        **** 	char b_pressed	= 0;
  28:main.c        **** 	char c_pressed	= 0;
  29:main.c        **** 	char d_pressed	= 0;
  30:main.c        **** 	char e_pressed	= 0;
  31:main.c        **** 	char f_pressed	= 0;
  32:main.c        ****     
  33:main.c        **** 	while(1){
  34:main.c        **** 		
  35:main.c        **** 		
  36:main.c        **** 		uint16_t lineData[] = {0,0};
  37:main.c        **** 		LineData(lineData);
  38:main.c        **** 		
  39:main.c        **** 		char switches = PollSwitch();
  40:main.c        ****         switches &= 0b00111111;
  41:main.c        **** 		
  42:main.c        **** 		left  = ((int)lineData[LEFT] +160)  / 7;
  49               		.loc 1 42 0
  50 0016 37E0      		ldi r19,lo8(7)	 ;  479	*reload_inhi	[length = 3]
  51 0018 832E      		mov r8,r19
  52 001a 912C      		mov r9,__zero_reg__
  53               	.LVL1:
  54               	.L30:
  36:main.c        **** 		LineData(lineData);
  55               		.loc 1 36 0
  56 001c 1A82      		std Y+2,__zero_reg__	 ;  33	*movhi/4	[length = 2]
  57 001e 1982      		std Y+1,__zero_reg__
  58 0020 1C82      		std Y+4,__zero_reg__	 ;  34	*movhi/4	[length = 2]
  59 0022 1B82      		std Y+3,__zero_reg__
  37:main.c        **** 		
  60               		.loc 1 37 0
  61 0024 CE01      		movw r24,r28	 ;  464	*movhi/1	[length = 1]
  62 0026 0196      		adiw r24,1	 ;  35	*addhi3/3	[length = 1]
  63 0028 00D0      		rcall LineData	 ;  36	call_insn/2	[length = 1]
  64               	.LVL2:
  39:main.c        ****         switches &= 0b00111111;
  65               		.loc 1 39 0
  66 002a 00D0      		rcall PollSwitch	 ;  37	call_value_insn/2	[length = 1]
  67               	.LVL3:
  68 002c 782E      		mov r7,r24	 ;  38	movqi_insn/1	[length = 1]
  69               	.LVL4:
  70               		.loc 1 42 0
  71 002e 8981      		ldd r24,Y+1	 ;  41	*movhi/3	[length = 2]
  72 0030 9A81      		ldd r25,Y+2
  73 0032 8056      		subi r24,96	 ;  42	addhi3_clobber/2	[length = 2]
  74 0034 9F4F      		sbci r25,-1
  75 0036 B401      		movw r22,r8	 ;  453	*movhi/1	[length = 1]
  76 0038 00D0      		rcall __divmodhi4	 ;  454	*divmodhi4_call	[length = 1]
  77 003a 8B01      		movw r16,r22	 ;  455	*movhi/1	[length = 1]
  78               	.LVL5:
  43:main.c        **** 		right = ((int)lineData[RIGHT]+100)  / 7;
  79               		.loc 1 43 0
  80 003c 8B81      		ldd r24,Y+3	 ;  47	*movhi/3	[length = 2]
  81 003e 9C81      		ldd r25,Y+4
  82 0040 8C59      		subi r24,-100	 ;  48	addhi3_clobber/2	[length = 2]
  83 0042 9F4F      		sbci r25,-1
  84 0044 B401      		movw r22,r8	 ;  458	*movhi/1	[length = 1]
  85 0046 00D0      		rcall __divmodhi4	 ;  459	*divmodhi4_call	[length = 1]
  86 0048 7B01      		movw r14,r22	 ;  51	*movhi/1	[length = 1]
  87               	.LVL6:
  44:main.c        **** 		
  45:main.c        **** 		a_pressed = ( switches & SWITCH(1) );
  46:main.c        **** 		b_pressed = ( switches & SWITCH(4) );
  47:main.c        **** 		c_pressed = ( switches & SWITCH(0) );
  48:main.c        **** 		d_pressed = ( switches & SWITCH(3) );
  49:main.c        **** 		e_pressed = ( switches & SWITCH(2) );
  50:main.c        **** 		f_pressed = ( switches & SWITCH(5) );
  51:main.c        **** 		
  52:main.c        **** 		//fahren
  53:main.c        **** 		
  54:main.c        **** 		if (left>200 ){
  88               		.loc 1 54 0
  89 004a 093C      		cpi r16,-55	 ;  59	*cmphi/6	[length = 2]
  90 004c 1105      		cpc r17,__zero_reg__
  91 004e 04F4      		brge .L31	 ;  60	branch	[length = 1]
  55:main.c        **** 			left=200;
  56:main.c        **** 		}
  57:main.c        **** 		else if(left<100){
  92               		.loc 1 57 0
  93 0050 0436      		cpi r16,100	 ;  62	*cmphi/6	[length = 2]
  94 0052 1105      		cpc r17,__zero_reg__
  95 0054 04F4      		brge .L2	 ;  63	branch	[length = 1]
  58:main.c        **** 			left=0;
  96               		.loc 1 58 0
  97 0056 00E0      		ldi r16,0	 ;  6	*movhi/2	[length = 2]
  98 0058 10E0      		ldi r17,0
  99               	.LVL7:
 100 005a 00C0      		rjmp .L2	 ;  482	jump	[length = 1]
 101               	.LVL8:
 102               	.L31:
  55:main.c        **** 			left=200;
 103               		.loc 1 55 0
 104 005c 08EC      		ldi r16,lo8(-56)	 ;  417	*movhi/5	[length = 2]
 105 005e 10E0      		ldi r17,0
 106               	.LVL9:
 107               	.L2:
  59:main.c        **** 		}		
  60:main.c        **** 		if (right>200){
 108               		.loc 1 60 0
 109 0060 693C      		cpi r22,-55	 ;  68	*cmphi/6	[length = 2]
 110 0062 7105      		cpc r23,__zero_reg__
 111 0064 04F4      		brge .L33	 ;  69	branch	[length = 1]
  61:main.c        **** 			(right=200);
  62:main.c        **** 		}
  63:main.c        **** 		else if(right<100){
 112               		.loc 1 63 0
 113 0066 6436      		cpi r22,100	 ;  71	*cmphi/6	[length = 2]
 114 0068 7105      		cpc r23,__zero_reg__
 115 006a 04F4      		brge .L3	 ;  72	branch	[length = 1]
  64:main.c        **** 			right=0;
 116               		.loc 1 64 0
 117 006c E12C      		mov r14,__zero_reg__	 ;  8	*movhi/2	[length = 2]
 118 006e F12C      		mov r15,__zero_reg__
 119               	.LVL10:
 120 0070 00C0      		rjmp .L3	 ;  484	jump	[length = 1]
 121               	.LVL11:
 122               	.L33:
  61:main.c        **** 			(right=200);
 123               		.loc 1 61 0
 124 0072 28EC      		ldi r18,lo8(-56)	 ;  478	*reload_inhi	[length = 3]
 125 0074 E22E      		mov r14,r18
 126 0076 F12C      		mov r15,__zero_reg__
 127               	.LVL12:
 128               	.L3:
  65:main.c        **** 		}
  66:main.c        **** 			
  67:main.c        **** 		MotorDir(FWD,FWD);
 129               		.loc 1 67 0
 130 0078 60E2      		ldi r22,lo8(32)	 ;  77	movqi_insn/2	[length = 1]
 131 007a 80E2      		ldi r24,lo8(32)	 ;  78	movqi_insn/2	[length = 1]
 132 007c 00D0      		rcall MotorDir	 ;  79	call_insn/2	[length = 1]
 133               	.LVL13:
  68:main.c        **** 		MotorSpeed(right,left);
 134               		.loc 1 68 0
 135 007e 602F      		mov r22,r16	 ;  80	movqi_insn/1	[length = 1]
 136 0080 8E2D      		mov r24,r14	 ;  81	movqi_insn/1	[length = 1]
 137 0082 00D0      		rcall MotorSpeed	 ;  82	call_insn/2	[length = 1]
 138               	.LVL14:
 139 0084 98E7      		ldi r25,lo8(120)	 ;  477	*reload_inhi	[length = 3]
 140 0086 492E      		mov r4,r25
 141 0088 512C      		mov r5,__zero_reg__
 142               	.LVL15:
 143               	.L5:
 144               	.LBB20:
 145               	.LBB21:
 146               		.file 2 "../../libtinyasuro/inc/asuro/time.h"
   1:../../libtinyasuro/inc/asuro/time.h **** /**
   2:../../libtinyasuro/inc/asuro/time.h ****  * @file
   3:../../libtinyasuro/inc/asuro/time.h ****  *
   4:../../libtinyasuro/inc/asuro/time.h ****  * \if de
   5:../../libtinyasuro/inc/asuro/time.h ****  * Definiert die Schnittstelle für die Verwendung des Timer2 als gemeinsame
   6:../../libtinyasuro/inc/asuro/time.h ****  * Zeitbasis und Taktquelle.
   7:../../libtinyasuro/inc/asuro/time.h ****  *
   8:../../libtinyasuro/inc/asuro/time.h ****  * Es werden Funktionen definiert, die es ermöglichen, den Prozessor für einen
   9:../../libtinyasuro/inc/asuro/time.h ****  * definierten Zeitraum oder bis zum nächsten Interrupt in den Idle-Mode zu
  10:../../libtinyasuro/inc/asuro/time.h ****  * versetzen (unter Verwendung der Funktionalität aus avr/sleep.h).
  11:../../libtinyasuro/inc/asuro/time.h ****  *
  12:../../libtinyasuro/inc/asuro/time.h ****  * Außerdem wird die Möglichkeit geboten, die Taktausgabe für die
  13:../../libtinyasuro/inc/asuro/time.h ****  * IR-Schnittstelle ein- und auszuschalten.
  14:../../libtinyasuro/inc/asuro/time.h ****  *
  15:../../libtinyasuro/inc/asuro/time.h ****  * Zusätzlich besteht die Möglichkeit, eine eigene Funktion in der mit 36kHz
  16:../../libtinyasuro/inc/asuro/time.h ****  * aufgerufenen Timer2-ISR auszuführen, sofern diese Option in hooks.h aktiviert
  17:../../libtinyasuro/inc/asuro/time.h ****  * ist.
  18:../../libtinyasuro/inc/asuro/time.h ****  *
  19:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
  20:../../libtinyasuro/inc/asuro/time.h ****  *      Für eine korrekte Funktion des Moduls müssen Interrupts global
  21:../../libtinyasuro/inc/asuro/time.h ****  *      freigeschaltet sein, Ausnahmen sind für kurze Zeitspannen zulässig,
  22:../../libtinyasuro/inc/asuro/time.h ****  *      können aber die Genauigkeit negativ beeinflussen.
  23:../../libtinyasuro/inc/asuro/time.h ****  *
  24:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialisierung:
  25:../../libtinyasuro/inc/asuro/time.h ****  *      Vor der Verwendung des Moduls muss Timer2Init() aufgerufen werden, zudem
  26:../../libtinyasuro/inc/asuro/time.h ****  *      wird eine globale Interruptfreigabe benötigt.
  27:../../libtinyasuro/inc/asuro/time.h ****  *
  28:../../libtinyasuro/inc/asuro/time.h ****  * @par Genutzte Hardwareressourcen:
  29:../../libtinyasuro/inc/asuro/time.h ****  *      Module:
  30:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  31:../../libtinyasuro/inc/asuro/time.h ****  *
  32:../../libtinyasuro/inc/asuro/time.h ****  *      Interruptvektoren:
  33:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  34:../../libtinyasuro/inc/asuro/time.h ****  *
  35:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  36:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz-Träger der IR-Schnittstelle)
  37:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  38:../../libtinyasuro/inc/asuro/time.h ****  *
  39:../../libtinyasuro/inc/asuro/time.h ****  * \if en
  40:../../libtinyasuro/inc/asuro/time.h ****  * Interface definitions to use timer2 as common clock source and time
  41:../../libtinyasuro/inc/asuro/time.h ****  * reference.
  42:../../libtinyasuro/inc/asuro/time.h ****  *
  43:../../libtinyasuro/inc/asuro/time.h ****  * This interface defines functions to put the microcontroller into idle mode
  44:../../libtinyasuro/inc/asuro/time.h ****  * for either a defined timespan or until the next interrupt occurs. The
  45:../../libtinyasuro/inc/asuro/time.h ****  * functionality in avr/sleep.h is used for this purpose.
  46:../../libtinyasuro/inc/asuro/time.h ****  *
  47:../../libtinyasuro/inc/asuro/time.h ****  * The carrier clock for the IR communications interface can be controlled
  48:../../libtinyasuro/inc/asuro/time.h ****  * using this interface.
  49:../../libtinyasuro/inc/asuro/time.h ****  *
  50:../../libtinyasuro/inc/asuro/time.h ****  * Timer2 is operating with a frequency of 36kHz, custom code can be executed
  51:../../libtinyasuro/inc/asuro/time.h ****  * by an ISR of timer2 if this feature is enabled in hooks.h.
  52:../../libtinyasuro/inc/asuro/time.h ****  *
  53:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
  54:../../libtinyasuro/inc/asuro/time.h ****  *      This module requires interrupts to be enabled globally. Short term
  55:../../libtinyasuro/inc/asuro/time.h ****  *      exceptions may be permittable but can have a negative effect on the
  56:../../libtinyasuro/inc/asuro/time.h ****  *      accuracy of the provided clock.
  57:../../libtinyasuro/inc/asuro/time.h ****  *
  58:../../libtinyasuro/inc/asuro/time.h ****  * @par Initialization:
  59:../../libtinyasuro/inc/asuro/time.h ****  *      Timer2Init() must be called before using this module. Interrupts must be
  60:../../libtinyasuro/inc/asuro/time.h ****  *      enabled globally.
  61:../../libtinyasuro/inc/asuro/time.h ****  *
  62:../../libtinyasuro/inc/asuro/time.h ****  * @par Hardware resources in use:
  63:../../libtinyasuro/inc/asuro/time.h ****  *      Components:
  64:../../libtinyasuro/inc/asuro/time.h ****  *      @li Timer2
  65:../../libtinyasuro/inc/asuro/time.h ****  *
  66:../../libtinyasuro/inc/asuro/time.h ****  *      Interrupt vectors:
  67:../../libtinyasuro/inc/asuro/time.h ****  *      @li TIMER2_OVF
  68:../../libtinyasuro/inc/asuro/time.h ****  *
  69:../../libtinyasuro/inc/asuro/time.h ****  *      I/O:
  70:../../libtinyasuro/inc/asuro/time.h ****  *      @li Port B: Pin 3 (36kHz carrier signal for IR communications)
  71:../../libtinyasuro/inc/asuro/time.h ****  * \endif
  72:../../libtinyasuro/inc/asuro/time.h ****  *
  73:../../libtinyasuro/inc/asuro/time.h ****  * @see hooks.h
  74:../../libtinyasuro/inc/asuro/time.h ****  *
  75:../../libtinyasuro/inc/asuro/time.h ****  * @author Markus Jung
  76:../../libtinyasuro/inc/asuro/time.h ****  *
  77:../../libtinyasuro/inc/asuro/time.h ****  * @version 23.05.2010 \n
  78:../../libtinyasuro/inc/asuro/time.h ****  *  Schnittstellendefinition entsprechend asuro.h
  79:../../libtinyasuro/inc/asuro/time.h ****  * @version 28.05.2010 \n
  80:../../libtinyasuro/inc/asuro/time.h ****  *  Zählervariable zugänglich gemacht
  81:../../libtinyasuro/inc/asuro/time.h ****  * @version 02.06.2010 \n
  82:../../libtinyasuro/inc/asuro/time.h ****  *  sleepUntilInterrupt implementiert
  83:../../libtinyasuro/inc/asuro/time.h ****  * @version 15.06.2010 \n
  84:../../libtinyasuro/inc/asuro/time.h ****  *  Doku
  85:../../libtinyasuro/inc/asuro/time.h ****  * @version 26.06.2010 \n
  86:../../libtinyasuro/inc/asuro/time.h ****  *  Alias-Makros für sleep, msleep und sleepUntilInterrupt hinzugefügt
  87:../../libtinyasuro/inc/asuro/time.h ****  *  (zwecks konsistentem Namensschema)
  88:../../libtinyasuro/inc/asuro/time.h ****  * @version 16.08.2010 \n
  89:../../libtinyasuro/inc/asuro/time.h ****  *  + Hook für Timer2ISR
  90:../../libtinyasuro/inc/asuro/time.h ****  * @version 13.09.2013 \n
  91:../../libtinyasuro/inc/asuro/time.h ****  *  English documentation
  92:../../libtinyasuro/inc/asuro/time.h ****  * @version 29.10.2013 \n
  93:../../libtinyasuro/inc/asuro/time.h ****  *  Document interrupt safety issues of TIMER2_CLOCK_OUT_ENABLE() and
  94:../../libtinyasuro/inc/asuro/time.h ****  *  TIMER2_CLOCK_OUT_DISABLE()
  95:../../libtinyasuro/inc/asuro/time.h ****  */
  96:../../libtinyasuro/inc/asuro/time.h **** /*
  97:../../libtinyasuro/inc/asuro/time.h ****  * The contents of this file are subject to the terms of the Common Development
  98:../../libtinyasuro/inc/asuro/time.h ****  * and Distribution License Version 1.0 (the License).
  99:../../libtinyasuro/inc/asuro/time.h ****  * You may not use this file except in compliance with the License.
 100:../../libtinyasuro/inc/asuro/time.h ****  *
 101:../../libtinyasuro/inc/asuro/time.h ****  * If not included, you can obtain a copy of the License at
 102:../../libtinyasuro/inc/asuro/time.h ****  * http://www.sun.com/cddl/cddl.html
 103:../../libtinyasuro/inc/asuro/time.h ****  *
 104:../../libtinyasuro/inc/asuro/time.h ****  * When distributing Covered Code, include this CDDL Header Notice in each file
 105:../../libtinyasuro/inc/asuro/time.h ****  * and include the provided License file.
 106:../../libtinyasuro/inc/asuro/time.h ****  */
 107:../../libtinyasuro/inc/asuro/time.h **** 
 108:../../libtinyasuro/inc/asuro/time.h **** #ifndef TIME_H_
 109:../../libtinyasuro/inc/asuro/time.h **** #define TIME_H_
 110:../../libtinyasuro/inc/asuro/time.h **** 
 111:../../libtinyasuro/inc/asuro/time.h **** #include <stdbool.h>
 112:../../libtinyasuro/inc/asuro/time.h **** #include <stdint.h>
 113:../../libtinyasuro/inc/asuro/time.h **** #include "hooks.h"
 114:../../libtinyasuro/inc/asuro/time.h **** #include "../util/misc.h"
 115:../../libtinyasuro/inc/asuro/time.h **** 
 116:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 117:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 118:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleep().
 119:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 120:../../libtinyasuro/inc/asuro/time.h ****  *
 121:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 122:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleep().
 123:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 124:../../libtinyasuro/inc/asuro/time.h ****  */
 125:../../libtinyasuro/inc/asuro/time.h **** #define Sleep
 126:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 127:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für msleep().
 128:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 129:../../libtinyasuro/inc/asuro/time.h ****  *
 130:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 131:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for msleep().
 132:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 133:../../libtinyasuro/inc/asuro/time.h ****  */
 134:../../libtinyasuro/inc/asuro/time.h **** #define Msleep
 135:../../libtinyasuro/inc/asuro/time.h **** /** \if de
 136:../../libtinyasuro/inc/asuro/time.h ****  * Alias-Makro für sleepUntilInterrupt().
 137:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 138:../../libtinyasuro/inc/asuro/time.h ****  *
 139:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 140:../../libtinyasuro/inc/asuro/time.h ****  * Alias macro for sleepUntilInterrupt().
 141:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 142:../../libtinyasuro/inc/asuro/time.h ****  */
 143:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt
 144:../../libtinyasuro/inc/asuro/time.h **** #else
 145:../../libtinyasuro/inc/asuro/time.h **** #define Sleep               sleep
 146:../../libtinyasuro/inc/asuro/time.h **** #define Msleep              msleep
 147:../../libtinyasuro/inc/asuro/time.h **** #define SleepUntilInterrupt sleepUntilInterrupt
 148:../../libtinyasuro/inc/asuro/time.h **** #endif
 149:../../libtinyasuro/inc/asuro/time.h **** 
 150:../../libtinyasuro/inc/asuro/time.h **** /**
 151:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 152:../../libtinyasuro/inc/asuro/time.h ****  * Eine Zählvariable die im 36kHz-Takt (um eins) inkrementiert wird.
 153:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 154:../../libtinyasuro/inc/asuro/time.h ****  *
 155:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 156:../../libtinyasuro/inc/asuro/time.h ****  * A counting variable incremented from the 36kHz clock.
 157:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 158:../../libtinyasuro/inc/asuro/time.h ****  */
 159:../../libtinyasuro/inc/asuro/time.h **** extern volatile uint8_t tick36kHz; // counts from 0 to 255
 160:../../libtinyasuro/inc/asuro/time.h **** 
 161:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 162:../../libtinyasuro/inc/asuro/time.h **** /**
 163:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 164:../../libtinyasuro/inc/asuro/time.h ****  * Bietet die Möglichkeit, eine eigene Funktion bei jedem Aufruf der Timer-ISR
 165:../../libtinyasuro/inc/asuro/time.h ****  * auszuführen. Die interne Funktionalität bleibt dabei erhalten.
 166:../../libtinyasuro/inc/asuro/time.h ****  *
 167:../../libtinyasuro/inc/asuro/time.h ****  * Da die Timer-ISR mit einer Frequenz von 36kHz aufgerufen wird, sollte diese
 168:../../libtinyasuro/inc/asuro/time.h ****  * Funktion möglichst kurz sein.
 169:../../libtinyasuro/inc/asuro/time.h ****  *
 170:../../libtinyasuro/inc/asuro/time.h ****  * Der Aufruf erfolgt aus dem Kontext eines Interrupts!
 171:../../libtinyasuro/inc/asuro/time.h ****  *
 172:../../libtinyasuro/inc/asuro/time.h ****  * Ist (Timer2ISRHook == NULL), findet kein Aufruf statt.
 173:../../libtinyasuro/inc/asuro/time.h ****  *
 174:../../libtinyasuro/inc/asuro/time.h ****  * Diese Funktionalität steht nicht zur Verfügung, wenn TIMER2_ISR_HOOK_ENABLE
 175:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert ist.
 176:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 177:../../libtinyasuro/inc/asuro/time.h ****  *
 178:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 179:../../libtinyasuro/inc/asuro/time.h ****  * Offers the ability to execute a custom function in addition to the internal
 180:../../libtinyasuro/inc/asuro/time.h ****  * code of the timer ISR.
 181:../../libtinyasuro/inc/asuro/time.h ****  *
 182:../../libtinyasuro/inc/asuro/time.h ****  * Since the ISR will be executed with a frequency of 36kHz, the called function
 183:../../libtinyasuro/inc/asuro/time.h ****  * should be as short as possible.
 184:../../libtinyasuro/inc/asuro/time.h ****  *
 185:../../libtinyasuro/inc/asuro/time.h ****  * The function will be called from an interrupt context!
 186:../../libtinyasuro/inc/asuro/time.h ****  *
 187:../../libtinyasuro/inc/asuro/time.h ****  * No function call will be executed if (Timer2ISRHook == NULL).
 188:../../libtinyasuro/inc/asuro/time.h ****  *
 189:../../libtinyasuro/inc/asuro/time.h ****  * The timer hook feature is not available if TIMER2_ISR_HOOK_ENABLE has been
 190:../../libtinyasuro/inc/asuro/time.h ****  * disabled.
 191:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 192:../../libtinyasuro/inc/asuro/time.h ****  */
 193:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 194:../../libtinyasuro/inc/asuro/time.h **** #else  // !__DOXYGEN__
 195:../../libtinyasuro/inc/asuro/time.h **** #if TIMER2_ISR_HOOK_ENABLE
 196:../../libtinyasuro/inc/asuro/time.h **** extern ISRHookFunc_t *Timer2ISRHook;
 197:../../libtinyasuro/inc/asuro/time.h **** #endif
 198:../../libtinyasuro/inc/asuro/time.h **** #endif
 199:../../libtinyasuro/inc/asuro/time.h **** 
 200:../../libtinyasuro/inc/asuro/time.h **** /**
 201:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 202:../../libtinyasuro/inc/asuro/time.h ****  * Initialisiert das Modul und den als Zeitbasis und Taktgenerator für die
 203:../../libtinyasuro/inc/asuro/time.h ****  * Infrarotschnittstelle verwendeten Timer2.
 204:../../libtinyasuro/inc/asuro/time.h ****  *
 205:../../libtinyasuro/inc/asuro/time.h ****  * Nach der Initialisierung ist die Taktausgabe für die Infrarotschnittstelle
 206:../../libtinyasuro/inc/asuro/time.h ****  * deaktiviert.
 207:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 208:../../libtinyasuro/inc/asuro/time.h ****  *
 209:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 210:../../libtinyasuro/inc/asuro/time.h ****  * Initializes the module and timer2 which is used as time reference and clock
 211:../../libtinyasuro/inc/asuro/time.h ****  * source for the IR communications interface.
 212:../../libtinyasuro/inc/asuro/time.h ****  *
 213:../../libtinyasuro/inc/asuro/time.h ****  * The clock output for the IR interface will be in a disabled state after the
 214:../../libtinyasuro/inc/asuro/time.h ****  * initialization has been completed.
 215:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 216:../../libtinyasuro/inc/asuro/time.h ****  */
 217:../../libtinyasuro/inc/asuro/time.h **** extern void Timer2Init(void);
 218:../../libtinyasuro/inc/asuro/time.h **** 
 219:../../libtinyasuro/inc/asuro/time.h **** /**
 220:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 221:../../libtinyasuro/inc/asuro/time.h ****  * Aktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 222:../../libtinyasuro/inc/asuro/time.h ****  *
 223:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 224:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschänkt interruptfest. Es darf nicht "parallel" zu
 225:../../libtinyasuro/inc/asuro/time.h ****  * TIMER2_CLOCK_OUT_DISABLE() ausgeführt werden.
 226:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 227:../../libtinyasuro/inc/asuro/time.h ****  *
 228:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 229:../../libtinyasuro/inc/asuro/time.h ****  * Enables the 36kHz carrier signal for the IR communications interface.
 230:../../libtinyasuro/inc/asuro/time.h ****  *
 231:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 232:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 233:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_DISABLE().
 234:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 235:../../libtinyasuro/inc/asuro/time.h ****  */
 236:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 237:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE()
 238:../../libtinyasuro/inc/asuro/time.h **** #else
 239:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_ENABLE() \
 240:../../libtinyasuro/inc/asuro/time.h ****     do { /* Fast PWM, BOTTOM: Clear, CompMatch: Set */ \
 241:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21); \
 242:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 243:../../libtinyasuro/inc/asuro/time.h **** #endif
 244:../../libtinyasuro/inc/asuro/time.h **** 
 245:../../libtinyasuro/inc/asuro/time.h **** /**
 246:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 247:../../libtinyasuro/inc/asuro/time.h ****  * Deaktiviert die Ausgabe des 36kHz-Signals für die Infrarotschnittstelle.
 248:../../libtinyasuro/inc/asuro/time.h ****  *
 249:../../libtinyasuro/inc/asuro/time.h ****  * @par Wichtiger Hinweis:
 250:../../libtinyasuro/inc/asuro/time.h ****  * Dieses Makro ist nur eingeschränkt interruptfest. Es darf nicht "parallel"
 251:../../libtinyasuro/inc/asuro/time.h ****  * zu TIMER2_CLOCK_OUT_ENABLE() ausgeführt werden.
 252:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 253:../../libtinyasuro/inc/asuro/time.h ****  *
 254:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 255:../../libtinyasuro/inc/asuro/time.h ****  * Disables the 36kHz carrier signal for the IR communications interface.
 256:../../libtinyasuro/inc/asuro/time.h ****  *
 257:../../libtinyasuro/inc/asuro/time.h ****  * @par Important:
 258:../../libtinyasuro/inc/asuro/time.h ****  * This macro is interrupt-safe except for one restriction. It must not be
 259:../../libtinyasuro/inc/asuro/time.h ****  * executed in parallel to TIMER2_CLOCK_OUT_ENABLE().
 260:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 261:../../libtinyasuro/inc/asuro/time.h ****  */
 262:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 263:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE()
 264:../../libtinyasuro/inc/asuro/time.h **** #else
 265:../../libtinyasuro/inc/asuro/time.h **** #define TIMER2_CLOCK_OUT_DISABLE() \
 266:../../libtinyasuro/inc/asuro/time.h ****     do { /* PWM off */ \
 267:../../libtinyasuro/inc/asuro/time.h ****         TCCR2 &= ~((1 << WGM20) | (1 << WGM21) | (1 << COM20) | (1 << COM21)); \
 268:../../libtinyasuro/inc/asuro/time.h ****     } while (false)
 269:../../libtinyasuro/inc/asuro/time.h **** #endif
 270:../../libtinyasuro/inc/asuro/time.h **** 
 271:../../libtinyasuro/inc/asuro/time.h **** /**
 272:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 273:../../libtinyasuro/inc/asuro/time.h ****  * Hält den Programmfluss für die vorgegebene Anzahl 36kHz-Takte an und schickt
 274:../../libtinyasuro/inc/asuro/time.h ****  * den Prozessor währendessen in den Idle-Mode.
 275:../../libtinyasuro/inc/asuro/time.h ****  *
 276:../../libtinyasuro/inc/asuro/time.h ****  * Alle Interrupts bleiben aktiv und werden ausgeführt, ledliglich der
 277:../../libtinyasuro/inc/asuro/time.h ****  * aufrufende Programmpfad wird unterbrochen.
 278:../../libtinyasuro/inc/asuro/time.h ****  *
 279:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 280:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 281:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 282:../../libtinyasuro/inc/asuro/time.h ****  *
 283:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks die Anzahl der 36kHz-Takte die der Prozessor
 284:../../libtinyasuro/inc/asuro/time.h ****  *                         "schlafen" soll
 285:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 286:../../libtinyasuro/inc/asuro/time.h ****  *
 287:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 288:../../libtinyasuro/inc/asuro/time.h ****  * Delays the execution for the specified amount of time, measured in 36kHz
 289:../../libtinyasuro/inc/asuro/time.h ****  * ticks. The microcontroller will halted (idle mode) during this time.
 290:../../libtinyasuro/inc/asuro/time.h ****  *
 291:../../libtinyasuro/inc/asuro/time.h ****  * All interrupt requests remain active and will be executed, the calling
 292:../../libtinyasuro/inc/asuro/time.h ****  * function itself remains halted.
 293:../../libtinyasuro/inc/asuro/time.h ****  *
 294:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 295:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 296:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 297:../../libtinyasuro/inc/asuro/time.h ****  *
 298:../../libtinyasuro/inc/asuro/time.h ****  * @param timer36kHz_ticks the number of 36kHz ticks the microcontroller will
 299:../../libtinyasuro/inc/asuro/time.h ****  *                         be halted.
 300:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 301:../../libtinyasuro/inc/asuro/time.h ****  */
 302:../../libtinyasuro/inc/asuro/time.h **** extern void sleep(uint8_t timer36kHz_ticks);
 303:../../libtinyasuro/inc/asuro/time.h **** /**
 304:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 305:../../libtinyasuro/inc/asuro/time.h ****  * Schickt den Prozessor in den Idle-Mode und kehrt zurück, nachdem ein
 306:../../libtinyasuro/inc/asuro/time.h ****  * Interrupt ausgelöst wurde.
 307:../../libtinyasuro/inc/asuro/time.h ****  *
 308:../../libtinyasuro/inc/asuro/time.h ****  * Wenn diese Funktion aufgerufen wird, geht sie davon aus, dass Interrupts
 309:../../libtinyasuro/inc/asuro/time.h ****  * global freigeschaltet sind - wenn nicht findet die globale Interruptfreigabe
 310:../../libtinyasuro/inc/asuro/time.h ****  * vor Eintritt in den Idle-Mode statt.
 311:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 312:../../libtinyasuro/inc/asuro/time.h ****  *
 313:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 314:../../libtinyasuro/inc/asuro/time.h ****  * Puts the microcontroller into idle mode until the next interrupt occurs.
 315:../../libtinyasuro/inc/asuro/time.h ****  *
 316:../../libtinyasuro/inc/asuro/time.h ****  * This function expects interrupts to be globally enabled if it gets called.
 317:../../libtinyasuro/inc/asuro/time.h ****  * If not, the global interrupt enable bit will be set before entering the sleep
 318:../../libtinyasuro/inc/asuro/time.h ****  * mode and remain in this state after the function returns.
 319:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 320:../../libtinyasuro/inc/asuro/time.h ****  */
 321:../../libtinyasuro/inc/asuro/time.h **** extern void sleepUntilInterrupt(void);
 322:../../libtinyasuro/inc/asuro/time.h **** 
 323:../../libtinyasuro/inc/asuro/time.h **** /**
 324:../../libtinyasuro/inc/asuro/time.h ****  * \if de
 325:../../libtinyasuro/inc/asuro/time.h ****  * Verhält sich wie sleep(), verwendet als Zeitbasis aber Millisekunden
 326:../../libtinyasuro/inc/asuro/time.h ****  *
 327:../../libtinyasuro/inc/asuro/time.h ****  * @param ms die Anzahl der Millisekunden die der Prozessor "schlafend"
 328:../../libtinyasuro/inc/asuro/time.h ****  *           verbringen soll
 329:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 330:../../libtinyasuro/inc/asuro/time.h ****  *
 331:../../libtinyasuro/inc/asuro/time.h ****  * \if en
 332:../../libtinyasuro/inc/asuro/time.h ****  * Behaves like sleep() but uses milliseconds as timebase.
 333:../../libtinyasuro/inc/asuro/time.h ****  *
 334:../../libtinyasuro/inc/asuro/time.h ****  * @param ms the time the microcontroller will be halted, measured in
 335:../../libtinyasuro/inc/asuro/time.h ****  *           milliseconds
 336:../../libtinyasuro/inc/asuro/time.h ****  * \endif
 337:../../libtinyasuro/inc/asuro/time.h ****  */
 338:../../libtinyasuro/inc/asuro/time.h **** #ifdef __DOXYGEN__
 339:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms);
 340:../../libtinyasuro/inc/asuro/time.h **** #else
 341:../../libtinyasuro/inc/asuro/time.h **** static ALWAYS_INLINE void msleep(uint16_t ms);
 342:../../libtinyasuro/inc/asuro/time.h **** #endif
 343:../../libtinyasuro/inc/asuro/time.h **** 
 344:../../libtinyasuro/inc/asuro/time.h **** void msleep(uint16_t ms) {
 345:../../libtinyasuro/inc/asuro/time.h ****     for (; ms > 0; ms--) {
 346:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 147               		.loc 2 346 0
 148 008a 84E2      		ldi r24,lo8(36)	 ;  87	movqi_insn/2	[length = 1]
 149 008c 00D0      		rcall sleep	 ;  88	call_insn/2	[length = 1]
 150               	.LVL16:
 151 008e 81E0      		ldi r24,1	 ;  92	addhi3_clobber/3	[length = 3]
 152 0090 481A      		sub r4,r24
 153 0092 5108      		sbc r5,__zero_reg__
 154               	.LVL17:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 155               		.loc 2 345 0
 156 0094 4114      		cp r4,__zero_reg__	 ;  93	*cmphi/2	[length = 2]
 157 0096 5104      		cpc r5,__zero_reg__
 158 0098 01F4      		brne .L5	 ;  94	branch	[length = 1]
 159               	.LBE21:
 160               	.LBE20:
  69:main.c        **** 		msleep(120);
  70:main.c        **** 						
  71:main.c        **** 		//LED Steuerung
  72:main.c        **** 		
  73:main.c        **** 		if(left > right){
 161               		.loc 1 73 0
 162 009a E016      		cp r14,r16	 ;  103	*cmphi/3	[length = 2]
 163 009c F106      		cpc r15,r17
 164 009e 04F4      		brge .L6	 ;  104	branch	[length = 1]
  74:main.c        **** 			BackLED(OFF,ON);
 165               		.loc 1 74 0
 166 00a0 61E0      		ldi r22,lo8(1)	 ;  106	movqi_insn/2	[length = 1]
 167 00a2 80E0      		ldi r24,0	 ;  107	movqi_insn/1	[length = 1]
 168 00a4 00D0      		rcall BackLED	 ;  108	call_insn/2	[length = 1]
 169               	.LVL18:
 170               	.L6:
  75:main.c        **** 		}
  76:main.c        **** 		if(right > left){
 171               		.loc 1 76 0
 172 00a6 0E15      		cp r16,r14	 ;  111	*cmphi/3	[length = 2]
 173 00a8 1F05      		cpc r17,r15
 174 00aa 04F4      		brge .L7	 ;  112	branch	[length = 1]
  77:main.c        **** 			BackLED(ON,OFF);
 175               		.loc 1 77 0
 176 00ac 60E0      		ldi r22,0	 ;  114	movqi_insn/1	[length = 1]
 177 00ae 81E0      		ldi r24,lo8(1)	 ;  115	movqi_insn/2	[length = 1]
 178 00b0 00D0      		rcall BackLED	 ;  116	call_insn/2	[length = 1]
 179               	.LVL19:
 180               	.L7:
  78:main.c        **** 		}
  79:main.c        **** 		if(right == left){
 181               		.loc 1 79 0
 182 00b2 E016      		cp r14,r16	 ;  119	*cmphi/3	[length = 2]
 183 00b4 F106      		cpc r15,r17
 184 00b6 01F4      		brne .L8	 ;  120	branch	[length = 1]
  80:main.c        **** 			BackLED(ON,ON);
 185               		.loc 1 80 0
 186 00b8 61E0      		ldi r22,lo8(1)	 ;  122	movqi_insn/2	[length = 1]
 187 00ba 81E0      		ldi r24,lo8(1)	 ;  123	movqi_insn/2	[length = 1]
 188 00bc 00D0      		rcall BackLED	 ;  124	call_insn/2	[length = 1]
 189               	.LVL20:
 190               	.L8:
  81:main.c        **** 		}
  82:main.c        **** 		if(right && left < 80){
 191               		.loc 1 82 0
 192 00be E114      		cp r14,__zero_reg__	 ;  127	*cmphi/2	[length = 2]
 193 00c0 F104      		cpc r15,__zero_reg__
 194 00c2 01F0      		breq .L10	 ;  128	branch	[length = 1]
 195               		.loc 1 82 0 is_stmt 0 discriminator 1
 196 00c4 0035      		cpi r16,80	 ;  134	*cmphi/6	[length = 2]
 197 00c6 1105      		cpc r17,__zero_reg__
 198 00c8 04F4      		brge .L11	 ;  135	branch	[length = 1]
  83:main.c        **** 			StatusLED(RED);
 199               		.loc 1 83 0 is_stmt 1
 200 00ca 82E0      		ldi r24,lo8(2)	 ;  137	movqi_insn/2	[length = 1]
 201 00cc 00D0      		rcall StatusLED	 ;  138	call_insn/2	[length = 1]
 202               	.LVL21:
 203               	.L11:
  84:main.c        **** 		}
  85:main.c        **** 		if(80 < right && left < 120){
 204               		.loc 1 85 0
 205 00ce 81E5      		ldi r24,81	 ;  141	*cmphi/7	[length = 3]
 206 00d0 E816      		cp r14,r24
 207 00d2 F104      		cpc r15,__zero_reg__
 208 00d4 04F0      		brlt .L12	 ;  142	branch	[length = 1]
 209               		.loc 1 85 0 is_stmt 0 discriminator 1
 210 00d6 0837      		cpi r16,120	 ;  144	*cmphi/6	[length = 2]
 211 00d8 1105      		cpc r17,__zero_reg__
 212 00da 04F4      		brge .L12	 ;  145	branch	[length = 1]
  86:main.c        **** 			StatusLED(YELLOW);
 213               		.loc 1 86 0 is_stmt 1
 214 00dc 83E0      		ldi r24,lo8(3)	 ;  147	movqi_insn/2	[length = 1]
 215 00de 00D0      		rcall StatusLED	 ;  148	call_insn/2	[length = 1]
 216               	.LVL22:
 217               	.L12:
  87:main.c        **** 		}
  88:main.c        **** 		if(right && left > 120){
 218               		.loc 1 88 0 discriminator 1
 219 00e0 0937      		cpi r16,121	 ;  154	*cmphi/6	[length = 2]
 220 00e2 1105      		cpc r17,__zero_reg__
 221 00e4 04F0      		brlt .L10	 ;  155	branch	[length = 1]
  89:main.c        **** 			StatusLED(GREEN);
 222               		.loc 1 89 0
 223 00e6 81E0      		ldi r24,lo8(1)	 ;  157	movqi_insn/2	[length = 1]
 224 00e8 00D0      		rcall StatusLED	 ;  158	call_insn/2	[length = 1]
 225               	.LVL23:
 226               	.L10:
  90:main.c        **** 		}
  91:main.c        **** 		
  92:main.c        **** 			if(x == 3000){
 227               		.loc 1 92 0
 228 00ea 88EB      		ldi r24,-72	 ;  161	*cmphi/7	[length = 4]
 229 00ec C816      		cp r12,r24
 230 00ee 8BE0      		ldi r24,11
 231 00f0 D806      		cpc r13,r24
 232 00f2 01F4      		brne .L15	 ;  162	branch	[length = 1]
  93:main.c        **** 				FrontLED(ON);
 233               		.loc 1 93 0
 234 00f4 81E0      		ldi r24,lo8(1)	 ;  164	movqi_insn/2	[length = 1]
 235 00f6 00D0      		rcall FrontLED	 ;  165	call_insn/2	[length = 1]
 236               	.LVL24:
  94:main.c        **** 				x=0;
 237               		.loc 1 94 0
 238 00f8 C12C      		mov r12,__zero_reg__	 ;  10	*movhi/2	[length = 2]
 239 00fa D12C      		mov r13,__zero_reg__
 240 00fc 00C0      		rjmp .L16	 ;  486	jump	[length = 1]
 241               	.LVL25:
 242               	.L15:
  95:main.c        **** 		    }
  96:main.c        **** 		    if(x == 15){				
 243               		.loc 1 96 0
 244 00fe 8FE0      		ldi r24,15	 ;  173	*cmphi/7	[length = 3]
 245 0100 C816      		cp r12,r24
 246 0102 D104      		cpc r13,__zero_reg__
 247 0104 01F4      		brne .L16	 ;  174	branch	[length = 1]
  97:main.c        **** 				FrontLED(OFF);
 248               		.loc 1 97 0
 249 0106 80E0      		ldi r24,0	 ;  176	movqi_insn/1	[length = 1]
 250 0108 00D0      		rcall FrontLED	 ;  177	call_insn/2	[length = 1]
 251               	.LVL26:
  98:main.c        **** 				x++;
 252               		.loc 1 98 0
 253 010a 80E1      		ldi r24,lo8(16)	 ;  476	*reload_inhi	[length = 3]
 254 010c C82E      		mov r12,r24
 255 010e D12C      		mov r13,__zero_reg__
 256 0110 00C0      		rjmp .L17	 ;  488	jump	[length = 1]
 257               	.LVL27:
 258               	.L16:
  99:main.c        **** 			}
 100:main.c        **** 			else{
 101:main.c        **** 				x++;
 259               		.loc 1 101 0
 260 0112 8FEF      		ldi r24,-1	 ;  184	addhi3_clobber/3	[length = 3]
 261 0114 C81A      		sub r12,r24
 262 0116 D80A      		sbc r13,r24
 263               	.LVL28:
 264               	.L17:
 265 0118 872D      		mov r24,r7	 ;  465	movqi_insn/1	[length = 1]
 266 011a 8271      		andi r24,lo8(18)	 ;  189	andqi3/2	[length = 1]
 102:main.c        **** 			}
 103:main.c        **** 			
 104:main.c        **** 			
 105:main.c        **** 		
 106:main.c        **** 		//Rückfahrt
 107:main.c        **** 		
 108:main.c        **** 		if (a_pressed || b_pressed > 0) {
 267               		.loc 1 108 0
 268 011c 01F0      		breq .L18	 ;  191	branch	[length = 1]
 109:main.c        **** 			StatusLED(RED);
 269               		.loc 1 109 0
 270 011e 82E0      		ldi r24,lo8(2)	 ;  193	movqi_insn/2	[length = 1]
 271 0120 00D0      		rcall StatusLED	 ;  194	call_insn/2	[length = 1]
 272               	.LVL29:
 110:main.c        **** 			BackLED(OFF,ON);
 273               		.loc 1 110 0
 274 0122 61E0      		ldi r22,lo8(1)	 ;  195	movqi_insn/2	[length = 1]
 275 0124 80E0      		ldi r24,0	 ;  196	movqi_insn/1	[length = 1]
 276 0126 00D0      		rcall BackLED	 ;  197	call_insn/2	[length = 1]
 277               	.LVL30:
 278               	.LBB22:
 279               	.LBB23:
 280               		.loc 2 346 0
 281 0128 84E2      		ldi r24,lo8(36)	 ;  200	movqi_insn/2	[length = 1]
 282 012a 00D0      		rcall sleep	 ;  201	call_insn/2	[length = 1]
 283               	.LVL31:
 284               	.LBE23:
 285               	.LBE22:
 111:main.c        **** 			msleep(1);
 112:main.c        **** 			BackLED(ON,OFF);
 286               		.loc 1 112 0
 287 012c 60E0      		ldi r22,0	 ;  204	movqi_insn/1	[length = 1]
 288 012e 81E0      		ldi r24,lo8(1)	 ;  205	movqi_insn/2	[length = 1]
 289 0130 00D0      		rcall BackLED	 ;  206	call_insn/2	[length = 1]
 290               	.LVL32:
 113:main.c        **** 			MotorDir(RWD,RWD);
 291               		.loc 1 113 0
 292 0132 60E1      		ldi r22,lo8(16)	 ;  207	movqi_insn/2	[length = 1]
 293 0134 80E1      		ldi r24,lo8(16)	 ;  208	movqi_insn/2	[length = 1]
 294 0136 00D0      		rcall MotorDir	 ;  209	call_insn/2	[length = 1]
 295               	.LVL33:
 114:main.c        **** 			MotorSpeed(120,120);
 296               		.loc 1 114 0
 297 0138 68E7      		ldi r22,lo8(120)	 ;  210	movqi_insn/2	[length = 1]
 298 013a 88E7      		ldi r24,lo8(120)	 ;  211	movqi_insn/2	[length = 1]
 299 013c 00D0      		rcall MotorSpeed	 ;  212	call_insn/2	[length = 1]
 300               	.LVL34:
 301 013e 08E5      		ldi r16,lo8(88)	 ;  421	*movhi/5	[length = 2]
 302 0140 12E0      		ldi r17,lo8(2)
 303               	.LVL35:
 304               	.L20:
 305               	.LBB24:
 306               	.LBB25:
 307               		.loc 2 346 0
 308 0142 84E2      		ldi r24,lo8(36)	 ;  217	movqi_insn/2	[length = 1]
 309 0144 00D0      		rcall sleep	 ;  218	call_insn/2	[length = 1]
 310               	.LVL36:
 311 0146 0150      		subi r16,1	 ;  222	addhi3_clobber/2	[length = 2]
 312 0148 1109      		sbc r17,__zero_reg__
 313               	.LVL37:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 314               		.loc 2 345 0
 315 014a 0115      		cp r16,__zero_reg__	 ;  223	*cmphi/2	[length = 2]
 316 014c 1105      		cpc r17,__zero_reg__
 317 014e 01F4      		brne .L20	 ;  224	branch	[length = 1]
 318               	.LBE25:
 319               	.LBE24:
 115:main.c        **** 			msleep(600);
 116:main.c        **** 			MotorDir(BREAK,BREAK);
 320               		.loc 1 116 0
 321 0150 60E0      		ldi r22,0	 ;  233	movqi_insn/1	[length = 1]
 322 0152 80E0      		ldi r24,0	 ;  234	movqi_insn/1	[length = 1]
 323 0154 00D0      		rcall MotorDir	 ;  235	call_insn/2	[length = 1]
 324               	.LVL38:
 325               	.L18:
 326 0156 872D      		mov r24,r7	 ;  466	movqi_insn/1	[length = 1]
 327 0158 8970      		andi r24,lo8(9)	 ;  238	andqi3/2	[length = 1]
 117:main.c        **** 		}
 118:main.c        **** 		
 119:main.c        **** 		if (c_pressed || d_pressed > 0) {
 328               		.loc 1 119 0
 329 015a 01F0      		breq .L21	 ;  240	branch	[length = 1]
 120:main.c        **** 			StatusLED(RED);
 330               		.loc 1 120 0
 331 015c 82E0      		ldi r24,lo8(2)	 ;  242	movqi_insn/2	[length = 1]
 332 015e 00D0      		rcall StatusLED	 ;  243	call_insn/2	[length = 1]
 333               	.LVL39:
 121:main.c        **** 			BackLED(OFF,ON);
 334               		.loc 1 121 0
 335 0160 61E0      		ldi r22,lo8(1)	 ;  244	movqi_insn/2	[length = 1]
 336 0162 80E0      		ldi r24,0	 ;  245	movqi_insn/1	[length = 1]
 337 0164 00D0      		rcall BackLED	 ;  246	call_insn/2	[length = 1]
 338               	.LVL40:
 339               	.LBB26:
 340               	.LBB27:
 341               		.loc 2 346 0
 342 0166 84E2      		ldi r24,lo8(36)	 ;  249	movqi_insn/2	[length = 1]
 343 0168 00D0      		rcall sleep	 ;  250	call_insn/2	[length = 1]
 344               	.LVL41:
 345               	.LBE27:
 346               	.LBE26:
 122:main.c        **** 			msleep(1);
 123:main.c        **** 			BackLED(ON,OFF);
 347               		.loc 1 123 0
 348 016a 60E0      		ldi r22,0	 ;  253	movqi_insn/1	[length = 1]
 349 016c 81E0      		ldi r24,lo8(1)	 ;  254	movqi_insn/2	[length = 1]
 350 016e 00D0      		rcall BackLED	 ;  255	call_insn/2	[length = 1]
 351               	.LVL42:
 124:main.c        **** 			MotorDir(RWD,RWD);
 352               		.loc 1 124 0
 353 0170 60E1      		ldi r22,lo8(16)	 ;  256	movqi_insn/2	[length = 1]
 354 0172 80E1      		ldi r24,lo8(16)	 ;  257	movqi_insn/2	[length = 1]
 355 0174 00D0      		rcall MotorDir	 ;  258	call_insn/2	[length = 1]
 356               	.LVL43:
 125:main.c        **** 			MotorSpeed(120,60);
 357               		.loc 1 125 0
 358 0176 6CE3      		ldi r22,lo8(60)	 ;  259	movqi_insn/2	[length = 1]
 359 0178 88E7      		ldi r24,lo8(120)	 ;  260	movqi_insn/2	[length = 1]
 360 017a 00D0      		rcall MotorSpeed	 ;  261	call_insn/2	[length = 1]
 361               	.LVL44:
 362 017c 08E5      		ldi r16,lo8(88)	 ;  422	*movhi/5	[length = 2]
 363 017e 12E0      		ldi r17,lo8(2)
 364               	.LVL45:
 365               	.L23:
 366               	.LBB28:
 367               	.LBB29:
 368               		.loc 2 346 0
 369 0180 84E2      		ldi r24,lo8(36)	 ;  266	movqi_insn/2	[length = 1]
 370 0182 00D0      		rcall sleep	 ;  267	call_insn/2	[length = 1]
 371               	.LVL46:
 372 0184 0150      		subi r16,1	 ;  271	addhi3_clobber/2	[length = 2]
 373 0186 1109      		sbc r17,__zero_reg__
 374               	.LVL47:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 375               		.loc 2 345 0
 376 0188 0115      		cp r16,__zero_reg__	 ;  272	*cmphi/2	[length = 2]
 377 018a 1105      		cpc r17,__zero_reg__
 378 018c 01F4      		brne .L23	 ;  273	branch	[length = 1]
 379               	.LBE29:
 380               	.LBE28:
 126:main.c        **** 			msleep(600);
 127:main.c        **** 			MotorDir(BREAK,BREAK);
 381               		.loc 1 127 0
 382 018e 60E0      		ldi r22,0	 ;  282	movqi_insn/1	[length = 1]
 383 0190 80E0      		ldi r24,0	 ;  283	movqi_insn/1	[length = 1]
 384 0192 00D0      		rcall MotorDir	 ;  284	call_insn/2	[length = 1]
 385               	.LVL48:
 386               	.L21:
 387 0194 872D      		mov r24,r7	 ;  467	movqi_insn/1	[length = 1]
 388 0196 8472      		andi r24,lo8(36)	 ;  287	andqi3/2	[length = 1]
 128:main.c        **** 		}
 129:main.c        **** 		
 130:main.c        **** 		if (e_pressed || f_pressed > 0) {
 389               		.loc 1 130 0
 390 0198 01F0      		breq .L24	 ;  289	branch	[length = 1]
 131:main.c        **** 			StatusLED(RED);
 391               		.loc 1 131 0
 392 019a 82E0      		ldi r24,lo8(2)	 ;  291	movqi_insn/2	[length = 1]
 393 019c 00D0      		rcall StatusLED	 ;  292	call_insn/2	[length = 1]
 394               	.LVL49:
 132:main.c        **** 			BackLED(OFF,ON);
 395               		.loc 1 132 0
 396 019e 61E0      		ldi r22,lo8(1)	 ;  293	movqi_insn/2	[length = 1]
 397 01a0 80E0      		ldi r24,0	 ;  294	movqi_insn/1	[length = 1]
 398 01a2 00D0      		rcall BackLED	 ;  295	call_insn/2	[length = 1]
 399               	.LVL50:
 400               	.LBB30:
 401               	.LBB31:
 402               		.loc 2 346 0
 403 01a4 84E2      		ldi r24,lo8(36)	 ;  298	movqi_insn/2	[length = 1]
 404 01a6 00D0      		rcall sleep	 ;  299	call_insn/2	[length = 1]
 405               	.LVL51:
 406               	.LBE31:
 407               	.LBE30:
 133:main.c        **** 			msleep(1);
 134:main.c        **** 			BackLED(ON,OFF);
 408               		.loc 1 134 0
 409 01a8 60E0      		ldi r22,0	 ;  302	movqi_insn/1	[length = 1]
 410 01aa 81E0      		ldi r24,lo8(1)	 ;  303	movqi_insn/2	[length = 1]
 411 01ac 00D0      		rcall BackLED	 ;  304	call_insn/2	[length = 1]
 412               	.LVL52:
 135:main.c        **** 			MotorDir(RWD,RWD);
 413               		.loc 1 135 0
 414 01ae 60E1      		ldi r22,lo8(16)	 ;  305	movqi_insn/2	[length = 1]
 415 01b0 80E1      		ldi r24,lo8(16)	 ;  306	movqi_insn/2	[length = 1]
 416 01b2 00D0      		rcall MotorDir	 ;  307	call_insn/2	[length = 1]
 417               	.LVL53:
 136:main.c        **** 			MotorSpeed(60,120);
 418               		.loc 1 136 0
 419 01b4 68E7      		ldi r22,lo8(120)	 ;  308	movqi_insn/2	[length = 1]
 420 01b6 8CE3      		ldi r24,lo8(60)	 ;  309	movqi_insn/2	[length = 1]
 421 01b8 00D0      		rcall MotorSpeed	 ;  310	call_insn/2	[length = 1]
 422               	.LVL54:
 423 01ba 08E5      		ldi r16,lo8(88)	 ;  423	*movhi/5	[length = 2]
 424 01bc 12E0      		ldi r17,lo8(2)
 425               	.LVL55:
 426               	.L26:
 427               	.LBB32:
 428               	.LBB33:
 429               		.loc 2 346 0
 430 01be 84E2      		ldi r24,lo8(36)	 ;  315	movqi_insn/2	[length = 1]
 431 01c0 00D0      		rcall sleep	 ;  316	call_insn/2	[length = 1]
 432               	.LVL56:
 433 01c2 0150      		subi r16,1	 ;  320	addhi3_clobber/2	[length = 2]
 434 01c4 1109      		sbc r17,__zero_reg__
 435               	.LVL57:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 436               		.loc 2 345 0
 437 01c6 0115      		cp r16,__zero_reg__	 ;  321	*cmphi/2	[length = 2]
 438 01c8 1105      		cpc r17,__zero_reg__
 439 01ca 01F4      		brne .L26	 ;  322	branch	[length = 1]
 440               	.LBE33:
 441               	.LBE32:
 137:main.c        **** 			msleep(600);
 138:main.c        **** 			MotorDir(BREAK,BREAK);
 442               		.loc 1 138 0
 443 01cc 60E0      		ldi r22,0	 ;  331	movqi_insn/1	[length = 1]
 444 01ce 80E0      		ldi r24,0	 ;  332	movqi_insn/1	[length = 1]
 445 01d0 00D0      		rcall MotorDir	 ;  333	call_insn/2	[length = 1]
 446               	.LVL58:
 447               	.L24:
 139:main.c        **** 		}
 140:main.c        **** 		
 141:main.c        **** 		if(counter>30){
 448               		.loc 1 141 0
 449 01d2 8FE1      		ldi r24,31	 ;  336	*cmphi/7	[length = 3]
 450 01d4 A816      		cp r10,r24
 451 01d6 B104      		cpc r11,__zero_reg__
 452 01d8 04F0      		brlt .L27	 ;  337	branch	[length = 1]
 142:main.c        **** 			MotorSpeed(60,60);
 453               		.loc 1 142 0
 454 01da 6CE3      		ldi r22,lo8(60)	 ;  339	movqi_insn/2	[length = 1]
 455 01dc 8CE3      		ldi r24,lo8(60)	 ;  340	movqi_insn/2	[length = 1]
 456 01de 00D0      		rcall MotorSpeed	 ;  341	call_insn/2	[length = 1]
 457               	.LVL59:
 458 01e0 0CE3      		ldi r16,lo8(60)	 ;  15	*movhi/5	[length = 2]
 459 01e2 10E0      		ldi r17,0
 460               	.LVL60:
 461               	.L29:
 462               	.LBB34:
 463               	.LBB35:
 464               		.loc 2 346 0
 465 01e4 84E2      		ldi r24,lo8(36)	 ;  346	movqi_insn/2	[length = 1]
 466 01e6 00D0      		rcall sleep	 ;  347	call_insn/2	[length = 1]
 467               	.LVL61:
 468 01e8 0150      		subi r16,1	 ;  351	addhi3_clobber/2	[length = 2]
 469 01ea 1109      		sbc r17,__zero_reg__
 470               	.LVL62:
 345:../../libtinyasuro/inc/asuro/time.h ****         sleep(36);
 471               		.loc 2 345 0
 472 01ec 0115      		cp r16,__zero_reg__	 ;  352	*cmphi/2	[length = 2]
 473 01ee 1105      		cpc r17,__zero_reg__
 474 01f0 01F4      		brne .L29	 ;  353	branch	[length = 1]
 475 01f2 00C0      		rjmp .L46	 ;  492	jump	[length = 1]
 476               	.LVL63:
 477               	.L27:
 478               	.LBE35:
 479               	.LBE34:
 143:main.c        **** 			msleep(60);
 144:main.c        **** 			counter=0;
 145:main.c        **** 			
 146:main.c        **** 			
 147:main.c        **** 			}else{
 148:main.c        **** 			counter++;	
 480               		.loc 1 148 0
 481 01f4 8FEF      		ldi r24,-1	 ;  362	addhi3_clobber/3	[length = 3]
 482 01f6 A81A      		sub r10,r24
 483 01f8 B80A      		sbc r11,r24
 484               	.LVL64:
 485 01fa 00C0      		rjmp .L30	 ;  494	jump	[length = 1]
 486               	.LVL65:
 487               	.L46:
 144:main.c        **** 			
 488               		.loc 1 144 0
 489 01fc A12C      		mov r10,__zero_reg__	 ;  16	*movhi/2	[length = 2]
 490 01fe B12C      		mov r11,__zero_reg__
 491               	.LVL66:
 492               	.LBE19:
 149:main.c        **** 			
 150:main.c        **** 			
 151:main.c        **** 			}
 152:main.c        **** 		
 153:main.c        **** 		
 154:main.c        **** 		
 155:main.c        **** 		
 156:main.c        **** 		
 157:main.c        **** 		
 158:main.c        **** 		
 159:main.c        **** 		
 160:main.c        **** 		
 161:main.c        **** 	}
 493               		.loc 1 161 0
 494 0200 00C0      		rjmp .L30	 ;  496	jump	[length = 1]
 495               		.cfi_endproc
 496               	.LFE2:
 498               		.text
 499               	.Letext0:
 500               		.file 3 "/usr/lib/avr/include/stdint.h"
 501               		.file 4 "../../libtinyasuro/inc/asuro/sensors.h"
 502               		.file 5 "../../libtinyasuro/inc/asuro/motor.h"
 503               		.file 6 "../../libtinyasuro/inc/asuro/led.h"
 504               		.file 7 "../../libtinyasuro/inc/asuro/switches.h"
 505               		.file 8 "../../libtinyasuro/inc/asuro/asuro.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccllHqeH.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccllHqeH.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccllHqeH.s:4      *ABS*:0000003f __SREG__
     /tmp/ccllHqeH.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccllHqeH.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccllHqeH.s:13     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
Init
LineData
PollSwitch
__divmodhi4
MotorDir
MotorSpeed
sleep
BackLED
StatusLED
FrontLED
