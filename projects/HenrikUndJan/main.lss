
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ec  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000180  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000483  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ea  00000000  00000000  000006ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000997  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011e  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	46 c0       	rjmp	.+140    	; 0x96 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	51 c0       	rjmp	.+162    	; 0xe8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
	//}
	void main (void){
		while(1){
		
		
		MotorDir(FWD,BWD);
  48:	60 e1       	ldi	r22, 0x10	; 16
  4a:	80 e2       	ldi	r24, 0x20	; 32
  4c:	11 d0       	rcall	.+34     	; 0x70 <MotorDir>
		MotorSpeed(160,160);
  4e:	60 ea       	ldi	r22, 0xA0	; 160
  50:	80 ea       	ldi	r24, 0xA0	; 160
  52:	1a d0       	rcall	.+52     	; 0x88 <MotorSpeed>
  54:	c8 ec       	ldi	r28, 0xC8	; 200
  56:	d0 e0       	ldi	r29, 0x00	; 0
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  58:	84 e2       	ldi	r24, 0x24	; 36
  5a:	31 d0       	rcall	.+98     	; 0xbe <sleep>
  5c:	21 97       	sbiw	r28, 0x01	; 1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  5e:	20 97       	sbiw	r28, 0x00	; 0
  60:	d9 f7       	brne	.-10     	; 0x58 <main+0x10>
		msleep(200);
		MotorDir(BWD,FWD);
  62:	60 e2       	ldi	r22, 0x20	; 32
  64:	80 e1       	ldi	r24, 0x10	; 16
  66:	04 d0       	rcall	.+8      	; 0x70 <MotorDir>
		MotorSpeed(160,160);
  68:	60 ea       	ldi	r22, 0xA0	; 160
  6a:	80 ea       	ldi	r24, 0xA0	; 160
  6c:	0d d0       	rcall	.+26     	; 0x88 <MotorSpeed>
		
	}
  6e:	ec cf       	rjmp	.-40     	; 0x48 <main>

00000070 <MotorDir>:
  70:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  72:	f8 94       	cli
  74:	92 b3       	in	r25, 0x12	; 18
  76:	9f 7c       	andi	r25, 0xCF	; 207
  78:	89 2b       	or	r24, r25
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	8f 7c       	andi	r24, 0xCF	; 207
  80:	68 2b       	or	r22, r24
  82:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  84:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
  86:	08 95       	ret

00000088 <MotorSpeed>:
  88:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  8a:	f8 94       	cli
  8c:	1b bc       	out	0x2b, r1	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
  90:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  92:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
  94:	08 95       	ret

00000096 <__vector_4>:
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	84 b5       	in	r24, 0x24	; 36
  a4:	8b 5d       	subi	r24, 0xDB	; 219
  a6:	84 bd       	out	0x24, r24	; 36
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 60 00 	sts	0x0060, r24
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <sleep>:
  be:	f8 94       	cli
  c0:	95 b7       	in	r25, 0x35	; 53
  c2:	9f 70       	andi	r25, 0x0F	; 15
  c4:	90 68       	ori	r25, 0x80	; 128
  c6:	95 bf       	out	0x35, r25	; 53
  c8:	78 94       	sei
  ca:	90 91 60 00 	lds	r25, 0x0060
  ce:	89 0f       	add	r24, r25
  d0:	90 91 60 00 	lds	r25, 0x0060
  d4:	98 17       	cp	r25, r24
  d6:	11 f0       	breq	.+4      	; 0xdc <sleep+0x1e>
  d8:	88 95       	sleep
  da:	fa cf       	rjmp	.-12     	; 0xd0 <sleep+0x12>
  dc:	f8 94       	cli
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	85 bf       	out	0x35, r24	; 53
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
