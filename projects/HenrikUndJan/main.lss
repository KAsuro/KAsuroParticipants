
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000612  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000006a6  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000006a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017bd  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7f  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085c  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00003320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000611  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba8  00000000  00000000  00003cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00004865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	44 c2       	rjmp	.+1160   	; 0x48e <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	62 c2       	rjmp	.+1220   	; 0x4ce <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	a7 c1       	rjmp	.+846    	; 0x36c <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	e4 c2       	rjmp	.+1480   	; 0x60e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void)		{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	14 d1       	rcall	.+552    	; 0x27e <Init>
    
    int x			= 0;
  56:	c1 2c       	mov	r12, r1
  58:	d1 2c       	mov	r13, r1
		LineData(lineData);
		
		char switches = PollSwitch();
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT]+60	)  / 7;
  5a:	47 e0       	ldi	r20, 0x07	; 7
  5c:	a4 2e       	mov	r10, r20
  5e:	b1 2c       	mov	r11, r1
	char f_pressed	= 0;
    
	while(1){
		
		
		uint16_t lineData[] = {0,0};
  60:	1a 82       	std	Y+2, r1	; 0x02
  62:	19 82       	std	Y+1, r1	; 0x01
  64:	1c 82       	std	Y+4, r1	; 0x04
  66:	1b 82       	std	Y+3, r1	; 0x03
		LineData(lineData);
  68:	ce 01       	movw	r24, r28
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	66 d1       	rcall	.+716    	; 0x33a <LineData>
		
		char switches = PollSwitch();
  6e:	e6 d1       	rcall	.+972    	; 0x43c <PollSwitch>
  70:	28 2f       	mov	r18, r24
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT]+60	)  / 7;
  72:	89 81       	ldd	r24, Y+1	; 0x01
  74:	9a 81       	ldd	r25, Y+2	; 0x02
  76:	cc 96       	adiw	r24, 0x3c	; 60
  78:	b5 01       	movw	r22, r10
  7a:	b6 d2       	rcall	.+1388   	; 0x5e8 <__divmodhi4>
  7c:	8b 01       	movw	r16, r22
		right = ((int)lineData[RIGHT]	)  / 7;
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	9c 81       	ldd	r25, Y+4	; 0x04
  82:	b5 01       	movw	r22, r10
  84:	b1 d2       	rcall	.+1378   	; 0x5e8 <__divmodhi4>
  86:	7b 01       	movw	r14, r22
		
		a_pressed = ( switches & SWITCH(1) );
  88:	82 2f       	mov	r24, r18
  8a:	82 70       	andi	r24, 0x02	; 2
  8c:	58 2e       	mov	r5, r24
		b_pressed = ( switches & SWITCH(4) );
  8e:	82 2f       	mov	r24, r18
  90:	80 71       	andi	r24, 0x10	; 16
  92:	48 2e       	mov	r4, r24
		c_pressed = ( switches & SWITCH(0) );
  94:	82 2f       	mov	r24, r18
  96:	81 70       	andi	r24, 0x01	; 1
  98:	78 2e       	mov	r7, r24
		d_pressed = ( switches & SWITCH(3) );
  9a:	82 2f       	mov	r24, r18
  9c:	88 70       	andi	r24, 0x08	; 8
  9e:	68 2e       	mov	r6, r24
		e_pressed = ( switches & SWITCH(2) );
  a0:	82 2f       	mov	r24, r18
  a2:	84 70       	andi	r24, 0x04	; 4
  a4:	28 2e       	mov	r2, r24
		f_pressed = ( switches & SWITCH(5) );
  a6:	20 72       	andi	r18, 0x20	; 32
  a8:	32 2e       	mov	r3, r18
		
		//fahren
		
		if (left>200 ){
  aa:	09 3c       	cpi	r16, 0xC9	; 201
  ac:	11 05       	cpc	r17, r1
  ae:	34 f4       	brge	.+12     	; 0xbc <main+0x74>
			left=200;
		}
		else if(left<100){
  b0:	04 36       	cpi	r16, 0x64	; 100
  b2:	11 05       	cpc	r17, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <main+0x78>
			left=0;
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x78>
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
			left=200;
  bc:	08 ec       	ldi	r16, 0xC8	; 200
  be:	10 e0       	ldi	r17, 0x00	; 0
		}
		else if(left<100){
			left=0;
		}		
		if (right>200){
  c0:	69 3c       	cpi	r22, 0xC9	; 201
  c2:	71 05       	cpc	r23, r1
  c4:	34 f4       	brge	.+12     	; 0xd2 <main+0x8a>
			(right=200);
		}
		else if(right<100){
  c6:	64 36       	cpi	r22, 0x64	; 100
  c8:	71 05       	cpc	r23, r1
  ca:	34 f4       	brge	.+12     	; 0xd8 <main+0x90>
			right=0;
  cc:	e1 2c       	mov	r14, r1
  ce:	f1 2c       	mov	r15, r1
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x90>
		}
		else if(left<100){
			left=0;
		}		
		if (right>200){
			(right=200);
  d2:	38 ec       	ldi	r19, 0xC8	; 200
  d4:	e3 2e       	mov	r14, r19
  d6:	f1 2c       	mov	r15, r1
		}
		else if(right<100){
			right=0;
		}
			
		MotorDir(FWD,FWD);
  d8:	60 e2       	ldi	r22, 0x20	; 32
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	08 d1       	rcall	.+528    	; 0x2ee <MotorDir>
		MotorSpeed(right,left);
  de:	60 2f       	mov	r22, r16
  e0:	8e 2d       	mov	r24, r14
  e2:	11 d1       	rcall	.+546    	; 0x306 <MotorSpeed>
  e4:	28 e7       	ldi	r18, 0x78	; 120
  e6:	82 2e       	mov	r8, r18
  e8:	91 2c       	mov	r9, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  ea:	84 e2       	ldi	r24, 0x24	; 36
  ec:	04 d2       	rcall	.+1032   	; 0x4f6 <sleep>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	88 1a       	sub	r8, r24
  f2:	91 08       	sbc	r9, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  f4:	81 14       	cp	r8, r1
  f6:	91 04       	cpc	r9, r1
  f8:	c1 f7       	brne	.-16     	; 0xea <main+0xa2>
		msleep(120);
						
		//LED Steuerung
		
		if(left > right){
  fa:	e0 16       	cp	r14, r16
  fc:	f1 06       	cpc	r15, r17
  fe:	1c f4       	brge	.+6      	; 0x106 <main+0xbe>
			BackLED(OFF,ON);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	e9 d0       	rcall	.+466    	; 0x2d8 <BackLED>
		}
		if(right > left){
 106:	0e 15       	cp	r16, r14
 108:	1f 05       	cpc	r17, r15
 10a:	1c f4       	brge	.+6      	; 0x112 <main+0xca>
			BackLED(ON,OFF);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	e3 d0       	rcall	.+454    	; 0x2d8 <BackLED>
		}
		if(right == left){
 112:	e0 16       	cp	r14, r16
 114:	f1 06       	cpc	r15, r17
 116:	19 f4       	brne	.+6      	; 0x11e <main+0xd6>
			BackLED(ON,ON);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	dd d0       	rcall	.+442    	; 0x2d8 <BackLED>
		}
		if(right && left < 80){
 11e:	e1 14       	cp	r14, r1
 120:	f1 04       	cpc	r15, r1
 122:	99 f0       	breq	.+38     	; 0x14a <main+0x102>
 124:	00 35       	cpi	r16, 0x50	; 80
 126:	11 05       	cpc	r17, r1
 128:	14 f4       	brge	.+4      	; 0x12e <main+0xe6>
			StatusLED(RED);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	af d0       	rcall	.+350    	; 0x28c <StatusLED>
		}
		if(80 < right && left < 120){
 12e:	81 e5       	ldi	r24, 0x51	; 81
 130:	e8 16       	cp	r14, r24
 132:	f1 04       	cpc	r15, r1
 134:	2c f0       	brlt	.+10     	; 0x140 <main+0xf8>
 136:	08 37       	cpi	r16, 0x78	; 120
 138:	11 05       	cpc	r17, r1
 13a:	14 f4       	brge	.+4      	; 0x140 <main+0xf8>
			StatusLED(YELLOW);
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	a6 d0       	rcall	.+332    	; 0x28c <StatusLED>
		}
		if(right && left > 120){
 140:	09 37       	cpi	r16, 0x79	; 121
 142:	11 05       	cpc	r17, r1
 144:	14 f0       	brlt	.+4      	; 0x14a <main+0x102>
			StatusLED(GREEN);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	a1 d0       	rcall	.+322    	; 0x28c <StatusLED>
		else if(right<100){
			right=0;
		}
			
		MotorDir(FWD,FWD);
		MotorSpeed(right,left);
 14a:	0e e1       	ldi	r16, 0x1E	; 30
 14c:	10 e0       	ldi	r17, 0x00	; 0
		if(right && left > 120){
			StatusLED(GREEN);
		}
		
		for(int i=0;i<30;i++){
			if(x == 29){
 14e:	8d e1       	ldi	r24, 0x1D	; 29
 150:	c8 16       	cp	r12, r24
 152:	d1 04       	cpc	r13, r1
 154:	79 f4       	brne	.+30     	; 0x174 <main+0x12c>
				FrontLED(ON);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	a0 d0       	rcall	.+320    	; 0x29a <FrontLED>
 15a:	90 ed       	ldi	r25, 0xD0	; 208
 15c:	e9 2e       	mov	r14, r25
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	f9 2e       	mov	r15, r25
        sleep(36);
 162:	84 e2       	ldi	r24, 0x24	; 36
 164:	c8 d1       	rcall	.+912    	; 0x4f6 <sleep>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	e8 1a       	sub	r14, r24
 16a:	f1 08       	sbc	r15, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 16c:	e1 14       	cp	r14, r1
 16e:	f1 04       	cpc	r15, r1
 170:	c1 f7       	brne	.-16     	; 0x162 <main+0x11a>
 172:	0a c0       	rjmp	.+20     	; 0x188 <main+0x140>
				msleep(2000);
				x=0;
		    }
		    if(x == 15){				
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	c8 16       	cp	r12, r24
 178:	d1 04       	cpc	r13, r1
 17a:	41 f4       	brne	.+16     	; 0x18c <main+0x144>
				FrontLED(OFF);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	8d d0       	rcall	.+282    	; 0x29a <FrontLED>
				x++;
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	c8 2e       	mov	r12, r24
 184:	d1 2c       	mov	r13, r1
 186:	05 c0       	rjmp	.+10     	; 0x192 <main+0x14a>
		
		for(int i=0;i<30;i++){
			if(x == 29){
				FrontLED(ON);
				msleep(2000);
				x=0;
 188:	c1 2c       	mov	r12, r1
 18a:	d1 2c       	mov	r13, r1
		    if(x == 15){				
				FrontLED(OFF);
				x++;
				}
			else{
				x++;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	c8 1a       	sub	r12, r24
 190:	d8 0a       	sbc	r13, r24
 192:	01 50       	subi	r16, 0x01	; 1
 194:	11 09       	sbc	r17, r1
		}
		if(right && left > 120){
			StatusLED(GREEN);
		}
		
		for(int i=0;i<30;i++){
 196:	01 15       	cp	r16, r1
 198:	11 05       	cpc	r17, r1
 19a:	c9 f6       	brne	.-78     	; 0x14e <main+0x106>
			
		}	
		
		//Rückfahrt
		
		if (a_pressed | b_pressed > 0) {
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	41 10       	cpse	r4, r1
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0x160>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	85 29       	or	r24, r5
 1aa:	89 2b       	or	r24, r25
 1ac:	e1 f0       	breq	.+56     	; 0x1e6 <main+0x19e>
			StatusLED(RED);
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	6d d0       	rcall	.+218    	; 0x28c <StatusLED>
			BackLED(OFF,ON);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 d0       	rcall	.+288    	; 0x2d8 <BackLED>
        sleep(36);
 1b8:	84 e2       	ldi	r24, 0x24	; 36
 1ba:	9d d1       	rcall	.+826    	; 0x4f6 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	8b d0       	rcall	.+278    	; 0x2d8 <BackLED>
			MotorDir(RWD,RWD);
 1c2:	60 e1       	ldi	r22, 0x10	; 16
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	93 d0       	rcall	.+294    	; 0x2ee <MotorDir>
			MotorSpeed(120,120);
 1c8:	68 e7       	ldi	r22, 0x78	; 120
 1ca:	88 e7       	ldi	r24, 0x78	; 120
 1cc:	9c d0       	rcall	.+312    	; 0x306 <MotorSpeed>
 1ce:	08 e5       	ldi	r16, 0x58	; 88
 1d0:	12 e0       	ldi	r17, 0x02	; 2
 1d2:	84 e2       	ldi	r24, 0x24	; 36
 1d4:	90 d1       	rcall	.+800    	; 0x4f6 <sleep>
 1d6:	01 50       	subi	r16, 0x01	; 1
 1d8:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1da:	01 15       	cp	r16, r1
 1dc:	11 05       	cpc	r17, r1
 1de:	c9 f7       	brne	.-14     	; 0x1d2 <main+0x18a>
			msleep(600);
			MotorDir(BREAK,BREAK);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	84 d0       	rcall	.+264    	; 0x2ee <MotorDir>
		}
		
		if (c_pressed | d_pressed > 0) {
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	61 10       	cpse	r6, r1
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0x1aa>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	87 29       	or	r24, r7
 1f4:	89 2b       	or	r24, r25
 1f6:	e1 f0       	breq	.+56     	; 0x230 <main+0x1e8>
			StatusLED(RED);
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	48 d0       	rcall	.+144    	; 0x28c <StatusLED>
			BackLED(OFF,ON);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	6b d0       	rcall	.+214    	; 0x2d8 <BackLED>
        sleep(36);
 202:	84 e2       	ldi	r24, 0x24	; 36
 204:	78 d1       	rcall	.+752    	; 0x4f6 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	66 d0       	rcall	.+204    	; 0x2d8 <BackLED>
			MotorDir(RWD,RWD);
 20c:	60 e1       	ldi	r22, 0x10	; 16
 20e:	80 e1       	ldi	r24, 0x10	; 16
 210:	6e d0       	rcall	.+220    	; 0x2ee <MotorDir>
			MotorSpeed(120,60);
 212:	6c e3       	ldi	r22, 0x3C	; 60
 214:	88 e7       	ldi	r24, 0x78	; 120
 216:	77 d0       	rcall	.+238    	; 0x306 <MotorSpeed>
 218:	08 e5       	ldi	r16, 0x58	; 88
 21a:	12 e0       	ldi	r17, 0x02	; 2
 21c:	84 e2       	ldi	r24, 0x24	; 36
 21e:	6b d1       	rcall	.+726    	; 0x4f6 <sleep>
 220:	01 50       	subi	r16, 0x01	; 1
 222:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 224:	01 15       	cp	r16, r1
 226:	11 05       	cpc	r17, r1
 228:	c9 f7       	brne	.-14     	; 0x21c <main+0x1d4>
			msleep(600);
			MotorDir(BREAK,BREAK);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	5f d0       	rcall	.+190    	; 0x2ee <MotorDir>
		}
		
		if (e_pressed | f_pressed > 0) {
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	31 10       	cpse	r3, r1
 236:	02 c0       	rjmp	.+4      	; 0x23c <main+0x1f4>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	82 29       	or	r24, r2
 23e:	89 2b       	or	r24, r25
 240:	09 f4       	brne	.+2      	; 0x244 <main+0x1fc>
 242:	0e cf       	rjmp	.-484    	; 0x60 <main+0x18>
			StatusLED(RED);
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	22 d0       	rcall	.+68     	; 0x28c <StatusLED>
			BackLED(OFF,ON);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	45 d0       	rcall	.+138    	; 0x2d8 <BackLED>
        sleep(36);
 24e:	84 e2       	ldi	r24, 0x24	; 36
 250:	52 d1       	rcall	.+676    	; 0x4f6 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	40 d0       	rcall	.+128    	; 0x2d8 <BackLED>
			MotorDir(RWD,RWD);
 258:	60 e1       	ldi	r22, 0x10	; 16
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	48 d0       	rcall	.+144    	; 0x2ee <MotorDir>
			MotorSpeed(60,120);
 25e:	68 e7       	ldi	r22, 0x78	; 120
 260:	8c e3       	ldi	r24, 0x3C	; 60
 262:	51 d0       	rcall	.+162    	; 0x306 <MotorSpeed>
 264:	08 e5       	ldi	r16, 0x58	; 88
 266:	12 e0       	ldi	r17, 0x02	; 2
 268:	84 e2       	ldi	r24, 0x24	; 36
 26a:	45 d1       	rcall	.+650    	; 0x4f6 <sleep>
 26c:	01 50       	subi	r16, 0x01	; 1
 26e:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 270:	01 15       	cp	r16, r1
 272:	11 05       	cpc	r17, r1
 274:	c9 f7       	brne	.-14     	; 0x268 <main+0x220>
			msleep(600);
			MotorDir(BREAK,BREAK);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	39 d0       	rcall	.+114    	; 0x2ee <MotorDir>
		}
	}	
 27c:	f1 ce       	rjmp	.-542    	; 0x60 <main+0x18>

0000027e <Init>:
 27e:	19 d1       	rcall	.+562    	; 0x4b2 <Timer2Init>
 280:	49 d0       	rcall	.+146    	; 0x314 <MotorInit>
 282:	1e d0       	rcall	.+60     	; 0x2c0 <LEDInit>
 284:	4d d1       	rcall	.+666    	; 0x520 <ADCInit>
 286:	c7 d0       	rcall	.+398    	; 0x416 <SwitchInit>
 288:	78 94       	sei
 28a:	08 95       	ret

0000028c <StatusLED>:
 28c:	c0 98       	cbi	0x18, 0	; 24
 28e:	92 98       	cbi	0x12, 2	; 18
 290:	80 fd       	sbrc	r24, 0
 292:	c0 9a       	sbi	0x18, 0	; 24
 294:	81 fd       	sbrc	r24, 1
 296:	92 9a       	sbi	0x12, 2	; 18
 298:	08 95       	ret

0000029a <FrontLED>:
 29a:	88 23       	and	r24, r24
 29c:	11 f0       	breq	.+4      	; 0x2a2 <FrontLED+0x8>
 29e:	96 9a       	sbi	0x12, 6	; 18
 2a0:	08 95       	ret
 2a2:	96 98       	cbi	0x12, 6	; 18
 2a4:	08 95       	ret

000002a6 <BackLEDFast>:
 2a6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2a8:	f8 94       	cli
 2aa:	88 23       	and	r24, r24
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <BackLEDFast+0xe>
 2ae:	97 98       	cbi	0x12, 7	; 18
 2b0:	a1 9a       	sbi	0x14, 1	; 20
 2b2:	a0 9a       	sbi	0x14, 0	; 20
 2b4:	95 b3       	in	r25, 0x15	; 21
 2b6:	9c 7f       	andi	r25, 0xFC	; 252
 2b8:	98 2b       	or	r25, r24
 2ba:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2bc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 2be:	08 95       	ret

000002c0 <LEDInit>:
 2c0:	b8 9a       	sbi	0x17, 0	; 23
 2c2:	81 b3       	in	r24, 0x11	; 17
 2c4:	84 6c       	ori	r24, 0xC4	; 196
 2c6:	81 bb       	out	0x11, r24	; 17
 2c8:	96 98       	cbi	0x12, 6	; 18
 2ca:	97 98       	cbi	0x12, 7	; 18
 2cc:	a1 9a       	sbi	0x14, 1	; 20
 2ce:	a0 9a       	sbi	0x14, 0	; 20
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	e9 df       	rcall	.-46     	; 0x2a6 <BackLEDFast>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	da cf       	rjmp	.-76     	; 0x28c <StatusLED>

000002d8 <BackLED>:
 2d8:	88 23       	and	r24, r24
 2da:	11 f0       	breq	.+4      	; 0x2e0 <BackLED+0x8>
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <BackLED+0xa>
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	61 11       	cpse	r22, r1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <BackLED+0x12>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	89 2b       	or	r24, r25
 2ec:	dc cf       	rjmp	.-72     	; 0x2a6 <BackLEDFast>

000002ee <MotorDir>:
 2ee:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2f0:	f8 94       	cli
 2f2:	92 b3       	in	r25, 0x12	; 18
 2f4:	9f 7c       	andi	r25, 0xCF	; 207
 2f6:	89 2b       	or	r24, r25
 2f8:	82 bb       	out	0x12, r24	; 18
 2fa:	88 b3       	in	r24, 0x18	; 24
 2fc:	8f 7c       	andi	r24, 0xCF	; 207
 2fe:	68 2b       	or	r22, r24
 300:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 302:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 304:	08 95       	ret

00000306 <MotorSpeed>:
 306:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 308:	f8 94       	cli
 30a:	1b bc       	out	0x2b, r1	; 43
 30c:	8a bd       	out	0x2a, r24	; 42
 30e:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 310:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 312:	08 95       	ret

00000314 <MotorInit>:
 314:	87 b3       	in	r24, 0x17	; 23
 316:	86 63       	ori	r24, 0x36	; 54
 318:	87 bb       	out	0x17, r24	; 23
 31a:	81 b3       	in	r24, 0x11	; 17
 31c:	80 63       	ori	r24, 0x30	; 48
 31e:	81 bb       	out	0x11, r24	; 17
 320:	81 ea       	ldi	r24, 0xA1	; 161
 322:	8f bd       	out	0x2f, r24	; 47
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	8e bd       	out	0x2e, r24	; 46
 328:	89 b7       	in	r24, 0x39	; 57
 32a:	83 7c       	andi	r24, 0xC3	; 195
 32c:	89 bf       	out	0x39, r24	; 57
 32e:	60 e2       	ldi	r22, 0x20	; 32
 330:	80 e2       	ldi	r24, 0x20	; 32
 332:	dd df       	rcall	.-70     	; 0x2ee <MotorDir>
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	e6 cf       	rjmp	.-52     	; 0x306 <MotorSpeed>

0000033a <LineData>:
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
 342:	f4 d0       	rcall	.+488    	; 0x52c <__ADCBlockEnter>
 344:	18 2f       	mov	r17, r24
 346:	83 e4       	ldi	r24, 0x43	; 67
 348:	19 d1       	rcall	.+562    	; 0x57c <ADCSelectChannel>
 34a:	21 d1       	rcall	.+578    	; 0x58e <ADCMeasure>
 34c:	24 b1       	in	r18, 0x04	; 4
 34e:	35 b1       	in	r19, 0x05	; 5
 350:	39 83       	std	Y+1, r19	; 0x01
 352:	28 83       	st	Y, r18
 354:	82 e4       	ldi	r24, 0x42	; 66
 356:	12 d1       	rcall	.+548    	; 0x57c <ADCSelectChannel>
 358:	1a d1       	rcall	.+564    	; 0x58e <ADCMeasure>
 35a:	24 b1       	in	r18, 0x04	; 4
 35c:	35 b1       	in	r19, 0x05	; 5
 35e:	3b 83       	std	Y+3, r19	; 0x03
 360:	2a 83       	std	Y+2, r18	; 0x02
 362:	81 2f       	mov	r24, r17
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	f2 c0       	rjmp	.+484    	; 0x550 <__ADCBlockLeave>

0000036c <__vector_14>:
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
 38e:	87 b1       	in	r24, 0x07	; 7
 390:	78 94       	sei
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	19 f0       	breq	.+6      	; 0x39c <__vector_14+0x30>
 396:	83 36       	cpi	r24, 0x63	; 99
 398:	a1 f0       	breq	.+40     	; 0x3c2 <__vector_14+0x56>
 39a:	27 c0       	rjmp	.+78     	; 0x3ea <__vector_14+0x7e>
 39c:	80 91 63 00 	lds	r24, 0x0063
 3a0:	82 fd       	sbrc	r24, 2
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <__vector_14+0x3c>
 3a4:	80 e6       	ldi	r24, 0x60	; 96
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <__vector_14+0x3e>
 3a8:	82 e6       	ldi	r24, 0x62	; 98
 3aa:	f8 94       	cli
 3ac:	95 b1       	in	r25, 0x05	; 5
 3ae:	90 93 65 00 	sts	0x0065, r25
 3b2:	90 91 60 00 	lds	r25, 0x0060
 3b6:	90 93 64 00 	sts	0x0064, r25
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	90 93 68 00 	sts	0x0068, r25
 3c0:	12 c0       	rjmp	.+36     	; 0x3e6 <__vector_14+0x7a>
 3c2:	80 91 63 00 	lds	r24, 0x0063
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <__vector_14+0x62>
 3ca:	80 e6       	ldi	r24, 0x60	; 96
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <__vector_14+0x64>
 3ce:	82 e6       	ldi	r24, 0x62	; 98
 3d0:	f8 94       	cli
 3d2:	95 b1       	in	r25, 0x05	; 5
 3d4:	90 93 67 00 	sts	0x0067, r25
 3d8:	90 91 60 00 	lds	r25, 0x0060
 3dc:	90 93 66 00 	sts	0x0066, r25
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	90 93 62 00 	sts	0x0062, r25
 3e6:	78 94       	sei
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <__vector_14+0x86>
 3ea:	95 b1       	in	r25, 0x05	; 5
 3ec:	90 93 60 00 	sts	0x0060, r25
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	d1 d0       	rcall	.+418    	; 0x596 <ADCInterruptEnable>
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <SwitchInit>:
 416:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 418:	f8 94       	cli
 41a:	8b b7       	in	r24, 0x3b	; 59
 41c:	8f 77       	andi	r24, 0x7F	; 127
 41e:	8b bf       	out	0x3b, r24	; 59
 420:	85 b7       	in	r24, 0x35	; 53
 422:	87 7f       	andi	r24, 0xF7	; 247
 424:	84 60       	ori	r24, 0x04	; 4
 426:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 428:	9f bf       	out	0x3f, r25	; 63
 42a:	a4 98       	cbi	0x14, 4	; 20
 42c:	85 b3       	in	r24, 0x15	; 21
 42e:	80 71       	andi	r24, 0x10	; 16
 430:	85 bb       	out	0x15, r24	; 21
 432:	8b 98       	cbi	0x11, 3	; 17
 434:	93 98       	cbi	0x12, 3	; 18
 436:	10 92 69 00 	sts	0x0069, r1
 43a:	08 95       	ret

0000043c <PollSwitch>:
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	93 9a       	sbi	0x12, 3	; 18
 446:	8b 9a       	sbi	0x11, 3	; 17
 448:	71 d0       	rcall	.+226    	; 0x52c <__ADCBlockEnter>
 44a:	08 2f       	mov	r16, r24
 44c:	84 e4       	ldi	r24, 0x44	; 68
 44e:	96 d0       	rcall	.+300    	; 0x57c <ADCSelectChannel>
 450:	14 e0       	ldi	r17, 0x04	; 4
 452:	c0 e0       	ldi	r28, 0x00	; 0
 454:	d0 e0       	ldi	r29, 0x00	; 0
 456:	9b d0       	rcall	.+310    	; 0x58e <ADCMeasure>
 458:	24 b1       	in	r18, 0x04	; 4
 45a:	35 b1       	in	r19, 0x05	; 5
 45c:	c2 0f       	add	r28, r18
 45e:	d3 1f       	adc	r29, r19
 460:	11 50       	subi	r17, 0x01	; 1
 462:	c9 f7       	brne	.-14     	; 0x456 <PollSwitch+0x1a>
 464:	80 2f       	mov	r24, r16
 466:	74 d0       	rcall	.+232    	; 0x550 <__ADCBlockLeave>
 468:	8b 98       	cbi	0x11, 3	; 17
 46a:	93 98       	cbi	0x12, 3	; 18
 46c:	be 01       	movw	r22, r28
 46e:	76 95       	lsr	r23
 470:	67 95       	ror	r22
 472:	76 95       	lsr	r23
 474:	67 95       	ror	r22
 476:	cb 01       	movw	r24, r22
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	98 50       	subi	r25, 0x08	; 8
 47e:	a0 d0       	rcall	.+320    	; 0x5c0 <__udivmodhi4>
 480:	82 ec       	ldi	r24, 0xC2	; 194
 482:	86 0f       	add	r24, r22
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	08 95       	ret

0000048e <__vector_2>:
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	8f 93       	push	r24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 69 00 	sts	0x0069, r24
 4a0:	8b b7       	in	r24, 0x3b	; 59
 4a2:	8f 77       	andi	r24, 0x7F	; 127
 4a4:	8b bf       	out	0x3b, r24	; 59
 4a6:	8f 91       	pop	r24
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <Timer2Init>:
 4b2:	12 bc       	out	0x22, r1	; 34
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	85 bd       	out	0x25, r24	; 37
 4b8:	89 b7       	in	r24, 0x39	; 57
 4ba:	80 64       	ori	r24, 0x40	; 64
 4bc:	89 bf       	out	0x39, r24	; 57
 4be:	81 e9       	ldi	r24, 0x91	; 145
 4c0:	83 bd       	out	0x23, r24	; 35
 4c2:	85 b5       	in	r24, 0x25	; 37
 4c4:	87 78       	andi	r24, 0x87	; 135
 4c6:	85 bd       	out	0x25, r24	; 37
 4c8:	bb 9a       	sbi	0x17, 3	; 23
 4ca:	c3 98       	cbi	0x18, 3	; 24
 4cc:	08 95       	ret

000004ce <__vector_4>:
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	8f 93       	push	r24
 4da:	84 b5       	in	r24, 0x24	; 36
 4dc:	8b 5d       	subi	r24, 0xDB	; 219
 4de:	84 bd       	out	0x24, r24	; 36
 4e0:	80 91 6a 00 	lds	r24, 0x006A
 4e4:	8f 5f       	subi	r24, 0xFF	; 255
 4e6:	80 93 6a 00 	sts	0x006A, r24
 4ea:	8f 91       	pop	r24
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <sleep>:
 4f6:	f8 94       	cli
 4f8:	95 b7       	in	r25, 0x35	; 53
 4fa:	9f 70       	andi	r25, 0x0F	; 15
 4fc:	90 68       	ori	r25, 0x80	; 128
 4fe:	95 bf       	out	0x35, r25	; 53
 500:	78 94       	sei
 502:	90 91 6a 00 	lds	r25, 0x006A
 506:	89 0f       	add	r24, r25
 508:	90 91 6a 00 	lds	r25, 0x006A
 50c:	98 17       	cp	r25, r24
 50e:	11 f0       	breq	.+4      	; 0x514 <sleep+0x1e>
 510:	88 95       	sleep
 512:	fa cf       	rjmp	.-12     	; 0x508 <sleep+0x12>
 514:	f8 94       	cli
 516:	85 b7       	in	r24, 0x35	; 53
 518:	8f 77       	andi	r24, 0x7F	; 127
 51a:	85 bf       	out	0x35, r24	; 53
 51c:	78 94       	sei
 51e:	08 95       	ret

00000520 <ADCInit>:
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	80 93 61 00 	sts	0x0061, r24
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	86 b9       	out	0x06, r24	; 6
 52a:	08 95       	ret

0000052c <__ADCBlockEnter>:
 52c:	2f b7       	in	r18, 0x3f	; 63
 52e:	f8 94       	cli
 530:	87 b1       	in	r24, 0x07	; 7
 532:	96 b1       	in	r25, 0x06	; 6
 534:	39 2f       	mov	r19, r25
 536:	38 78       	andi	r19, 0x88	; 136
 538:	31 f0       	breq	.+12     	; 0x546 <__ADCBlockEnter+0x1a>
 53a:	93 ff       	sbrs	r25, 3
 53c:	05 c0       	rjmp	.+10     	; 0x548 <__ADCBlockEnter+0x1c>
 53e:	80 93 61 00 	sts	0x0061, r24
 542:	86 e8       	ldi	r24, 0x86	; 134
 544:	86 b9       	out	0x06, r24	; 6
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	2f bf       	out	0x3f, r18	; 63
 54a:	36 99       	sbic	0x06, 6	; 6
 54c:	fe cf       	rjmp	.-4      	; 0x54a <__ADCBlockEnter+0x1e>
 54e:	08 95       	ret

00000550 <__ADCBlockLeave>:
 550:	3f b7       	in	r19, 0x3f	; 63
 552:	f8 94       	cli
 554:	8f 3f       	cpi	r24, 0xFF	; 255
 556:	31 f4       	brne	.+12     	; 0x564 <__ADCBlockLeave+0x14>
 558:	80 91 61 00 	lds	r24, 0x0061
 55c:	8f 3f       	cpi	r24, 0xFF	; 255
 55e:	51 f0       	breq	.+20     	; 0x574 <__ADCBlockLeave+0x24>
 560:	2e ed       	ldi	r18, 0xDE	; 222
 562:	01 c0       	rjmp	.+2      	; 0x566 <__ADCBlockLeave+0x16>
 564:	26 ed       	ldi	r18, 0xD6	; 214
 566:	97 b1       	in	r25, 0x07	; 7
 568:	98 27       	eor	r25, r24
 56a:	90 7c       	andi	r25, 0xC0	; 192
 56c:	09 f0       	breq	.+2      	; 0x570 <__ADCBlockLeave+0x20>
 56e:	16 b8       	out	0x06, r1	; 6
 570:	87 b9       	out	0x07, r24	; 7
 572:	01 c0       	rjmp	.+2      	; 0x576 <__ADCBlockLeave+0x26>
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	26 b9       	out	0x06, r18	; 6
 578:	3f bf       	out	0x3f, r19	; 63
 57a:	08 95       	ret

0000057c <ADCSelectChannel>:
 57c:	97 b1       	in	r25, 0x07	; 7
 57e:	98 27       	eor	r25, r24
 580:	90 7c       	andi	r25, 0xC0	; 192
 582:	09 f0       	breq	.+2      	; 0x586 <ADCSelectChannel+0xa>
 584:	16 b8       	out	0x06, r1	; 6
 586:	96 e8       	ldi	r25, 0x86	; 134
 588:	96 b9       	out	0x06, r25	; 6
 58a:	87 b9       	out	0x07, r24	; 7
 58c:	08 95       	ret

0000058e <ADCMeasure>:
 58e:	36 9a       	sbi	0x06, 6	; 6
 590:	36 99       	sbic	0x06, 6	; 6
 592:	fe cf       	rjmp	.-4      	; 0x590 <ADCMeasure+0x2>
 594:	08 95       	ret

00000596 <ADCInterruptEnable>:
 596:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 598:	f8 94       	cli
 59a:	96 b1       	in	r25, 0x06	; 6
 59c:	97 ff       	sbrs	r25, 7
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <ADCInterruptEnable+0xe>
 5a0:	93 ff       	sbrs	r25, 3
 5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <ADCInterruptEnable+0x22>
 5a4:	97 b1       	in	r25, 0x07	; 7
 5a6:	98 27       	eor	r25, r24
 5a8:	90 7c       	andi	r25, 0xC0	; 192
 5aa:	09 f0       	breq	.+2      	; 0x5ae <ADCInterruptEnable+0x18>
 5ac:	16 b8       	out	0x06, r1	; 6
 5ae:	36 99       	sbic	0x06, 6	; 6
 5b0:	16 b8       	out	0x06, r1	; 6
 5b2:	87 b9       	out	0x07, r24	; 7
 5b4:	9e ed       	ldi	r25, 0xDE	; 222
 5b6:	96 b9       	out	0x06, r25	; 6
 5b8:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5bc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 5be:	08 95       	ret

000005c0 <__udivmodhi4>:
 5c0:	aa 1b       	sub	r26, r26
 5c2:	bb 1b       	sub	r27, r27
 5c4:	51 e1       	ldi	r21, 0x11	; 17
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <__udivmodhi4_ep>

000005c8 <__udivmodhi4_loop>:
 5c8:	aa 1f       	adc	r26, r26
 5ca:	bb 1f       	adc	r27, r27
 5cc:	a6 17       	cp	r26, r22
 5ce:	b7 07       	cpc	r27, r23
 5d0:	10 f0       	brcs	.+4      	; 0x5d6 <__udivmodhi4_ep>
 5d2:	a6 1b       	sub	r26, r22
 5d4:	b7 0b       	sbc	r27, r23

000005d6 <__udivmodhi4_ep>:
 5d6:	88 1f       	adc	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	5a 95       	dec	r21
 5dc:	a9 f7       	brne	.-22     	; 0x5c8 <__udivmodhi4_loop>
 5de:	80 95       	com	r24
 5e0:	90 95       	com	r25
 5e2:	bc 01       	movw	r22, r24
 5e4:	cd 01       	movw	r24, r26
 5e6:	08 95       	ret

000005e8 <__divmodhi4>:
 5e8:	97 fb       	bst	r25, 7
 5ea:	07 2e       	mov	r0, r23
 5ec:	16 f4       	brtc	.+4      	; 0x5f2 <__divmodhi4+0xa>
 5ee:	00 94       	com	r0
 5f0:	06 d0       	rcall	.+12     	; 0x5fe <__divmodhi4_neg1>
 5f2:	77 fd       	sbrc	r23, 7
 5f4:	08 d0       	rcall	.+16     	; 0x606 <__divmodhi4_neg2>
 5f6:	e4 df       	rcall	.-56     	; 0x5c0 <__udivmodhi4>
 5f8:	07 fc       	sbrc	r0, 7
 5fa:	05 d0       	rcall	.+10     	; 0x606 <__divmodhi4_neg2>
 5fc:	3e f4       	brtc	.+14     	; 0x60c <__divmodhi4_exit>

000005fe <__divmodhi4_neg1>:
 5fe:	90 95       	com	r25
 600:	81 95       	neg	r24
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	08 95       	ret

00000606 <__divmodhi4_neg2>:
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255

0000060c <__divmodhi4_exit>:
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
