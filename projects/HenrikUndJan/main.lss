
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000071c  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000190e  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7f  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087d  00000000  00000000  00002c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00003508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000619  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c54  00000000  00000000  00003ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00004b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	7f c2       	rjmp	.+1278   	; 0x504 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	9d c2       	rjmp	.+1338   	; 0x544 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	e2 c1       	rjmp	.+964    	; 0x3e2 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	1f c3       	rjmp	.+1598   	; 0x684 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

#include <asuro/asuro.h>



void main(void)		{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
  50:	6b 97       	sbiw	r28, 0x1b	; 27
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
    Init();
  5c:	4b d1       	rcall	.+662    	; 0x2f4 <Init>
   
	MotorSpeed(0,0);
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	8c d1       	rcall	.+792    	; 0x37c <MotorSpeed>
	MotorDir(BREAK,BREAK);
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	7d d1       	rcall	.+762    	; 0x364 <MotorDir>
	FrontLED(OFF);
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	51 d1       	rcall	.+674    	; 0x310 <FrontLED>
	BackLED(OFF,OFF);
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	6d d1       	rcall	.+730    	; 0x34e <BackLED>
	StatusLED(OFF);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	45 d1       	rcall	.+650    	; 0x302 <StatusLED>
	
    
    int pressed[]	= {0,0,0,0,0,0,0,0,0,0,0};
  78:	ce 01       	movw	r24, r28
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	3c 01       	movw	r6, r24
  7e:	86 e1       	ldi	r24, 0x16	; 22
  80:	f3 01       	movw	r30, r6
  82:	11 92       	st	Z+, r1
  84:	8a 95       	dec	r24
  86:	e9 f7       	brne	.-6      	; 0x82 <main+0x3a>
    int t			= 0;
    int counter 	= 0;
    int x			= 0;
  88:	e1 2c       	mov	r14, r1
  8a:	f1 2c       	mov	r15, r1
	StatusLED(OFF);
	
    
    int pressed[]	= {0,0,0,0,0,0,0,0,0,0,0};
    int t			= 0;
    int counter 	= 0;
  8c:	a1 2c       	mov	r10, r1
  8e:	b1 2c       	mov	r11, r1
	BackLED(OFF,OFF);
	StatusLED(OFF);
	
    
    int pressed[]	= {0,0,0,0,0,0,0,0,0,0,0};
    int t			= 0;
  90:	c1 2c       	mov	r12, r1
  92:	d1 2c       	mov	r13, r1
		LineData(lineData);
		
		char switches = PollSwitch();
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT] +160)  / 7;
  94:	47 e0       	ldi	r20, 0x07	; 7
  96:	84 2e       	mov	r8, r20
  98:	91 2c       	mov	r9, r1
	char f_pressed	= 0;
    
	while(1){
		
		
		uint16_t lineData[] = {0,0};
  9a:	18 8e       	std	Y+24, r1	; 0x18
  9c:	1f 8a       	std	Y+23, r1	; 0x17
  9e:	1a 8e       	std	Y+26, r1	; 0x1a
  a0:	19 8e       	std	Y+25, r1	; 0x19
		LineData(lineData);
  a2:	ce 01       	movw	r24, r28
  a4:	47 96       	adiw	r24, 0x17	; 23
  a6:	84 d1       	rcall	.+776    	; 0x3b0 <LineData>
		
		char switches = PollSwitch();
  a8:	04 d2       	rcall	.+1032   	; 0x4b2 <PollSwitch>
  aa:	8b 8f       	std	Y+27, r24	; 0x1b
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT] +160)  / 7;
  ac:	8f 89       	ldd	r24, Y+23	; 0x17
  ae:	98 8d       	ldd	r25, Y+24	; 0x18
  b0:	80 56       	subi	r24, 0x60	; 96
  b2:	9f 4f       	sbci	r25, 0xFF	; 255
  b4:	b4 01       	movw	r22, r8
  b6:	d3 d2       	rcall	.+1446   	; 0x65e <__divmodhi4>
  b8:	8b 01       	movw	r16, r22
		right = ((int)lineData[RIGHT]+100)  / 7;
  ba:	89 8d       	ldd	r24, Y+25	; 0x19
  bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
  be:	8c 59       	subi	r24, 0x9C	; 156
  c0:	9f 4f       	sbci	r25, 0xFF	; 255
  c2:	b4 01       	movw	r22, r8
  c4:	cc d2       	rcall	.+1432   	; 0x65e <__divmodhi4>
  c6:	1b 01       	movw	r2, r22
  c8:	2b 01       	movw	r4, r22
		e_pressed = ( switches & SWITCH(2) );
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
  ca:	09 3c       	cpi	r16, 0xC9	; 201
  cc:	11 05       	cpc	r17, r1
  ce:	44 f4       	brge	.+16     	; 0xe0 <main+0x98>
			left=200;
		}
		else if(left<100){
  d0:	04 36       	cpi	r16, 0x64	; 100
  d2:	11 05       	cpc	r17, r1
  d4:	3c f4       	brge	.+14     	; 0xe4 <main+0x9c>
			left=0;
			StatusLED(RED);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	14 d1       	rcall	.+552    	; 0x302 <StatusLED>
		
		if (left>200 ){
			left=200;
		}
		else if(left<100){
			left=0;
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x9c>
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
			left=200;
  e0:	08 ec       	ldi	r16, 0xC8	; 200
  e2:	10 e0       	ldi	r17, 0x00	; 0
		else if(left<100){
			left=0;
			StatusLED(RED);
		}
				
		if (right>200){
  e4:	f9 ec       	ldi	r31, 0xC9	; 201
  e6:	2f 16       	cp	r2, r31
  e8:	31 04       	cpc	r3, r1
  ea:	4c f4       	brge	.+18     	; 0xfe <main+0xb6>
			(right=200);
		}
		
		else if(right<100){
  ec:	24 e6       	ldi	r18, 0x64	; 100
  ee:	22 16       	cp	r2, r18
  f0:	31 04       	cpc	r3, r1
  f2:	44 f4       	brge	.+16     	; 0x104 <main+0xbc>
			right=0;
			StatusLED(RED);
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	05 d1       	rcall	.+522    	; 0x302 <StatusLED>
		if (right>200){
			(right=200);
		}
		
		else if(right<100){
			right=0;
  f8:	41 2c       	mov	r4, r1
  fa:	51 2c       	mov	r5, r1
  fc:	03 c0       	rjmp	.+6      	; 0x104 <main+0xbc>
			left=0;
			StatusLED(RED);
		}
				
		if (right>200){
			(right=200);
  fe:	38 ec       	ldi	r19, 0xC8	; 200
 100:	43 2e       	mov	r4, r19
 102:	51 2c       	mov	r5, r1
		else if(right<100){
			right=0;
			StatusLED(RED);
		}
			
		MotorDir(FWD,FWD);
 104:	60 e2       	ldi	r22, 0x20	; 32
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	2d d1       	rcall	.+602    	; 0x364 <MotorDir>
		MotorSpeed(right,left);
 10a:	60 2f       	mov	r22, r16
 10c:	84 2d       	mov	r24, r4
 10e:	36 d1       	rcall	.+620    	; 0x37c <MotorSpeed>
 110:	28 e7       	ldi	r18, 0x78	; 120
 112:	22 2e       	mov	r2, r18
 114:	31 2c       	mov	r3, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
 116:	84 e2       	ldi	r24, 0x24	; 36
 118:	29 d2       	rcall	.+1106   	; 0x56c <sleep>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	28 1a       	sub	r2, r24
 11e:	31 08       	sbc	r3, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 120:	21 14       	cp	r2, r1
 122:	31 04       	cpc	r3, r1
 124:	c1 f7       	brne	.-16     	; 0x116 <main+0xce>
		msleep(120);
						
		//LED Steuerung
		
		if(left > right){
 126:	40 16       	cp	r4, r16
 128:	51 06       	cpc	r5, r17
 12a:	1c f4       	brge	.+6      	; 0x132 <main+0xea>
			BackLED(OFF,ON);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e d1       	rcall	.+540    	; 0x34e <BackLED>
		}
		
		if(right > left){
 132:	04 15       	cp	r16, r4
 134:	15 05       	cpc	r17, r5
 136:	1c f4       	brge	.+6      	; 0x13e <main+0xf6>
			BackLED(ON,OFF);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 d1       	rcall	.+528    	; 0x34e <BackLED>
		}
		
		if(right == left){
 13e:	40 16       	cp	r4, r16
 140:	51 06       	cpc	r5, r17
 142:	19 f4       	brne	.+6      	; 0x14a <main+0x102>
			BackLED(ON,ON);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	02 d1       	rcall	.+516    	; 0x34e <BackLED>
		}
		
		if(right && left < 80){
 14a:	41 14       	cp	r4, r1
 14c:	51 04       	cpc	r5, r1
 14e:	99 f0       	breq	.+38     	; 0x176 <main+0x12e>
 150:	00 35       	cpi	r16, 0x50	; 80
 152:	11 05       	cpc	r17, r1
 154:	14 f4       	brge	.+4      	; 0x15a <main+0x112>
			StatusLED(RED);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	d4 d0       	rcall	.+424    	; 0x302 <StatusLED>
		}
		
		if(80 < right && left < 120){
 15a:	91 e5       	ldi	r25, 0x51	; 81
 15c:	49 16       	cp	r4, r25
 15e:	51 04       	cpc	r5, r1
 160:	2c f0       	brlt	.+10     	; 0x16c <main+0x124>
 162:	08 37       	cpi	r16, 0x78	; 120
 164:	11 05       	cpc	r17, r1
 166:	14 f4       	brge	.+4      	; 0x16c <main+0x124>
			StatusLED(YELLOW);
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	cb d0       	rcall	.+406    	; 0x302 <StatusLED>
		}
		
		if(right && left > 120){
 16c:	09 37       	cpi	r16, 0x79	; 121
 16e:	11 05       	cpc	r17, r1
 170:	14 f0       	brlt	.+4      	; 0x176 <main+0x12e>
			StatusLED(GREEN);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	c6 d0       	rcall	.+396    	; 0x302 <StatusLED>
		}
		
		
			if(x == 3000){
 176:	e8 eb       	ldi	r30, 0xB8	; 184
 178:	ee 16       	cp	r14, r30
 17a:	eb e0       	ldi	r30, 0x0B	; 11
 17c:	fe 06       	cpc	r15, r30
 17e:	29 f4       	brne	.+10     	; 0x18a <main+0x142>
				FrontLED(ON);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	c6 d0       	rcall	.+396    	; 0x310 <FrontLED>
				x=0;
 184:	e1 2c       	mov	r14, r1
 186:	f1 2c       	mov	r15, r1
 188:	0a c0       	rjmp	.+20     	; 0x19e <main+0x156>
		    }
		    if(x == 15){				
 18a:	ff e0       	ldi	r31, 0x0F	; 15
 18c:	ef 16       	cp	r14, r31
 18e:	f1 04       	cpc	r15, r1
 190:	31 f4       	brne	.+12     	; 0x19e <main+0x156>
				FrontLED(OFF);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	bd d0       	rcall	.+378    	; 0x310 <FrontLED>
				x++;
 196:	90 e1       	ldi	r25, 0x10	; 16
 198:	e9 2e       	mov	r14, r25
 19a:	f1 2c       	mov	r15, r1
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <main+0x15c>
			}
			else{
				x++;
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	e2 1a       	sub	r14, r18
 1a2:	f2 0a       	sbc	r15, r18
 1a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1a6:	82 71       	andi	r24, 0x12	; 18
			
			
		
		//Rückfahrt
		
		if (a_pressed || b_pressed > 0) {
 1a8:	e1 f0       	breq	.+56     	; 0x1e2 <main+0x19a>
			StatusLED(RED);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	aa d0       	rcall	.+340    	; 0x302 <StatusLED>
			BackLED(OFF,ON);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	cd d0       	rcall	.+410    	; 0x34e <BackLED>
        sleep(36);
 1b4:	84 e2       	ldi	r24, 0x24	; 36
 1b6:	da d1       	rcall	.+948    	; 0x56c <sleep>
			msleep(1);
			BackLED(ON,OFF);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	c8 d0       	rcall	.+400    	; 0x34e <BackLED>
			MotorDir(RWD,RWD);
 1be:	60 e1       	ldi	r22, 0x10	; 16
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	d0 d0       	rcall	.+416    	; 0x364 <MotorDir>
			MotorSpeed(120,120);
 1c4:	68 e7       	ldi	r22, 0x78	; 120
 1c6:	88 e7       	ldi	r24, 0x78	; 120
 1c8:	d9 d0       	rcall	.+434    	; 0x37c <MotorSpeed>
 1ca:	08 e5       	ldi	r16, 0x58	; 88
 1cc:	12 e0       	ldi	r17, 0x02	; 2
 1ce:	84 e2       	ldi	r24, 0x24	; 36
 1d0:	cd d1       	rcall	.+922    	; 0x56c <sleep>
 1d2:	01 50       	subi	r16, 0x01	; 1
 1d4:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1d6:	01 15       	cp	r16, r1
 1d8:	11 05       	cpc	r17, r1
 1da:	c9 f7       	brne	.-14     	; 0x1ce <main+0x186>
			msleep(600);
			MotorDir(BREAK,BREAK);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	c1 d0       	rcall	.+386    	; 0x364 <MotorDir>
 1e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1e4:	89 70       	andi	r24, 0x09	; 9
		}
		
		if (c_pressed || d_pressed > 0) {
 1e6:	e1 f0       	breq	.+56     	; 0x220 <main+0x1d8>
			StatusLED(RED);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	8b d0       	rcall	.+278    	; 0x302 <StatusLED>
			BackLED(OFF,ON);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	ae d0       	rcall	.+348    	; 0x34e <BackLED>
        sleep(36);
 1f2:	84 e2       	ldi	r24, 0x24	; 36
 1f4:	bb d1       	rcall	.+886    	; 0x56c <sleep>
			msleep(1);
			BackLED(ON,OFF);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	a9 d0       	rcall	.+338    	; 0x34e <BackLED>
			MotorDir(RWD,RWD);
 1fc:	60 e1       	ldi	r22, 0x10	; 16
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	b1 d0       	rcall	.+354    	; 0x364 <MotorDir>
			MotorSpeed(120,60);
 202:	6c e3       	ldi	r22, 0x3C	; 60
 204:	88 e7       	ldi	r24, 0x78	; 120
 206:	ba d0       	rcall	.+372    	; 0x37c <MotorSpeed>
 208:	08 e5       	ldi	r16, 0x58	; 88
 20a:	12 e0       	ldi	r17, 0x02	; 2
 20c:	84 e2       	ldi	r24, 0x24	; 36
 20e:	ae d1       	rcall	.+860    	; 0x56c <sleep>
 210:	01 50       	subi	r16, 0x01	; 1
 212:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 214:	01 15       	cp	r16, r1
 216:	11 05       	cpc	r17, r1
 218:	c9 f7       	brne	.-14     	; 0x20c <main+0x1c4>
			msleep(600);
			MotorDir(BREAK,BREAK);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	a2 d0       	rcall	.+324    	; 0x364 <MotorDir>
 220:	8b 8d       	ldd	r24, Y+27	; 0x1b
 222:	84 72       	andi	r24, 0x24	; 36
		}
		
		if (e_pressed || f_pressed > 0) {
 224:	e1 f0       	breq	.+56     	; 0x25e <main+0x216>
			StatusLED(RED);
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	6c d0       	rcall	.+216    	; 0x302 <StatusLED>
			BackLED(OFF,ON);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	8f d0       	rcall	.+286    	; 0x34e <BackLED>
        sleep(36);
 230:	84 e2       	ldi	r24, 0x24	; 36
 232:	9c d1       	rcall	.+824    	; 0x56c <sleep>
			msleep(1);
			BackLED(ON,OFF);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	8a d0       	rcall	.+276    	; 0x34e <BackLED>
			MotorDir(RWD,RWD);
 23a:	60 e1       	ldi	r22, 0x10	; 16
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	92 d0       	rcall	.+292    	; 0x364 <MotorDir>
			MotorSpeed(60,120);
 240:	68 e7       	ldi	r22, 0x78	; 120
 242:	8c e3       	ldi	r24, 0x3C	; 60
 244:	9b d0       	rcall	.+310    	; 0x37c <MotorSpeed>
 246:	08 e5       	ldi	r16, 0x58	; 88
 248:	12 e0       	ldi	r17, 0x02	; 2
 24a:	84 e2       	ldi	r24, 0x24	; 36
 24c:	8f d1       	rcall	.+798    	; 0x56c <sleep>
 24e:	01 50       	subi	r16, 0x01	; 1
 250:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 252:	01 15       	cp	r16, r1
 254:	11 05       	cpc	r17, r1
 256:	c9 f7       	brne	.-14     	; 0x24a <main+0x202>
			msleep(600);
			MotorDir(BREAK,BREAK);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	83 d0       	rcall	.+262    	; 0x364 <MotorDir>
		}
		
		if(counter>30){
 25e:	8f e1       	ldi	r24, 0x1F	; 31
 260:	a8 16       	cp	r10, r24
 262:	b1 04       	cpc	r11, r1
 264:	84 f0       	brlt	.+32     	; 0x286 <main+0x23e>
			MotorDir(RWD,RWD);
 266:	60 e1       	ldi	r22, 0x10	; 16
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	7c d0       	rcall	.+248    	; 0x364 <MotorDir>
			MotorSpeed(60,60);
 26c:	6c e3       	ldi	r22, 0x3C	; 60
 26e:	8c e3       	ldi	r24, 0x3C	; 60
 270:	85 d0       	rcall	.+266    	; 0x37c <MotorSpeed>
 272:	0c e3       	ldi	r16, 0x3C	; 60
 274:	10 e0       	ldi	r17, 0x00	; 0
        sleep(36);
 276:	84 e2       	ldi	r24, 0x24	; 36
 278:	79 d1       	rcall	.+754    	; 0x56c <sleep>
 27a:	01 50       	subi	r16, 0x01	; 1
 27c:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 27e:	01 15       	cp	r16, r1
 280:	11 05       	cpc	r17, r1
 282:	c9 f7       	brne	.-14     	; 0x276 <main+0x22e>
 284:	04 c0       	rjmp	.+8      	; 0x28e <main+0x246>
			msleep(60);
			counter=0;
		}
		else{
			counter++;		
 286:	9f ef       	ldi	r25, 0xFF	; 255
 288:	a9 1a       	sub	r10, r25
 28a:	b9 0a       	sbc	r11, r25
 28c:	02 c0       	rjmp	.+4      	; 0x292 <main+0x24a>
		
		if(counter>30){
			MotorDir(RWD,RWD);
			MotorSpeed(60,60);
			msleep(60);
			counter=0;
 28e:	a1 2c       	mov	r10, r1
 290:	b1 2c       	mov	r11, r1
 292:	86 01       	movw	r16, r12
 294:	00 0f       	add	r16, r16
 296:	11 1f       	adc	r17, r17
 298:	06 0d       	add	r16, r6
 29a:	17 1d       	adc	r17, r7
 29c:	41 2c       	mov	r4, r1
 29e:	51 2c       	mov	r5, r1
		}
		else{
			counter++;		
	}	
	while(lineData[LEFT] || lineData[RIGHT] > 900){
 2a0:	8f 89       	ldd	r24, Y+23	; 0x17
 2a2:	98 8d       	ldd	r25, Y+24	; 0x18
 2a4:	89 2b       	or	r24, r25
 2a6:	01 f1       	breq	.+64     	; 0x2e8 <main+0x2a0>
		MotorDir(BREAK,BREAK);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	5b d0       	rcall	.+182    	; 0x364 <MotorDir>
 2ae:	f8 01       	movw	r30, r16
 2b0:	e4 0d       	add	r30, r4
 2b2:	f5 1d       	adc	r31, r5
		pressed[t]=pressed[t]+10;
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	0a 96       	adiw	r24, 0x0a	; 10
 2ba:	91 83       	std	Z+1, r25	; 0x01
 2bc:	80 83       	st	Z, r24
		t++;
 2be:	ef ef       	ldi	r30, 0xFF	; 255
 2c0:	ce 1a       	sub	r12, r30
 2c2:	de 0a       	sbc	r13, r30
 2c4:	f2 e0       	ldi	r31, 0x02	; 2
 2c6:	4f 0e       	add	r4, r31
 2c8:	51 1c       	adc	r5, r1
		if(t == 10){
 2ca:	2a e0       	ldi	r18, 0x0A	; 10
 2cc:	c2 16       	cp	r12, r18
 2ce:	d1 04       	cpc	r13, r1
 2d0:	39 f7       	brne	.-50     	; 0x2a0 <main+0x258>
			MotorDir(FWD,FWD);
 2d2:	60 e2       	ldi	r22, 0x20	; 32
 2d4:	80 e2       	ldi	r24, 0x20	; 32
 2d6:	46 d0       	rcall	.+140    	; 0x364 <MotorDir>
			MotorSpeed(pressed[t],pressed[t]);
 2d8:	8d 89       	ldd	r24, Y+21	; 0x15
 2da:	68 2f       	mov	r22, r24
 2dc:	4f d0       	rcall	.+158    	; 0x37c <MotorSpeed>
        sleep(36);
 2de:	84 e2       	ldi	r24, 0x24	; 36
 2e0:	45 d1       	rcall	.+650    	; 0x56c <sleep>
			msleep(1);
			t=0;
 2e2:	c1 2c       	mov	r12, r1
 2e4:	d1 2c       	mov	r13, r1
 2e6:	d5 cf       	rjmp	.-86     	; 0x292 <main+0x24a>
			counter=0;
		}
		else{
			counter++;		
	}	
	while(lineData[LEFT] || lineData[RIGHT] > 900){
 2e8:	89 8d       	ldd	r24, Y+25	; 0x19
 2ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2ec:	85 38       	cpi	r24, 0x85	; 133
 2ee:	93 40       	sbci	r25, 0x03	; 3
 2f0:	d8 f6       	brcc	.-74     	; 0x2a8 <main+0x260>
 2f2:	d3 ce       	rjmp	.-602    	; 0x9a <main+0x52>

000002f4 <Init>:
 2f4:	19 d1       	rcall	.+562    	; 0x528 <Timer2Init>
 2f6:	49 d0       	rcall	.+146    	; 0x38a <MotorInit>
 2f8:	1e d0       	rcall	.+60     	; 0x336 <LEDInit>
 2fa:	4d d1       	rcall	.+666    	; 0x596 <ADCInit>
 2fc:	c7 d0       	rcall	.+398    	; 0x48c <SwitchInit>
 2fe:	78 94       	sei
 300:	08 95       	ret

00000302 <StatusLED>:
 302:	c0 98       	cbi	0x18, 0	; 24
 304:	92 98       	cbi	0x12, 2	; 18
 306:	80 fd       	sbrc	r24, 0
 308:	c0 9a       	sbi	0x18, 0	; 24
 30a:	81 fd       	sbrc	r24, 1
 30c:	92 9a       	sbi	0x12, 2	; 18
 30e:	08 95       	ret

00000310 <FrontLED>:
 310:	88 23       	and	r24, r24
 312:	11 f0       	breq	.+4      	; 0x318 <FrontLED+0x8>
 314:	96 9a       	sbi	0x12, 6	; 18
 316:	08 95       	ret
 318:	96 98       	cbi	0x12, 6	; 18
 31a:	08 95       	ret

0000031c <BackLEDFast>:
 31c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 31e:	f8 94       	cli
 320:	88 23       	and	r24, r24
 322:	19 f0       	breq	.+6      	; 0x32a <BackLEDFast+0xe>
 324:	97 98       	cbi	0x12, 7	; 18
 326:	a1 9a       	sbi	0x14, 1	; 20
 328:	a0 9a       	sbi	0x14, 0	; 20
 32a:	95 b3       	in	r25, 0x15	; 21
 32c:	9c 7f       	andi	r25, 0xFC	; 252
 32e:	98 2b       	or	r25, r24
 330:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 332:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 334:	08 95       	ret

00000336 <LEDInit>:
 336:	b8 9a       	sbi	0x17, 0	; 23
 338:	81 b3       	in	r24, 0x11	; 17
 33a:	84 6c       	ori	r24, 0xC4	; 196
 33c:	81 bb       	out	0x11, r24	; 17
 33e:	96 98       	cbi	0x12, 6	; 18
 340:	97 98       	cbi	0x12, 7	; 18
 342:	a1 9a       	sbi	0x14, 1	; 20
 344:	a0 9a       	sbi	0x14, 0	; 20
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	e9 df       	rcall	.-46     	; 0x31c <BackLEDFast>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	da cf       	rjmp	.-76     	; 0x302 <StatusLED>

0000034e <BackLED>:
 34e:	88 23       	and	r24, r24
 350:	11 f0       	breq	.+4      	; 0x356 <BackLED+0x8>
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	01 c0       	rjmp	.+2      	; 0x358 <BackLED+0xa>
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	61 11       	cpse	r22, r1
 35c:	01 c0       	rjmp	.+2      	; 0x360 <BackLED+0x12>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	89 2b       	or	r24, r25
 362:	dc cf       	rjmp	.-72     	; 0x31c <BackLEDFast>

00000364 <MotorDir>:
 364:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 366:	f8 94       	cli
 368:	92 b3       	in	r25, 0x12	; 18
 36a:	9f 7c       	andi	r25, 0xCF	; 207
 36c:	89 2b       	or	r24, r25
 36e:	82 bb       	out	0x12, r24	; 18
 370:	88 b3       	in	r24, 0x18	; 24
 372:	8f 7c       	andi	r24, 0xCF	; 207
 374:	68 2b       	or	r22, r24
 376:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 378:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 37a:	08 95       	ret

0000037c <MotorSpeed>:
 37c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 37e:	f8 94       	cli
 380:	1b bc       	out	0x2b, r1	; 43
 382:	8a bd       	out	0x2a, r24	; 42
 384:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 386:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 388:	08 95       	ret

0000038a <MotorInit>:
 38a:	87 b3       	in	r24, 0x17	; 23
 38c:	86 63       	ori	r24, 0x36	; 54
 38e:	87 bb       	out	0x17, r24	; 23
 390:	81 b3       	in	r24, 0x11	; 17
 392:	80 63       	ori	r24, 0x30	; 48
 394:	81 bb       	out	0x11, r24	; 17
 396:	81 ea       	ldi	r24, 0xA1	; 161
 398:	8f bd       	out	0x2f, r24	; 47
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	8e bd       	out	0x2e, r24	; 46
 39e:	89 b7       	in	r24, 0x39	; 57
 3a0:	83 7c       	andi	r24, 0xC3	; 195
 3a2:	89 bf       	out	0x39, r24	; 57
 3a4:	60 e2       	ldi	r22, 0x20	; 32
 3a6:	80 e2       	ldi	r24, 0x20	; 32
 3a8:	dd df       	rcall	.-70     	; 0x364 <MotorDir>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	e6 cf       	rjmp	.-52     	; 0x37c <MotorSpeed>

000003b0 <LineData>:
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
 3b8:	f4 d0       	rcall	.+488    	; 0x5a2 <__ADCBlockEnter>
 3ba:	18 2f       	mov	r17, r24
 3bc:	83 e4       	ldi	r24, 0x43	; 67
 3be:	19 d1       	rcall	.+562    	; 0x5f2 <ADCSelectChannel>
 3c0:	21 d1       	rcall	.+578    	; 0x604 <ADCMeasure>
 3c2:	24 b1       	in	r18, 0x04	; 4
 3c4:	35 b1       	in	r19, 0x05	; 5
 3c6:	39 83       	std	Y+1, r19	; 0x01
 3c8:	28 83       	st	Y, r18
 3ca:	82 e4       	ldi	r24, 0x42	; 66
 3cc:	12 d1       	rcall	.+548    	; 0x5f2 <ADCSelectChannel>
 3ce:	1a d1       	rcall	.+564    	; 0x604 <ADCMeasure>
 3d0:	24 b1       	in	r18, 0x04	; 4
 3d2:	35 b1       	in	r19, 0x05	; 5
 3d4:	3b 83       	std	Y+3, r19	; 0x03
 3d6:	2a 83       	std	Y+2, r18	; 0x02
 3d8:	81 2f       	mov	r24, r17
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	f2 c0       	rjmp	.+484    	; 0x5c6 <__ADCBlockLeave>

000003e2 <__vector_14>:
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
 404:	87 b1       	in	r24, 0x07	; 7
 406:	78 94       	sei
 408:	81 36       	cpi	r24, 0x61	; 97
 40a:	19 f0       	breq	.+6      	; 0x412 <__vector_14+0x30>
 40c:	83 36       	cpi	r24, 0x63	; 99
 40e:	a1 f0       	breq	.+40     	; 0x438 <__vector_14+0x56>
 410:	27 c0       	rjmp	.+78     	; 0x460 <__stack+0x1>
 412:	80 91 63 00 	lds	r24, 0x0063
 416:	82 fd       	sbrc	r24, 2
 418:	02 c0       	rjmp	.+4      	; 0x41e <__vector_14+0x3c>
 41a:	80 e6       	ldi	r24, 0x60	; 96
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__vector_14+0x3e>
 41e:	82 e6       	ldi	r24, 0x62	; 98
 420:	f8 94       	cli
 422:	95 b1       	in	r25, 0x05	; 5
 424:	90 93 65 00 	sts	0x0065, r25
 428:	90 91 60 00 	lds	r25, 0x0060
 42c:	90 93 64 00 	sts	0x0064, r25
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	90 93 68 00 	sts	0x0068, r25
 436:	12 c0       	rjmp	.+36     	; 0x45c <__vector_14+0x7a>
 438:	80 91 63 00 	lds	r24, 0x0063
 43c:	80 ff       	sbrs	r24, 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__vector_14+0x62>
 440:	80 e6       	ldi	r24, 0x60	; 96
 442:	01 c0       	rjmp	.+2      	; 0x446 <__vector_14+0x64>
 444:	82 e6       	ldi	r24, 0x62	; 98
 446:	f8 94       	cli
 448:	95 b1       	in	r25, 0x05	; 5
 44a:	90 93 67 00 	sts	0x0067, r25
 44e:	90 91 60 00 	lds	r25, 0x0060
 452:	90 93 66 00 	sts	0x0066, r25
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	90 93 62 00 	sts	0x0062, r25
 45c:	78 94       	sei
 45e:	04 c0       	rjmp	.+8      	; 0x468 <__stack+0x9>
 460:	95 b1       	in	r25, 0x05	; 5
 462:	90 93 60 00 	sts	0x0060, r25
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	d1 d0       	rcall	.+418    	; 0x60c <ADCInterruptEnable>
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <SwitchInit>:
 48c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 48e:	f8 94       	cli
 490:	8b b7       	in	r24, 0x3b	; 59
 492:	8f 77       	andi	r24, 0x7F	; 127
 494:	8b bf       	out	0x3b, r24	; 59
 496:	85 b7       	in	r24, 0x35	; 53
 498:	87 7f       	andi	r24, 0xF7	; 247
 49a:	84 60       	ori	r24, 0x04	; 4
 49c:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 49e:	9f bf       	out	0x3f, r25	; 63
 4a0:	a4 98       	cbi	0x14, 4	; 20
 4a2:	85 b3       	in	r24, 0x15	; 21
 4a4:	80 71       	andi	r24, 0x10	; 16
 4a6:	85 bb       	out	0x15, r24	; 21
 4a8:	8b 98       	cbi	0x11, 3	; 17
 4aa:	93 98       	cbi	0x12, 3	; 18
 4ac:	10 92 69 00 	sts	0x0069, r1
 4b0:	08 95       	ret

000004b2 <PollSwitch>:
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	93 9a       	sbi	0x12, 3	; 18
 4bc:	8b 9a       	sbi	0x11, 3	; 17
 4be:	71 d0       	rcall	.+226    	; 0x5a2 <__ADCBlockEnter>
 4c0:	08 2f       	mov	r16, r24
 4c2:	84 e4       	ldi	r24, 0x44	; 68
 4c4:	96 d0       	rcall	.+300    	; 0x5f2 <ADCSelectChannel>
 4c6:	14 e0       	ldi	r17, 0x04	; 4
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
 4cc:	9b d0       	rcall	.+310    	; 0x604 <ADCMeasure>
 4ce:	24 b1       	in	r18, 0x04	; 4
 4d0:	35 b1       	in	r19, 0x05	; 5
 4d2:	c2 0f       	add	r28, r18
 4d4:	d3 1f       	adc	r29, r19
 4d6:	11 50       	subi	r17, 0x01	; 1
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <PollSwitch+0x1a>
 4da:	80 2f       	mov	r24, r16
 4dc:	74 d0       	rcall	.+232    	; 0x5c6 <__ADCBlockLeave>
 4de:	8b 98       	cbi	0x11, 3	; 17
 4e0:	93 98       	cbi	0x12, 3	; 18
 4e2:	be 01       	movw	r22, r28
 4e4:	76 95       	lsr	r23
 4e6:	67 95       	ror	r22
 4e8:	76 95       	lsr	r23
 4ea:	67 95       	ror	r22
 4ec:	cb 01       	movw	r24, r22
 4ee:	96 95       	lsr	r25
 4f0:	87 95       	ror	r24
 4f2:	98 50       	subi	r25, 0x08	; 8
 4f4:	a0 d0       	rcall	.+320    	; 0x636 <__udivmodhi4>
 4f6:	82 ec       	ldi	r24, 0xC2	; 194
 4f8:	86 0f       	add	r24, r22
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	08 95       	ret

00000504 <__vector_2>:
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	8f 93       	push	r24
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 93 69 00 	sts	0x0069, r24
 516:	8b b7       	in	r24, 0x3b	; 59
 518:	8f 77       	andi	r24, 0x7F	; 127
 51a:	8b bf       	out	0x3b, r24	; 59
 51c:	8f 91       	pop	r24
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <Timer2Init>:
 528:	12 bc       	out	0x22, r1	; 34
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	85 bd       	out	0x25, r24	; 37
 52e:	89 b7       	in	r24, 0x39	; 57
 530:	80 64       	ori	r24, 0x40	; 64
 532:	89 bf       	out	0x39, r24	; 57
 534:	81 e9       	ldi	r24, 0x91	; 145
 536:	83 bd       	out	0x23, r24	; 35
 538:	85 b5       	in	r24, 0x25	; 37
 53a:	87 78       	andi	r24, 0x87	; 135
 53c:	85 bd       	out	0x25, r24	; 37
 53e:	bb 9a       	sbi	0x17, 3	; 23
 540:	c3 98       	cbi	0x18, 3	; 24
 542:	08 95       	ret

00000544 <__vector_4>:
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	8f 93       	push	r24
 550:	84 b5       	in	r24, 0x24	; 36
 552:	8b 5d       	subi	r24, 0xDB	; 219
 554:	84 bd       	out	0x24, r24	; 36
 556:	80 91 6a 00 	lds	r24, 0x006A
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 6a 00 	sts	0x006A, r24
 560:	8f 91       	pop	r24
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <sleep>:
 56c:	f8 94       	cli
 56e:	95 b7       	in	r25, 0x35	; 53
 570:	9f 70       	andi	r25, 0x0F	; 15
 572:	90 68       	ori	r25, 0x80	; 128
 574:	95 bf       	out	0x35, r25	; 53
 576:	78 94       	sei
 578:	90 91 6a 00 	lds	r25, 0x006A
 57c:	89 0f       	add	r24, r25
 57e:	90 91 6a 00 	lds	r25, 0x006A
 582:	98 17       	cp	r25, r24
 584:	11 f0       	breq	.+4      	; 0x58a <sleep+0x1e>
 586:	88 95       	sleep
 588:	fa cf       	rjmp	.-12     	; 0x57e <sleep+0x12>
 58a:	f8 94       	cli
 58c:	85 b7       	in	r24, 0x35	; 53
 58e:	8f 77       	andi	r24, 0x7F	; 127
 590:	85 bf       	out	0x35, r24	; 53
 592:	78 94       	sei
 594:	08 95       	ret

00000596 <ADCInit>:
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	80 93 61 00 	sts	0x0061, r24
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	86 b9       	out	0x06, r24	; 6
 5a0:	08 95       	ret

000005a2 <__ADCBlockEnter>:
 5a2:	2f b7       	in	r18, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	87 b1       	in	r24, 0x07	; 7
 5a8:	96 b1       	in	r25, 0x06	; 6
 5aa:	39 2f       	mov	r19, r25
 5ac:	38 78       	andi	r19, 0x88	; 136
 5ae:	31 f0       	breq	.+12     	; 0x5bc <__ADCBlockEnter+0x1a>
 5b0:	93 ff       	sbrs	r25, 3
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__ADCBlockEnter+0x1c>
 5b4:	80 93 61 00 	sts	0x0061, r24
 5b8:	86 e8       	ldi	r24, 0x86	; 134
 5ba:	86 b9       	out	0x06, r24	; 6
 5bc:	8f ef       	ldi	r24, 0xFF	; 255
 5be:	2f bf       	out	0x3f, r18	; 63
 5c0:	36 99       	sbic	0x06, 6	; 6
 5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <__ADCBlockEnter+0x1e>
 5c4:	08 95       	ret

000005c6 <__ADCBlockLeave>:
 5c6:	3f b7       	in	r19, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	8f 3f       	cpi	r24, 0xFF	; 255
 5cc:	31 f4       	brne	.+12     	; 0x5da <__ADCBlockLeave+0x14>
 5ce:	80 91 61 00 	lds	r24, 0x0061
 5d2:	8f 3f       	cpi	r24, 0xFF	; 255
 5d4:	51 f0       	breq	.+20     	; 0x5ea <__ADCBlockLeave+0x24>
 5d6:	2e ed       	ldi	r18, 0xDE	; 222
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__ADCBlockLeave+0x16>
 5da:	26 ed       	ldi	r18, 0xD6	; 214
 5dc:	97 b1       	in	r25, 0x07	; 7
 5de:	98 27       	eor	r25, r24
 5e0:	90 7c       	andi	r25, 0xC0	; 192
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <__ADCBlockLeave+0x20>
 5e4:	16 b8       	out	0x06, r1	; 6
 5e6:	87 b9       	out	0x07, r24	; 7
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <__ADCBlockLeave+0x26>
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	26 b9       	out	0x06, r18	; 6
 5ee:	3f bf       	out	0x3f, r19	; 63
 5f0:	08 95       	ret

000005f2 <ADCSelectChannel>:
 5f2:	97 b1       	in	r25, 0x07	; 7
 5f4:	98 27       	eor	r25, r24
 5f6:	90 7c       	andi	r25, 0xC0	; 192
 5f8:	09 f0       	breq	.+2      	; 0x5fc <ADCSelectChannel+0xa>
 5fa:	16 b8       	out	0x06, r1	; 6
 5fc:	96 e8       	ldi	r25, 0x86	; 134
 5fe:	96 b9       	out	0x06, r25	; 6
 600:	87 b9       	out	0x07, r24	; 7
 602:	08 95       	ret

00000604 <ADCMeasure>:
 604:	36 9a       	sbi	0x06, 6	; 6
 606:	36 99       	sbic	0x06, 6	; 6
 608:	fe cf       	rjmp	.-4      	; 0x606 <ADCMeasure+0x2>
 60a:	08 95       	ret

0000060c <ADCInterruptEnable>:
 60c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 60e:	f8 94       	cli
 610:	96 b1       	in	r25, 0x06	; 6
 612:	97 ff       	sbrs	r25, 7
 614:	02 c0       	rjmp	.+4      	; 0x61a <ADCInterruptEnable+0xe>
 616:	93 ff       	sbrs	r25, 3
 618:	0a c0       	rjmp	.+20     	; 0x62e <ADCInterruptEnable+0x22>
 61a:	97 b1       	in	r25, 0x07	; 7
 61c:	98 27       	eor	r25, r24
 61e:	90 7c       	andi	r25, 0xC0	; 192
 620:	09 f0       	breq	.+2      	; 0x624 <ADCInterruptEnable+0x18>
 622:	16 b8       	out	0x06, r1	; 6
 624:	36 99       	sbic	0x06, 6	; 6
 626:	16 b8       	out	0x06, r1	; 6
 628:	87 b9       	out	0x07, r24	; 7
 62a:	9e ed       	ldi	r25, 0xDE	; 222
 62c:	96 b9       	out	0x06, r25	; 6
 62e:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 632:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 634:	08 95       	ret

00000636 <__udivmodhi4>:
 636:	aa 1b       	sub	r26, r26
 638:	bb 1b       	sub	r27, r27
 63a:	51 e1       	ldi	r21, 0x11	; 17
 63c:	07 c0       	rjmp	.+14     	; 0x64c <__udivmodhi4_ep>

0000063e <__udivmodhi4_loop>:
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	a6 17       	cp	r26, r22
 644:	b7 07       	cpc	r27, r23
 646:	10 f0       	brcs	.+4      	; 0x64c <__udivmodhi4_ep>
 648:	a6 1b       	sub	r26, r22
 64a:	b7 0b       	sbc	r27, r23

0000064c <__udivmodhi4_ep>:
 64c:	88 1f       	adc	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	5a 95       	dec	r21
 652:	a9 f7       	brne	.-22     	; 0x63e <__udivmodhi4_loop>
 654:	80 95       	com	r24
 656:	90 95       	com	r25
 658:	bc 01       	movw	r22, r24
 65a:	cd 01       	movw	r24, r26
 65c:	08 95       	ret

0000065e <__divmodhi4>:
 65e:	97 fb       	bst	r25, 7
 660:	07 2e       	mov	r0, r23
 662:	16 f4       	brtc	.+4      	; 0x668 <__divmodhi4+0xa>
 664:	00 94       	com	r0
 666:	06 d0       	rcall	.+12     	; 0x674 <__divmodhi4_neg1>
 668:	77 fd       	sbrc	r23, 7
 66a:	08 d0       	rcall	.+16     	; 0x67c <__divmodhi4_neg2>
 66c:	e4 df       	rcall	.-56     	; 0x636 <__udivmodhi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	05 d0       	rcall	.+10     	; 0x67c <__divmodhi4_neg2>
 672:	3e f4       	brtc	.+14     	; 0x682 <__divmodhi4_exit>

00000674 <__divmodhi4_neg1>:
 674:	90 95       	com	r25
 676:	81 95       	neg	r24
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__divmodhi4_neg2>:
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255

00000682 <__divmodhi4_exit>:
 682:	08 95       	ret

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
