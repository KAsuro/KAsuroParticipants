
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000005a8  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000005ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001526  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9b  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fc  00000000  00000000  0000274b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00002f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000619  00000000  00000000  000032d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009d2  00000000  00000000  000038ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  000042bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	c5 c1       	rjmp	.+906    	; 0x390 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	e3 c1       	rjmp	.+966    	; 0x3d0 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	28 c1       	rjmp	.+592    	; 0x26e <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	65 c2       	rjmp	.+1226   	; 0x510 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void)		{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	95 d0       	rcall	.+298    	; 0x180 <Init>
    
    int counter 	= 0;
    int x			= 0;
  56:	c1 2c       	mov	r12, r1
  58:	d1 2c       	mov	r13, r1
		LineData(lineData);
		
		char switches = PollSwitch();
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT] +160)  / 7;
  5a:	37 e0       	ldi	r19, 0x07	; 7
  5c:	a3 2e       	mov	r10, r19
  5e:	b1 2c       	mov	r11, r1
	char f_pressed	= 0;
    
	while(1){
		
		
		uint16_t lineData[] = {0,0};
  60:	1a 82       	std	Y+2, r1	; 0x02
  62:	19 82       	std	Y+1, r1	; 0x01
  64:	1c 82       	std	Y+4, r1	; 0x04
  66:	1b 82       	std	Y+3, r1	; 0x03
		LineData(lineData);
  68:	ce 01       	movw	r24, r28
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	e7 d0       	rcall	.+462    	; 0x23c <LineData>
		
		char switches = PollSwitch();
  6e:	67 d1       	rcall	.+718    	; 0x33e <PollSwitch>
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT] +160)  / 7;
  70:	89 81       	ldd	r24, Y+1	; 0x01
  72:	9a 81       	ldd	r25, Y+2	; 0x02
  74:	80 56       	subi	r24, 0x60	; 96
  76:	9f 4f       	sbci	r25, 0xFF	; 255
  78:	b5 01       	movw	r22, r10
  7a:	37 d2       	rcall	.+1134   	; 0x4ea <__divmodhi4>
  7c:	8b 01       	movw	r16, r22
		right = ((int)lineData[RIGHT]+100)  / 7;
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	9c 81       	ldd	r25, Y+4	; 0x04
  82:	8c 59       	subi	r24, 0x9C	; 156
  84:	9f 4f       	sbci	r25, 0xFF	; 255
  86:	b5 01       	movw	r22, r10
  88:	30 d2       	rcall	.+1120   	; 0x4ea <__divmodhi4>
  8a:	7b 01       	movw	r14, r22
		e_pressed = ( switches & SWITCH(2) );
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
  8c:	09 3c       	cpi	r16, 0xC9	; 201
  8e:	11 05       	cpc	r17, r1
  90:	34 f4       	brge	.+12     	; 0x9e <main+0x56>
			left=200;
		}
		else if(left<100){
  92:	04 36       	cpi	r16, 0x64	; 100
  94:	11 05       	cpc	r17, r1
  96:	2c f4       	brge	.+10     	; 0xa2 <main+0x5a>
			left=0;
  98:	00 e0       	ldi	r16, 0x00	; 0
  9a:	10 e0       	ldi	r17, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x5a>
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
			left=200;
  9e:	08 ec       	ldi	r16, 0xC8	; 200
  a0:	10 e0       	ldi	r17, 0x00	; 0
		}
		else if(left<100){
			left=0;
		}		
		if (right>200){
  a2:	69 3c       	cpi	r22, 0xC9	; 201
  a4:	71 05       	cpc	r23, r1
  a6:	34 f4       	brge	.+12     	; 0xb4 <main+0x6c>
			(right=200);
		}
		else if(right<100){
  a8:	64 36       	cpi	r22, 0x64	; 100
  aa:	71 05       	cpc	r23, r1
  ac:	34 f4       	brge	.+12     	; 0xba <main+0x72>
			right=0;
  ae:	e1 2c       	mov	r14, r1
  b0:	f1 2c       	mov	r15, r1
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x72>
		}
		else if(left<100){
			left=0;
		}		
		if (right>200){
			(right=200);
  b4:	28 ec       	ldi	r18, 0xC8	; 200
  b6:	e2 2e       	mov	r14, r18
  b8:	f1 2c       	mov	r15, r1
		}
		else if(right<100){
			right=0;
		}
			
		MotorDir(FWD,FWD);
  ba:	60 e2       	ldi	r22, 0x20	; 32
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	98 d0       	rcall	.+304    	; 0x1f0 <MotorDir>
		MotorSpeed(right,left);
  c0:	60 2f       	mov	r22, r16
  c2:	8e 2d       	mov	r24, r14
  c4:	a1 d0       	rcall	.+322    	; 0x208 <MotorSpeed>
  c6:	98 e7       	ldi	r25, 0x78	; 120
  c8:	89 2e       	mov	r8, r25
  ca:	91 2c       	mov	r9, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  cc:	84 e2       	ldi	r24, 0x24	; 36
  ce:	94 d1       	rcall	.+808    	; 0x3f8 <sleep>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	88 1a       	sub	r8, r24
  d4:	91 08       	sbc	r9, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  d6:	81 14       	cp	r8, r1
  d8:	91 04       	cpc	r9, r1
  da:	c1 f7       	brne	.-16     	; 0xcc <main+0x84>
		msleep(120);
						
		//LED Steuerung
		
		if(left > right){
  dc:	e0 16       	cp	r14, r16
  de:	f1 06       	cpc	r15, r17
  e0:	1c f4       	brge	.+6      	; 0xe8 <main+0xa0>
			BackLED(OFF,ON);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	79 d0       	rcall	.+242    	; 0x1da <BackLED>
		}
		if(right > left){
  e8:	0e 15       	cp	r16, r14
  ea:	1f 05       	cpc	r17, r15
  ec:	1c f4       	brge	.+6      	; 0xf4 <main+0xac>
			BackLED(ON,OFF);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	73 d0       	rcall	.+230    	; 0x1da <BackLED>
		}
		if(right == left){
  f4:	e0 16       	cp	r14, r16
  f6:	f1 06       	cpc	r15, r17
  f8:	19 f4       	brne	.+6      	; 0x100 <main+0xb8>
			BackLED(ON,ON);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	6d d0       	rcall	.+218    	; 0x1da <BackLED>
		}
		if(right && left < 80){
 100:	e1 14       	cp	r14, r1
 102:	f1 04       	cpc	r15, r1
 104:	99 f0       	breq	.+38     	; 0x12c <main+0xe4>
 106:	00 35       	cpi	r16, 0x50	; 80
 108:	11 05       	cpc	r17, r1
 10a:	14 f4       	brge	.+4      	; 0x110 <main+0xc8>
			StatusLED(RED);
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	3f d0       	rcall	.+126    	; 0x18e <StatusLED>
		}
		if(80 < right && left < 120){
 110:	81 e5       	ldi	r24, 0x51	; 81
 112:	e8 16       	cp	r14, r24
 114:	f1 04       	cpc	r15, r1
 116:	2c f0       	brlt	.+10     	; 0x122 <main+0xda>
 118:	08 37       	cpi	r16, 0x78	; 120
 11a:	11 05       	cpc	r17, r1
 11c:	14 f4       	brge	.+4      	; 0x122 <main+0xda>
			StatusLED(YELLOW);
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	36 d0       	rcall	.+108    	; 0x18e <StatusLED>
		}
		if(right && left > 120){
 122:	09 37       	cpi	r16, 0x79	; 121
 124:	11 05       	cpc	r17, r1
 126:	14 f0       	brlt	.+4      	; 0x12c <main+0xe4>
			StatusLED(GREEN);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	31 d0       	rcall	.+98     	; 0x18e <StatusLED>
		}
		
			if(x == 29){
 12c:	8d e1       	ldi	r24, 0x1D	; 29
 12e:	c8 16       	cp	r12, r24
 130:	d1 04       	cpc	r13, r1
 132:	61 f4       	brne	.+24     	; 0x14c <main+0x104>
				FrontLED(ON);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	32 d0       	rcall	.+100    	; 0x19c <FrontLED>
 138:	08 ec       	ldi	r16, 0xC8	; 200
 13a:	10 e0       	ldi	r17, 0x00	; 0
        sleep(36);
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	5c d1       	rcall	.+696    	; 0x3f8 <sleep>
 140:	01 50       	subi	r16, 0x01	; 1
 142:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 144:	01 15       	cp	r16, r1
 146:	11 05       	cpc	r17, r1
 148:	c9 f7       	brne	.-14     	; 0x13c <main+0xf4>
 14a:	10 c0       	rjmp	.+32     	; 0x16c <main+0x124>
				msleep(200);
				x=0;
		    }
		    if(x == 15){				
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	c8 16       	cp	r12, r24
 150:	d1 04       	cpc	r13, r1
 152:	71 f4       	brne	.+28     	; 0x170 <main+0x128>
				FrontLED(OFF);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	22 d0       	rcall	.+68     	; 0x19c <FrontLED>
 158:	08 ec       	ldi	r16, 0xC8	; 200
 15a:	10 e0       	ldi	r17, 0x00	; 0
        sleep(36);
 15c:	84 e2       	ldi	r24, 0x24	; 36
 15e:	4c d1       	rcall	.+664    	; 0x3f8 <sleep>
 160:	01 50       	subi	r16, 0x01	; 1
 162:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 164:	01 15       	cp	r16, r1
 166:	11 05       	cpc	r17, r1
 168:	c9 f7       	brne	.-14     	; 0x15c <main+0x114>
 16a:	06 c0       	rjmp	.+12     	; 0x178 <main+0x130>
		}
		
			if(x == 29){
				FrontLED(ON);
				msleep(200);
				x=0;
 16c:	c1 2c       	mov	r12, r1
 16e:	d1 2c       	mov	r13, r1
				FrontLED(OFF);
				msleep(200);
				x++;
				}
			else{
				x++;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	c8 1a       	sub	r12, r24
 174:	d8 0a       	sbc	r13, r24
 176:	74 cf       	rjmp	.-280    	; 0x60 <main+0x18>
				x=0;
		    }
		    if(x == 15){				
				FrontLED(OFF);
				msleep(200);
				x++;
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	c8 2e       	mov	r12, r24
 17c:	d1 2c       	mov	r13, r1
				}
			else{
				x++;
				}
			
		}	
 17e:	70 cf       	rjmp	.-288    	; 0x60 <main+0x18>

00000180 <Init>:
 180:	19 d1       	rcall	.+562    	; 0x3b4 <Timer2Init>
 182:	49 d0       	rcall	.+146    	; 0x216 <MotorInit>
 184:	1e d0       	rcall	.+60     	; 0x1c2 <LEDInit>
 186:	4d d1       	rcall	.+666    	; 0x422 <ADCInit>
 188:	c7 d0       	rcall	.+398    	; 0x318 <SwitchInit>
 18a:	78 94       	sei
 18c:	08 95       	ret

0000018e <StatusLED>:
 18e:	c0 98       	cbi	0x18, 0	; 24
 190:	92 98       	cbi	0x12, 2	; 18
 192:	80 fd       	sbrc	r24, 0
 194:	c0 9a       	sbi	0x18, 0	; 24
 196:	81 fd       	sbrc	r24, 1
 198:	92 9a       	sbi	0x12, 2	; 18
 19a:	08 95       	ret

0000019c <FrontLED>:
 19c:	88 23       	and	r24, r24
 19e:	11 f0       	breq	.+4      	; 0x1a4 <FrontLED+0x8>
 1a0:	96 9a       	sbi	0x12, 6	; 18
 1a2:	08 95       	ret
 1a4:	96 98       	cbi	0x12, 6	; 18
 1a6:	08 95       	ret

000001a8 <BackLEDFast>:
 1a8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1aa:	f8 94       	cli
 1ac:	88 23       	and	r24, r24
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <BackLEDFast+0xe>
 1b0:	97 98       	cbi	0x12, 7	; 18
 1b2:	a1 9a       	sbi	0x14, 1	; 20
 1b4:	a0 9a       	sbi	0x14, 0	; 20
 1b6:	95 b3       	in	r25, 0x15	; 21
 1b8:	9c 7f       	andi	r25, 0xFC	; 252
 1ba:	98 2b       	or	r25, r24
 1bc:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1be:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1c0:	08 95       	ret

000001c2 <LEDInit>:
 1c2:	b8 9a       	sbi	0x17, 0	; 23
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	84 6c       	ori	r24, 0xC4	; 196
 1c8:	81 bb       	out	0x11, r24	; 17
 1ca:	96 98       	cbi	0x12, 6	; 18
 1cc:	97 98       	cbi	0x12, 7	; 18
 1ce:	a1 9a       	sbi	0x14, 1	; 20
 1d0:	a0 9a       	sbi	0x14, 0	; 20
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	e9 df       	rcall	.-46     	; 0x1a8 <BackLEDFast>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	da cf       	rjmp	.-76     	; 0x18e <StatusLED>

000001da <BackLED>:
 1da:	88 23       	and	r24, r24
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <BackLED+0x8>
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <BackLED+0xa>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	61 11       	cpse	r22, r1
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <BackLED+0x12>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	89 2b       	or	r24, r25
 1ee:	dc cf       	rjmp	.-72     	; 0x1a8 <BackLEDFast>

000001f0 <MotorDir>:
 1f0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1f2:	f8 94       	cli
 1f4:	92 b3       	in	r25, 0x12	; 18
 1f6:	9f 7c       	andi	r25, 0xCF	; 207
 1f8:	89 2b       	or	r24, r25
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	8f 7c       	andi	r24, 0xCF	; 207
 200:	68 2b       	or	r22, r24
 202:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 204:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 206:	08 95       	ret

00000208 <MotorSpeed>:
 208:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 20a:	f8 94       	cli
 20c:	1b bc       	out	0x2b, r1	; 43
 20e:	8a bd       	out	0x2a, r24	; 42
 210:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 212:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 214:	08 95       	ret

00000216 <MotorInit>:
 216:	87 b3       	in	r24, 0x17	; 23
 218:	86 63       	ori	r24, 0x36	; 54
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	81 b3       	in	r24, 0x11	; 17
 21e:	80 63       	ori	r24, 0x30	; 48
 220:	81 bb       	out	0x11, r24	; 17
 222:	81 ea       	ldi	r24, 0xA1	; 161
 224:	8f bd       	out	0x2f, r24	; 47
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	8e bd       	out	0x2e, r24	; 46
 22a:	89 b7       	in	r24, 0x39	; 57
 22c:	83 7c       	andi	r24, 0xC3	; 195
 22e:	89 bf       	out	0x39, r24	; 57
 230:	60 e2       	ldi	r22, 0x20	; 32
 232:	80 e2       	ldi	r24, 0x20	; 32
 234:	dd df       	rcall	.-70     	; 0x1f0 <MotorDir>
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	e6 cf       	rjmp	.-52     	; 0x208 <MotorSpeed>

0000023c <LineData>:
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 244:	f4 d0       	rcall	.+488    	; 0x42e <__ADCBlockEnter>
 246:	18 2f       	mov	r17, r24
 248:	83 e4       	ldi	r24, 0x43	; 67
 24a:	19 d1       	rcall	.+562    	; 0x47e <ADCSelectChannel>
 24c:	21 d1       	rcall	.+578    	; 0x490 <ADCMeasure>
 24e:	24 b1       	in	r18, 0x04	; 4
 250:	35 b1       	in	r19, 0x05	; 5
 252:	39 83       	std	Y+1, r19	; 0x01
 254:	28 83       	st	Y, r18
 256:	82 e4       	ldi	r24, 0x42	; 66
 258:	12 d1       	rcall	.+548    	; 0x47e <ADCSelectChannel>
 25a:	1a d1       	rcall	.+564    	; 0x490 <ADCMeasure>
 25c:	24 b1       	in	r18, 0x04	; 4
 25e:	35 b1       	in	r19, 0x05	; 5
 260:	3b 83       	std	Y+3, r19	; 0x03
 262:	2a 83       	std	Y+2, r18	; 0x02
 264:	81 2f       	mov	r24, r17
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	f2 c0       	rjmp	.+484    	; 0x452 <__ADCBlockLeave>

0000026e <__vector_14>:
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	87 b1       	in	r24, 0x07	; 7
 292:	78 94       	sei
 294:	81 36       	cpi	r24, 0x61	; 97
 296:	19 f0       	breq	.+6      	; 0x29e <__vector_14+0x30>
 298:	83 36       	cpi	r24, 0x63	; 99
 29a:	a1 f0       	breq	.+40     	; 0x2c4 <__vector_14+0x56>
 29c:	27 c0       	rjmp	.+78     	; 0x2ec <__vector_14+0x7e>
 29e:	80 91 63 00 	lds	r24, 0x0063
 2a2:	82 fd       	sbrc	r24, 2
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_14+0x3c>
 2a6:	80 e6       	ldi	r24, 0x60	; 96
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <__vector_14+0x3e>
 2aa:	82 e6       	ldi	r24, 0x62	; 98
 2ac:	f8 94       	cli
 2ae:	95 b1       	in	r25, 0x05	; 5
 2b0:	90 93 65 00 	sts	0x0065, r25
 2b4:	90 91 60 00 	lds	r25, 0x0060
 2b8:	90 93 64 00 	sts	0x0064, r25
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	90 93 68 00 	sts	0x0068, r25
 2c2:	12 c0       	rjmp	.+36     	; 0x2e8 <__vector_14+0x7a>
 2c4:	80 91 63 00 	lds	r24, 0x0063
 2c8:	80 ff       	sbrs	r24, 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <__vector_14+0x62>
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <__vector_14+0x64>
 2d0:	82 e6       	ldi	r24, 0x62	; 98
 2d2:	f8 94       	cli
 2d4:	95 b1       	in	r25, 0x05	; 5
 2d6:	90 93 67 00 	sts	0x0067, r25
 2da:	90 91 60 00 	lds	r25, 0x0060
 2de:	90 93 66 00 	sts	0x0066, r25
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	90 93 62 00 	sts	0x0062, r25
 2e8:	78 94       	sei
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <__vector_14+0x86>
 2ec:	95 b1       	in	r25, 0x05	; 5
 2ee:	90 93 60 00 	sts	0x0060, r25
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	d1 d0       	rcall	.+418    	; 0x498 <ADCInterruptEnable>
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <SwitchInit>:
 318:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 31a:	f8 94       	cli
 31c:	8b b7       	in	r24, 0x3b	; 59
 31e:	8f 77       	andi	r24, 0x7F	; 127
 320:	8b bf       	out	0x3b, r24	; 59
 322:	85 b7       	in	r24, 0x35	; 53
 324:	87 7f       	andi	r24, 0xF7	; 247
 326:	84 60       	ori	r24, 0x04	; 4
 328:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 32a:	9f bf       	out	0x3f, r25	; 63
 32c:	a4 98       	cbi	0x14, 4	; 20
 32e:	85 b3       	in	r24, 0x15	; 21
 330:	80 71       	andi	r24, 0x10	; 16
 332:	85 bb       	out	0x15, r24	; 21
 334:	8b 98       	cbi	0x11, 3	; 17
 336:	93 98       	cbi	0x12, 3	; 18
 338:	10 92 69 00 	sts	0x0069, r1
 33c:	08 95       	ret

0000033e <PollSwitch>:
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	93 9a       	sbi	0x12, 3	; 18
 348:	8b 9a       	sbi	0x11, 3	; 17
 34a:	71 d0       	rcall	.+226    	; 0x42e <__ADCBlockEnter>
 34c:	08 2f       	mov	r16, r24
 34e:	84 e4       	ldi	r24, 0x44	; 68
 350:	96 d0       	rcall	.+300    	; 0x47e <ADCSelectChannel>
 352:	14 e0       	ldi	r17, 0x04	; 4
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	d0 e0       	ldi	r29, 0x00	; 0
 358:	9b d0       	rcall	.+310    	; 0x490 <ADCMeasure>
 35a:	24 b1       	in	r18, 0x04	; 4
 35c:	35 b1       	in	r19, 0x05	; 5
 35e:	c2 0f       	add	r28, r18
 360:	d3 1f       	adc	r29, r19
 362:	11 50       	subi	r17, 0x01	; 1
 364:	c9 f7       	brne	.-14     	; 0x358 <PollSwitch+0x1a>
 366:	80 2f       	mov	r24, r16
 368:	74 d0       	rcall	.+232    	; 0x452 <__ADCBlockLeave>
 36a:	8b 98       	cbi	0x11, 3	; 17
 36c:	93 98       	cbi	0x12, 3	; 18
 36e:	be 01       	movw	r22, r28
 370:	76 95       	lsr	r23
 372:	67 95       	ror	r22
 374:	76 95       	lsr	r23
 376:	67 95       	ror	r22
 378:	cb 01       	movw	r24, r22
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	98 50       	subi	r25, 0x08	; 8
 380:	a0 d0       	rcall	.+320    	; 0x4c2 <__udivmodhi4>
 382:	82 ec       	ldi	r24, 0xC2	; 194
 384:	86 0f       	add	r24, r22
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <__vector_2>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 69 00 	sts	0x0069, r24
 3a2:	8b b7       	in	r24, 0x3b	; 59
 3a4:	8f 77       	andi	r24, 0x7F	; 127
 3a6:	8b bf       	out	0x3b, r24	; 59
 3a8:	8f 91       	pop	r24
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <Timer2Init>:
 3b4:	12 bc       	out	0x22, r1	; 34
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	85 bd       	out	0x25, r24	; 37
 3ba:	89 b7       	in	r24, 0x39	; 57
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	89 bf       	out	0x39, r24	; 57
 3c0:	81 e9       	ldi	r24, 0x91	; 145
 3c2:	83 bd       	out	0x23, r24	; 35
 3c4:	85 b5       	in	r24, 0x25	; 37
 3c6:	87 78       	andi	r24, 0x87	; 135
 3c8:	85 bd       	out	0x25, r24	; 37
 3ca:	bb 9a       	sbi	0x17, 3	; 23
 3cc:	c3 98       	cbi	0x18, 3	; 24
 3ce:	08 95       	ret

000003d0 <__vector_4>:
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	8f 93       	push	r24
 3dc:	84 b5       	in	r24, 0x24	; 36
 3de:	8b 5d       	subi	r24, 0xDB	; 219
 3e0:	84 bd       	out	0x24, r24	; 36
 3e2:	80 91 6a 00 	lds	r24, 0x006A
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	80 93 6a 00 	sts	0x006A, r24
 3ec:	8f 91       	pop	r24
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <sleep>:
 3f8:	f8 94       	cli
 3fa:	95 b7       	in	r25, 0x35	; 53
 3fc:	9f 70       	andi	r25, 0x0F	; 15
 3fe:	90 68       	ori	r25, 0x80	; 128
 400:	95 bf       	out	0x35, r25	; 53
 402:	78 94       	sei
 404:	90 91 6a 00 	lds	r25, 0x006A
 408:	89 0f       	add	r24, r25
 40a:	90 91 6a 00 	lds	r25, 0x006A
 40e:	98 17       	cp	r25, r24
 410:	11 f0       	breq	.+4      	; 0x416 <sleep+0x1e>
 412:	88 95       	sleep
 414:	fa cf       	rjmp	.-12     	; 0x40a <sleep+0x12>
 416:	f8 94       	cli
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	8f 77       	andi	r24, 0x7F	; 127
 41c:	85 bf       	out	0x35, r24	; 53
 41e:	78 94       	sei
 420:	08 95       	ret

00000422 <ADCInit>:
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	80 93 61 00 	sts	0x0061, r24
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	86 b9       	out	0x06, r24	; 6
 42c:	08 95       	ret

0000042e <__ADCBlockEnter>:
 42e:	2f b7       	in	r18, 0x3f	; 63
 430:	f8 94       	cli
 432:	87 b1       	in	r24, 0x07	; 7
 434:	96 b1       	in	r25, 0x06	; 6
 436:	39 2f       	mov	r19, r25
 438:	38 78       	andi	r19, 0x88	; 136
 43a:	31 f0       	breq	.+12     	; 0x448 <__ADCBlockEnter+0x1a>
 43c:	93 ff       	sbrs	r25, 3
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__ADCBlockEnter+0x1c>
 440:	80 93 61 00 	sts	0x0061, r24
 444:	86 e8       	ldi	r24, 0x86	; 134
 446:	86 b9       	out	0x06, r24	; 6
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	2f bf       	out	0x3f, r18	; 63
 44c:	36 99       	sbic	0x06, 6	; 6
 44e:	fe cf       	rjmp	.-4      	; 0x44c <__ADCBlockEnter+0x1e>
 450:	08 95       	ret

00000452 <__ADCBlockLeave>:
 452:	3f b7       	in	r19, 0x3f	; 63
 454:	f8 94       	cli
 456:	8f 3f       	cpi	r24, 0xFF	; 255
 458:	31 f4       	brne	.+12     	; 0x466 <__stack+0x7>
 45a:	80 91 61 00 	lds	r24, 0x0061
 45e:	8f 3f       	cpi	r24, 0xFF	; 255
 460:	51 f0       	breq	.+20     	; 0x476 <__stack+0x17>
 462:	2e ed       	ldi	r18, 0xDE	; 222
 464:	01 c0       	rjmp	.+2      	; 0x468 <__stack+0x9>
 466:	26 ed       	ldi	r18, 0xD6	; 214
 468:	97 b1       	in	r25, 0x07	; 7
 46a:	98 27       	eor	r25, r24
 46c:	90 7c       	andi	r25, 0xC0	; 192
 46e:	09 f0       	breq	.+2      	; 0x472 <__stack+0x13>
 470:	16 b8       	out	0x06, r1	; 6
 472:	87 b9       	out	0x07, r24	; 7
 474:	01 c0       	rjmp	.+2      	; 0x478 <__stack+0x19>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	26 b9       	out	0x06, r18	; 6
 47a:	3f bf       	out	0x3f, r19	; 63
 47c:	08 95       	ret

0000047e <ADCSelectChannel>:
 47e:	97 b1       	in	r25, 0x07	; 7
 480:	98 27       	eor	r25, r24
 482:	90 7c       	andi	r25, 0xC0	; 192
 484:	09 f0       	breq	.+2      	; 0x488 <ADCSelectChannel+0xa>
 486:	16 b8       	out	0x06, r1	; 6
 488:	96 e8       	ldi	r25, 0x86	; 134
 48a:	96 b9       	out	0x06, r25	; 6
 48c:	87 b9       	out	0x07, r24	; 7
 48e:	08 95       	ret

00000490 <ADCMeasure>:
 490:	36 9a       	sbi	0x06, 6	; 6
 492:	36 99       	sbic	0x06, 6	; 6
 494:	fe cf       	rjmp	.-4      	; 0x492 <ADCMeasure+0x2>
 496:	08 95       	ret

00000498 <ADCInterruptEnable>:
 498:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 49a:	f8 94       	cli
 49c:	96 b1       	in	r25, 0x06	; 6
 49e:	97 ff       	sbrs	r25, 7
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <ADCInterruptEnable+0xe>
 4a2:	93 ff       	sbrs	r25, 3
 4a4:	0a c0       	rjmp	.+20     	; 0x4ba <ADCInterruptEnable+0x22>
 4a6:	97 b1       	in	r25, 0x07	; 7
 4a8:	98 27       	eor	r25, r24
 4aa:	90 7c       	andi	r25, 0xC0	; 192
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <ADCInterruptEnable+0x18>
 4ae:	16 b8       	out	0x06, r1	; 6
 4b0:	36 99       	sbic	0x06, 6	; 6
 4b2:	16 b8       	out	0x06, r1	; 6
 4b4:	87 b9       	out	0x07, r24	; 7
 4b6:	9e ed       	ldi	r25, 0xDE	; 222
 4b8:	96 b9       	out	0x06, r25	; 6
 4ba:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4be:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 4c0:	08 95       	ret

000004c2 <__udivmodhi4>:
 4c2:	aa 1b       	sub	r26, r26
 4c4:	bb 1b       	sub	r27, r27
 4c6:	51 e1       	ldi	r21, 0x11	; 17
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__udivmodhi4_ep>

000004ca <__udivmodhi4_loop>:
 4ca:	aa 1f       	adc	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	a6 17       	cp	r26, r22
 4d0:	b7 07       	cpc	r27, r23
 4d2:	10 f0       	brcs	.+4      	; 0x4d8 <__udivmodhi4_ep>
 4d4:	a6 1b       	sub	r26, r22
 4d6:	b7 0b       	sbc	r27, r23

000004d8 <__udivmodhi4_ep>:
 4d8:	88 1f       	adc	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	5a 95       	dec	r21
 4de:	a9 f7       	brne	.-22     	; 0x4ca <__udivmodhi4_loop>
 4e0:	80 95       	com	r24
 4e2:	90 95       	com	r25
 4e4:	bc 01       	movw	r22, r24
 4e6:	cd 01       	movw	r24, r26
 4e8:	08 95       	ret

000004ea <__divmodhi4>:
 4ea:	97 fb       	bst	r25, 7
 4ec:	07 2e       	mov	r0, r23
 4ee:	16 f4       	brtc	.+4      	; 0x4f4 <__divmodhi4+0xa>
 4f0:	00 94       	com	r0
 4f2:	06 d0       	rcall	.+12     	; 0x500 <__divmodhi4_neg1>
 4f4:	77 fd       	sbrc	r23, 7
 4f6:	08 d0       	rcall	.+16     	; 0x508 <__divmodhi4_neg2>
 4f8:	e4 df       	rcall	.-56     	; 0x4c2 <__udivmodhi4>
 4fa:	07 fc       	sbrc	r0, 7
 4fc:	05 d0       	rcall	.+10     	; 0x508 <__divmodhi4_neg2>
 4fe:	3e f4       	brtc	.+14     	; 0x50e <__divmodhi4_exit>

00000500 <__divmodhi4_neg1>:
 500:	90 95       	com	r25
 502:	81 95       	neg	r24
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	08 95       	ret

00000508 <__divmodhi4_neg2>:
 508:	70 95       	com	r23
 50a:	61 95       	neg	r22
 50c:	7f 4f       	sbci	r23, 0xFF	; 255

0000050e <__divmodhi4_exit>:
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
