
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000672  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017d2  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7f  00000000  00000000  00002026  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000851  00000000  00000000  00002aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  000032f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000619  00000000  00000000  00003684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba8  00000000  00000000  00003c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00004845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	2a c2       	rjmp	.+1108   	; 0x45a <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	48 c2       	rjmp	.+1168   	; 0x49a <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	8d c1       	rjmp	.+794    	; 0x338 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	ca c2       	rjmp	.+1428   	; 0x5da <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void)		{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	fa d0       	rcall	.+500    	; 0x24a <Init>
    
    int counter 	= 0;
    int x			= 0;
  56:	c1 2c       	mov	r12, r1
  58:	d1 2c       	mov	r13, r1
#include <asuro/asuro.h>

void main(void)		{
    Init();
    
    int counter 	= 0;
  5a:	a1 2c       	mov	r10, r1
  5c:	b1 2c       	mov	r11, r1
		LineData(lineData);
		
		char switches = PollSwitch();
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT] +160)  / 7;
  5e:	37 e0       	ldi	r19, 0x07	; 7
  60:	83 2e       	mov	r8, r19
  62:	91 2c       	mov	r9, r1
	char f_pressed	= 0;
    
	while(1){
		
		
		uint16_t lineData[] = {0,0};
  64:	1a 82       	std	Y+2, r1	; 0x02
  66:	19 82       	std	Y+1, r1	; 0x01
  68:	1c 82       	std	Y+4, r1	; 0x04
  6a:	1b 82       	std	Y+3, r1	; 0x03
		LineData(lineData);
  6c:	ce 01       	movw	r24, r28
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	4a d1       	rcall	.+660    	; 0x306 <LineData>
		
		char switches = PollSwitch();
  72:	ca d1       	rcall	.+916    	; 0x408 <PollSwitch>
  74:	78 2e       	mov	r7, r24
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT] +160)  / 7;
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	9a 81       	ldd	r25, Y+2	; 0x02
  7a:	80 56       	subi	r24, 0x60	; 96
  7c:	9f 4f       	sbci	r25, 0xFF	; 255
  7e:	b4 01       	movw	r22, r8
  80:	99 d2       	rcall	.+1330   	; 0x5b4 <__divmodhi4>
  82:	8b 01       	movw	r16, r22
		right = ((int)lineData[RIGHT]+100)  / 7;
  84:	8b 81       	ldd	r24, Y+3	; 0x03
  86:	9c 81       	ldd	r25, Y+4	; 0x04
  88:	8c 59       	subi	r24, 0x9C	; 156
  8a:	9f 4f       	sbci	r25, 0xFF	; 255
  8c:	b4 01       	movw	r22, r8
  8e:	92 d2       	rcall	.+1316   	; 0x5b4 <__divmodhi4>
  90:	7b 01       	movw	r14, r22
		e_pressed = ( switches & SWITCH(2) );
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
  92:	09 3c       	cpi	r16, 0xC9	; 201
  94:	11 05       	cpc	r17, r1
  96:	34 f4       	brge	.+12     	; 0xa4 <main+0x5c>
			left=200;
		}
		else if(left<100){
  98:	04 36       	cpi	r16, 0x64	; 100
  9a:	11 05       	cpc	r17, r1
  9c:	2c f4       	brge	.+10     	; 0xa8 <main+0x60>
			left=0;
  9e:	00 e0       	ldi	r16, 0x00	; 0
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x60>
		f_pressed = ( switches & SWITCH(5) );
		
		//fahren
		
		if (left>200 ){
			left=200;
  a4:	08 ec       	ldi	r16, 0xC8	; 200
  a6:	10 e0       	ldi	r17, 0x00	; 0
		}
		else if(left<100){
			left=0;
		}		
		if (right>200){
  a8:	69 3c       	cpi	r22, 0xC9	; 201
  aa:	71 05       	cpc	r23, r1
  ac:	34 f4       	brge	.+12     	; 0xba <main+0x72>
			(right=200);
		}
		else if(right<100){
  ae:	64 36       	cpi	r22, 0x64	; 100
  b0:	71 05       	cpc	r23, r1
  b2:	34 f4       	brge	.+12     	; 0xc0 <main+0x78>
			right=0;
  b4:	e1 2c       	mov	r14, r1
  b6:	f1 2c       	mov	r15, r1
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x78>
		}
		else if(left<100){
			left=0;
		}		
		if (right>200){
			(right=200);
  ba:	28 ec       	ldi	r18, 0xC8	; 200
  bc:	e2 2e       	mov	r14, r18
  be:	f1 2c       	mov	r15, r1
		}
		else if(right<100){
			right=0;
		}
			
		MotorDir(FWD,FWD);
  c0:	60 e2       	ldi	r22, 0x20	; 32
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	fa d0       	rcall	.+500    	; 0x2ba <MotorDir>
		MotorSpeed(right,left);
  c6:	60 2f       	mov	r22, r16
  c8:	8e 2d       	mov	r24, r14
  ca:	03 d1       	rcall	.+518    	; 0x2d2 <MotorSpeed>
  cc:	98 e7       	ldi	r25, 0x78	; 120
  ce:	49 2e       	mov	r4, r25
  d0:	51 2c       	mov	r5, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  d2:	84 e2       	ldi	r24, 0x24	; 36
  d4:	f6 d1       	rcall	.+1004   	; 0x4c2 <sleep>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	48 1a       	sub	r4, r24
  da:	51 08       	sbc	r5, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  dc:	41 14       	cp	r4, r1
  de:	51 04       	cpc	r5, r1
  e0:	c1 f7       	brne	.-16     	; 0xd2 <main+0x8a>
		msleep(120);
						
		//LED Steuerung
		
		if(left > right){
  e2:	e0 16       	cp	r14, r16
  e4:	f1 06       	cpc	r15, r17
  e6:	1c f4       	brge	.+6      	; 0xee <main+0xa6>
			BackLED(OFF,ON);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	db d0       	rcall	.+438    	; 0x2a4 <BackLED>
		}
		if(right > left){
  ee:	0e 15       	cp	r16, r14
  f0:	1f 05       	cpc	r17, r15
  f2:	1c f4       	brge	.+6      	; 0xfa <main+0xb2>
			BackLED(ON,OFF);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	d5 d0       	rcall	.+426    	; 0x2a4 <BackLED>
		}
		if(right == left){
  fa:	e0 16       	cp	r14, r16
  fc:	f1 06       	cpc	r15, r17
  fe:	19 f4       	brne	.+6      	; 0x106 <main+0xbe>
			BackLED(ON,ON);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	cf d0       	rcall	.+414    	; 0x2a4 <BackLED>
		}
		if(right && left < 80){
 106:	e1 14       	cp	r14, r1
 108:	f1 04       	cpc	r15, r1
 10a:	99 f0       	breq	.+38     	; 0x132 <main+0xea>
 10c:	00 35       	cpi	r16, 0x50	; 80
 10e:	11 05       	cpc	r17, r1
 110:	14 f4       	brge	.+4      	; 0x116 <main+0xce>
			StatusLED(RED);
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	a1 d0       	rcall	.+322    	; 0x258 <StatusLED>
		}
		if(80 < right && left < 120){
 116:	81 e5       	ldi	r24, 0x51	; 81
 118:	e8 16       	cp	r14, r24
 11a:	f1 04       	cpc	r15, r1
 11c:	2c f0       	brlt	.+10     	; 0x128 <main+0xe0>
 11e:	08 37       	cpi	r16, 0x78	; 120
 120:	11 05       	cpc	r17, r1
 122:	14 f4       	brge	.+4      	; 0x128 <main+0xe0>
			StatusLED(YELLOW);
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	98 d0       	rcall	.+304    	; 0x258 <StatusLED>
		}
		if(right && left > 120){
 128:	09 37       	cpi	r16, 0x79	; 121
 12a:	11 05       	cpc	r17, r1
 12c:	14 f0       	brlt	.+4      	; 0x132 <main+0xea>
			StatusLED(GREEN);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	93 d0       	rcall	.+294    	; 0x258 <StatusLED>
		}
		
			if(x == 3000){
 132:	88 eb       	ldi	r24, 0xB8	; 184
 134:	c8 16       	cp	r12, r24
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	d8 06       	cpc	r13, r24
 13a:	29 f4       	brne	.+10     	; 0x146 <main+0xfe>
				FrontLED(ON);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	93 d0       	rcall	.+294    	; 0x266 <FrontLED>
				x=0;
 140:	c1 2c       	mov	r12, r1
 142:	d1 2c       	mov	r13, r1
 144:	0a c0       	rjmp	.+20     	; 0x15a <main+0x112>
		    }
		    if(x == 15){				
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	c8 16       	cp	r12, r24
 14a:	d1 04       	cpc	r13, r1
 14c:	31 f4       	brne	.+12     	; 0x15a <main+0x112>
				FrontLED(OFF);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	8a d0       	rcall	.+276    	; 0x266 <FrontLED>
				x++;
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	c8 2e       	mov	r12, r24
 156:	d1 2c       	mov	r13, r1
 158:	03 c0       	rjmp	.+6      	; 0x160 <main+0x118>
			}
			else{
				x++;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	c8 1a       	sub	r12, r24
 15e:	d8 0a       	sbc	r13, r24
 160:	87 2d       	mov	r24, r7
 162:	82 71       	andi	r24, 0x12	; 18
			
			
		
		//Rückfahrt
		
		if (a_pressed || b_pressed > 0) {
 164:	e1 f0       	breq	.+56     	; 0x19e <main+0x156>
			StatusLED(RED);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	77 d0       	rcall	.+238    	; 0x258 <StatusLED>
			BackLED(OFF,ON);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	9a d0       	rcall	.+308    	; 0x2a4 <BackLED>
        sleep(36);
 170:	84 e2       	ldi	r24, 0x24	; 36
 172:	a7 d1       	rcall	.+846    	; 0x4c2 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	95 d0       	rcall	.+298    	; 0x2a4 <BackLED>
			MotorDir(RWD,RWD);
 17a:	60 e1       	ldi	r22, 0x10	; 16
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	9d d0       	rcall	.+314    	; 0x2ba <MotorDir>
			MotorSpeed(120,120);
 180:	68 e7       	ldi	r22, 0x78	; 120
 182:	88 e7       	ldi	r24, 0x78	; 120
 184:	a6 d0       	rcall	.+332    	; 0x2d2 <MotorSpeed>
 186:	08 e5       	ldi	r16, 0x58	; 88
 188:	12 e0       	ldi	r17, 0x02	; 2
 18a:	84 e2       	ldi	r24, 0x24	; 36
 18c:	9a d1       	rcall	.+820    	; 0x4c2 <sleep>
 18e:	01 50       	subi	r16, 0x01	; 1
 190:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 192:	01 15       	cp	r16, r1
 194:	11 05       	cpc	r17, r1
 196:	c9 f7       	brne	.-14     	; 0x18a <main+0x142>
			msleep(600);
			MotorDir(BREAK,BREAK);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	8e d0       	rcall	.+284    	; 0x2ba <MotorDir>
 19e:	87 2d       	mov	r24, r7
 1a0:	89 70       	andi	r24, 0x09	; 9
		}
		
		if (c_pressed || d_pressed > 0) {
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <main+0x194>
			StatusLED(RED);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	58 d0       	rcall	.+176    	; 0x258 <StatusLED>
			BackLED(OFF,ON);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	7b d0       	rcall	.+246    	; 0x2a4 <BackLED>
        sleep(36);
 1ae:	84 e2       	ldi	r24, 0x24	; 36
 1b0:	88 d1       	rcall	.+784    	; 0x4c2 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	76 d0       	rcall	.+236    	; 0x2a4 <BackLED>
			MotorDir(RWD,RWD);
 1b8:	60 e1       	ldi	r22, 0x10	; 16
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	7e d0       	rcall	.+252    	; 0x2ba <MotorDir>
			MotorSpeed(120,60);
 1be:	6c e3       	ldi	r22, 0x3C	; 60
 1c0:	88 e7       	ldi	r24, 0x78	; 120
 1c2:	87 d0       	rcall	.+270    	; 0x2d2 <MotorSpeed>
 1c4:	08 e5       	ldi	r16, 0x58	; 88
 1c6:	12 e0       	ldi	r17, 0x02	; 2
 1c8:	84 e2       	ldi	r24, 0x24	; 36
 1ca:	7b d1       	rcall	.+758    	; 0x4c2 <sleep>
 1cc:	01 50       	subi	r16, 0x01	; 1
 1ce:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1d0:	01 15       	cp	r16, r1
 1d2:	11 05       	cpc	r17, r1
 1d4:	c9 f7       	brne	.-14     	; 0x1c8 <main+0x180>
			msleep(600);
			MotorDir(BREAK,BREAK);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	6f d0       	rcall	.+222    	; 0x2ba <MotorDir>
 1dc:	87 2d       	mov	r24, r7
 1de:	84 72       	andi	r24, 0x24	; 36
		}
		
		if (e_pressed || f_pressed > 0) {
 1e0:	e1 f0       	breq	.+56     	; 0x21a <main+0x1d2>
			StatusLED(RED);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	39 d0       	rcall	.+114    	; 0x258 <StatusLED>
			BackLED(OFF,ON);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	5c d0       	rcall	.+184    	; 0x2a4 <BackLED>
        sleep(36);
 1ec:	84 e2       	ldi	r24, 0x24	; 36
 1ee:	69 d1       	rcall	.+722    	; 0x4c2 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	57 d0       	rcall	.+174    	; 0x2a4 <BackLED>
			MotorDir(RWD,RWD);
 1f6:	60 e1       	ldi	r22, 0x10	; 16
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	5f d0       	rcall	.+190    	; 0x2ba <MotorDir>
			MotorSpeed(60,120);
 1fc:	68 e7       	ldi	r22, 0x78	; 120
 1fe:	8c e3       	ldi	r24, 0x3C	; 60
 200:	68 d0       	rcall	.+208    	; 0x2d2 <MotorSpeed>
 202:	08 e5       	ldi	r16, 0x58	; 88
 204:	12 e0       	ldi	r17, 0x02	; 2
 206:	84 e2       	ldi	r24, 0x24	; 36
 208:	5c d1       	rcall	.+696    	; 0x4c2 <sleep>
 20a:	01 50       	subi	r16, 0x01	; 1
 20c:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 20e:	01 15       	cp	r16, r1
 210:	11 05       	cpc	r17, r1
 212:	c9 f7       	brne	.-14     	; 0x206 <main+0x1be>
			msleep(600);
			MotorDir(BREAK,BREAK);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	50 d0       	rcall	.+160    	; 0x2ba <MotorDir>
		}
		
		if(counter>30){
 21a:	8f e1       	ldi	r24, 0x1F	; 31
 21c:	a8 16       	cp	r10, r24
 21e:	b1 04       	cpc	r11, r1
 220:	6c f0       	brlt	.+26     	; 0x23c <main+0x1f4>
			MotorSpeed(60,60);
 222:	6c e3       	ldi	r22, 0x3C	; 60
 224:	8c e3       	ldi	r24, 0x3C	; 60
 226:	55 d0       	rcall	.+170    	; 0x2d2 <MotorSpeed>
 228:	0c e3       	ldi	r16, 0x3C	; 60
 22a:	10 e0       	ldi	r17, 0x00	; 0
        sleep(36);
 22c:	84 e2       	ldi	r24, 0x24	; 36
 22e:	49 d1       	rcall	.+658    	; 0x4c2 <sleep>
 230:	01 50       	subi	r16, 0x01	; 1
 232:	11 09       	sbc	r17, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 234:	01 15       	cp	r16, r1
 236:	11 05       	cpc	r17, r1
 238:	c9 f7       	brne	.-14     	; 0x22c <main+0x1e4>
 23a:	04 c0       	rjmp	.+8      	; 0x244 <main+0x1fc>
			msleep(60);
			counter=0;
			
			
			}else{
			counter++;	
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	a8 1a       	sub	r10, r24
 240:	b8 0a       	sbc	r11, r24
 242:	10 cf       	rjmp	.-480    	; 0x64 <main+0x1c>
		}
		
		if(counter>30){
			MotorSpeed(60,60);
			msleep(60);
			counter=0;
 244:	a1 2c       	mov	r10, r1
 246:	b1 2c       	mov	r11, r1
		
		
		
		
		
	}
 248:	0d cf       	rjmp	.-486    	; 0x64 <main+0x1c>

0000024a <Init>:
 24a:	19 d1       	rcall	.+562    	; 0x47e <Timer2Init>
 24c:	49 d0       	rcall	.+146    	; 0x2e0 <MotorInit>
 24e:	1e d0       	rcall	.+60     	; 0x28c <LEDInit>
 250:	4d d1       	rcall	.+666    	; 0x4ec <ADCInit>
 252:	c7 d0       	rcall	.+398    	; 0x3e2 <SwitchInit>
 254:	78 94       	sei
 256:	08 95       	ret

00000258 <StatusLED>:
 258:	c0 98       	cbi	0x18, 0	; 24
 25a:	92 98       	cbi	0x12, 2	; 18
 25c:	80 fd       	sbrc	r24, 0
 25e:	c0 9a       	sbi	0x18, 0	; 24
 260:	81 fd       	sbrc	r24, 1
 262:	92 9a       	sbi	0x12, 2	; 18
 264:	08 95       	ret

00000266 <FrontLED>:
 266:	88 23       	and	r24, r24
 268:	11 f0       	breq	.+4      	; 0x26e <FrontLED+0x8>
 26a:	96 9a       	sbi	0x12, 6	; 18
 26c:	08 95       	ret
 26e:	96 98       	cbi	0x12, 6	; 18
 270:	08 95       	ret

00000272 <BackLEDFast>:
 272:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 274:	f8 94       	cli
 276:	88 23       	and	r24, r24
 278:	19 f0       	breq	.+6      	; 0x280 <BackLEDFast+0xe>
 27a:	97 98       	cbi	0x12, 7	; 18
 27c:	a1 9a       	sbi	0x14, 1	; 20
 27e:	a0 9a       	sbi	0x14, 0	; 20
 280:	95 b3       	in	r25, 0x15	; 21
 282:	9c 7f       	andi	r25, 0xFC	; 252
 284:	98 2b       	or	r25, r24
 286:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 288:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 28a:	08 95       	ret

0000028c <LEDInit>:
 28c:	b8 9a       	sbi	0x17, 0	; 23
 28e:	81 b3       	in	r24, 0x11	; 17
 290:	84 6c       	ori	r24, 0xC4	; 196
 292:	81 bb       	out	0x11, r24	; 17
 294:	96 98       	cbi	0x12, 6	; 18
 296:	97 98       	cbi	0x12, 7	; 18
 298:	a1 9a       	sbi	0x14, 1	; 20
 29a:	a0 9a       	sbi	0x14, 0	; 20
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	e9 df       	rcall	.-46     	; 0x272 <BackLEDFast>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	da cf       	rjmp	.-76     	; 0x258 <StatusLED>

000002a4 <BackLED>:
 2a4:	88 23       	and	r24, r24
 2a6:	11 f0       	breq	.+4      	; 0x2ac <BackLED+0x8>
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <BackLED+0xa>
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	61 11       	cpse	r22, r1
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <BackLED+0x12>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	89 2b       	or	r24, r25
 2b8:	dc cf       	rjmp	.-72     	; 0x272 <BackLEDFast>

000002ba <MotorDir>:
 2ba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2bc:	f8 94       	cli
 2be:	92 b3       	in	r25, 0x12	; 18
 2c0:	9f 7c       	andi	r25, 0xCF	; 207
 2c2:	89 2b       	or	r24, r25
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	8f 7c       	andi	r24, 0xCF	; 207
 2ca:	68 2b       	or	r22, r24
 2cc:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2ce:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 2d0:	08 95       	ret

000002d2 <MotorSpeed>:
 2d2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2d4:	f8 94       	cli
 2d6:	1b bc       	out	0x2b, r1	; 43
 2d8:	8a bd       	out	0x2a, r24	; 42
 2da:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2dc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 2de:	08 95       	ret

000002e0 <MotorInit>:
 2e0:	87 b3       	in	r24, 0x17	; 23
 2e2:	86 63       	ori	r24, 0x36	; 54
 2e4:	87 bb       	out	0x17, r24	; 23
 2e6:	81 b3       	in	r24, 0x11	; 17
 2e8:	80 63       	ori	r24, 0x30	; 48
 2ea:	81 bb       	out	0x11, r24	; 17
 2ec:	81 ea       	ldi	r24, 0xA1	; 161
 2ee:	8f bd       	out	0x2f, r24	; 47
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	8e bd       	out	0x2e, r24	; 46
 2f4:	89 b7       	in	r24, 0x39	; 57
 2f6:	83 7c       	andi	r24, 0xC3	; 195
 2f8:	89 bf       	out	0x39, r24	; 57
 2fa:	60 e2       	ldi	r22, 0x20	; 32
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	dd df       	rcall	.-70     	; 0x2ba <MotorDir>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	e6 cf       	rjmp	.-52     	; 0x2d2 <MotorSpeed>

00000306 <LineData>:
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	f4 d0       	rcall	.+488    	; 0x4f8 <__ADCBlockEnter>
 310:	18 2f       	mov	r17, r24
 312:	83 e4       	ldi	r24, 0x43	; 67
 314:	19 d1       	rcall	.+562    	; 0x548 <ADCSelectChannel>
 316:	21 d1       	rcall	.+578    	; 0x55a <ADCMeasure>
 318:	24 b1       	in	r18, 0x04	; 4
 31a:	35 b1       	in	r19, 0x05	; 5
 31c:	39 83       	std	Y+1, r19	; 0x01
 31e:	28 83       	st	Y, r18
 320:	82 e4       	ldi	r24, 0x42	; 66
 322:	12 d1       	rcall	.+548    	; 0x548 <ADCSelectChannel>
 324:	1a d1       	rcall	.+564    	; 0x55a <ADCMeasure>
 326:	24 b1       	in	r18, 0x04	; 4
 328:	35 b1       	in	r19, 0x05	; 5
 32a:	3b 83       	std	Y+3, r19	; 0x03
 32c:	2a 83       	std	Y+2, r18	; 0x02
 32e:	81 2f       	mov	r24, r17
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	f2 c0       	rjmp	.+484    	; 0x51c <__ADCBlockLeave>

00000338 <__vector_14>:
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
 35a:	87 b1       	in	r24, 0x07	; 7
 35c:	78 94       	sei
 35e:	81 36       	cpi	r24, 0x61	; 97
 360:	19 f0       	breq	.+6      	; 0x368 <__vector_14+0x30>
 362:	83 36       	cpi	r24, 0x63	; 99
 364:	a1 f0       	breq	.+40     	; 0x38e <__vector_14+0x56>
 366:	27 c0       	rjmp	.+78     	; 0x3b6 <__vector_14+0x7e>
 368:	80 91 63 00 	lds	r24, 0x0063
 36c:	82 fd       	sbrc	r24, 2
 36e:	02 c0       	rjmp	.+4      	; 0x374 <__vector_14+0x3c>
 370:	80 e6       	ldi	r24, 0x60	; 96
 372:	01 c0       	rjmp	.+2      	; 0x376 <__vector_14+0x3e>
 374:	82 e6       	ldi	r24, 0x62	; 98
 376:	f8 94       	cli
 378:	95 b1       	in	r25, 0x05	; 5
 37a:	90 93 65 00 	sts	0x0065, r25
 37e:	90 91 60 00 	lds	r25, 0x0060
 382:	90 93 64 00 	sts	0x0064, r25
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	90 93 68 00 	sts	0x0068, r25
 38c:	12 c0       	rjmp	.+36     	; 0x3b2 <__vector_14+0x7a>
 38e:	80 91 63 00 	lds	r24, 0x0063
 392:	80 ff       	sbrs	r24, 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <__vector_14+0x62>
 396:	80 e6       	ldi	r24, 0x60	; 96
 398:	01 c0       	rjmp	.+2      	; 0x39c <__vector_14+0x64>
 39a:	82 e6       	ldi	r24, 0x62	; 98
 39c:	f8 94       	cli
 39e:	95 b1       	in	r25, 0x05	; 5
 3a0:	90 93 67 00 	sts	0x0067, r25
 3a4:	90 91 60 00 	lds	r25, 0x0060
 3a8:	90 93 66 00 	sts	0x0066, r25
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	90 93 62 00 	sts	0x0062, r25
 3b2:	78 94       	sei
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <__vector_14+0x86>
 3b6:	95 b1       	in	r25, 0x05	; 5
 3b8:	90 93 60 00 	sts	0x0060, r25
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	d1 d0       	rcall	.+418    	; 0x562 <ADCInterruptEnable>
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <SwitchInit>:
 3e2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3e4:	f8 94       	cli
 3e6:	8b b7       	in	r24, 0x3b	; 59
 3e8:	8f 77       	andi	r24, 0x7F	; 127
 3ea:	8b bf       	out	0x3b, r24	; 59
 3ec:	85 b7       	in	r24, 0x35	; 53
 3ee:	87 7f       	andi	r24, 0xF7	; 247
 3f0:	84 60       	ori	r24, 0x04	; 4
 3f2:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3f4:	9f bf       	out	0x3f, r25	; 63
 3f6:	a4 98       	cbi	0x14, 4	; 20
 3f8:	85 b3       	in	r24, 0x15	; 21
 3fa:	80 71       	andi	r24, 0x10	; 16
 3fc:	85 bb       	out	0x15, r24	; 21
 3fe:	8b 98       	cbi	0x11, 3	; 17
 400:	93 98       	cbi	0x12, 3	; 18
 402:	10 92 69 00 	sts	0x0069, r1
 406:	08 95       	ret

00000408 <PollSwitch>:
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	93 9a       	sbi	0x12, 3	; 18
 412:	8b 9a       	sbi	0x11, 3	; 17
 414:	71 d0       	rcall	.+226    	; 0x4f8 <__ADCBlockEnter>
 416:	08 2f       	mov	r16, r24
 418:	84 e4       	ldi	r24, 0x44	; 68
 41a:	96 d0       	rcall	.+300    	; 0x548 <ADCSelectChannel>
 41c:	14 e0       	ldi	r17, 0x04	; 4
 41e:	c0 e0       	ldi	r28, 0x00	; 0
 420:	d0 e0       	ldi	r29, 0x00	; 0
 422:	9b d0       	rcall	.+310    	; 0x55a <ADCMeasure>
 424:	24 b1       	in	r18, 0x04	; 4
 426:	35 b1       	in	r19, 0x05	; 5
 428:	c2 0f       	add	r28, r18
 42a:	d3 1f       	adc	r29, r19
 42c:	11 50       	subi	r17, 0x01	; 1
 42e:	c9 f7       	brne	.-14     	; 0x422 <PollSwitch+0x1a>
 430:	80 2f       	mov	r24, r16
 432:	74 d0       	rcall	.+232    	; 0x51c <__ADCBlockLeave>
 434:	8b 98       	cbi	0x11, 3	; 17
 436:	93 98       	cbi	0x12, 3	; 18
 438:	be 01       	movw	r22, r28
 43a:	76 95       	lsr	r23
 43c:	67 95       	ror	r22
 43e:	76 95       	lsr	r23
 440:	67 95       	ror	r22
 442:	cb 01       	movw	r24, r22
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	98 50       	subi	r25, 0x08	; 8
 44a:	a0 d0       	rcall	.+320    	; 0x58c <__udivmodhi4>
 44c:	82 ec       	ldi	r24, 0xC2	; 194
 44e:	86 0f       	add	r24, r22
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <__vector_2>:
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	8f 93       	push	r24
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 69 00 	sts	0x0069, r24
 46c:	8b b7       	in	r24, 0x3b	; 59
 46e:	8f 77       	andi	r24, 0x7F	; 127
 470:	8b bf       	out	0x3b, r24	; 59
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <Timer2Init>:
 47e:	12 bc       	out	0x22, r1	; 34
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	85 bd       	out	0x25, r24	; 37
 484:	89 b7       	in	r24, 0x39	; 57
 486:	80 64       	ori	r24, 0x40	; 64
 488:	89 bf       	out	0x39, r24	; 57
 48a:	81 e9       	ldi	r24, 0x91	; 145
 48c:	83 bd       	out	0x23, r24	; 35
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	87 78       	andi	r24, 0x87	; 135
 492:	85 bd       	out	0x25, r24	; 37
 494:	bb 9a       	sbi	0x17, 3	; 23
 496:	c3 98       	cbi	0x18, 3	; 24
 498:	08 95       	ret

0000049a <__vector_4>:
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8f 93       	push	r24
 4a6:	84 b5       	in	r24, 0x24	; 36
 4a8:	8b 5d       	subi	r24, 0xDB	; 219
 4aa:	84 bd       	out	0x24, r24	; 36
 4ac:	80 91 6a 00 	lds	r24, 0x006A
 4b0:	8f 5f       	subi	r24, 0xFF	; 255
 4b2:	80 93 6a 00 	sts	0x006A, r24
 4b6:	8f 91       	pop	r24
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <sleep>:
 4c2:	f8 94       	cli
 4c4:	95 b7       	in	r25, 0x35	; 53
 4c6:	9f 70       	andi	r25, 0x0F	; 15
 4c8:	90 68       	ori	r25, 0x80	; 128
 4ca:	95 bf       	out	0x35, r25	; 53
 4cc:	78 94       	sei
 4ce:	90 91 6a 00 	lds	r25, 0x006A
 4d2:	89 0f       	add	r24, r25
 4d4:	90 91 6a 00 	lds	r25, 0x006A
 4d8:	98 17       	cp	r25, r24
 4da:	11 f0       	breq	.+4      	; 0x4e0 <sleep+0x1e>
 4dc:	88 95       	sleep
 4de:	fa cf       	rjmp	.-12     	; 0x4d4 <sleep+0x12>
 4e0:	f8 94       	cli
 4e2:	85 b7       	in	r24, 0x35	; 53
 4e4:	8f 77       	andi	r24, 0x7F	; 127
 4e6:	85 bf       	out	0x35, r24	; 53
 4e8:	78 94       	sei
 4ea:	08 95       	ret

000004ec <ADCInit>:
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	80 93 61 00 	sts	0x0061, r24
 4f2:	86 e0       	ldi	r24, 0x06	; 6
 4f4:	86 b9       	out	0x06, r24	; 6
 4f6:	08 95       	ret

000004f8 <__ADCBlockEnter>:
 4f8:	2f b7       	in	r18, 0x3f	; 63
 4fa:	f8 94       	cli
 4fc:	87 b1       	in	r24, 0x07	; 7
 4fe:	96 b1       	in	r25, 0x06	; 6
 500:	39 2f       	mov	r19, r25
 502:	38 78       	andi	r19, 0x88	; 136
 504:	31 f0       	breq	.+12     	; 0x512 <__ADCBlockEnter+0x1a>
 506:	93 ff       	sbrs	r25, 3
 508:	05 c0       	rjmp	.+10     	; 0x514 <__ADCBlockEnter+0x1c>
 50a:	80 93 61 00 	sts	0x0061, r24
 50e:	86 e8       	ldi	r24, 0x86	; 134
 510:	86 b9       	out	0x06, r24	; 6
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	2f bf       	out	0x3f, r18	; 63
 516:	36 99       	sbic	0x06, 6	; 6
 518:	fe cf       	rjmp	.-4      	; 0x516 <__ADCBlockEnter+0x1e>
 51a:	08 95       	ret

0000051c <__ADCBlockLeave>:
 51c:	3f b7       	in	r19, 0x3f	; 63
 51e:	f8 94       	cli
 520:	8f 3f       	cpi	r24, 0xFF	; 255
 522:	31 f4       	brne	.+12     	; 0x530 <__ADCBlockLeave+0x14>
 524:	80 91 61 00 	lds	r24, 0x0061
 528:	8f 3f       	cpi	r24, 0xFF	; 255
 52a:	51 f0       	breq	.+20     	; 0x540 <__ADCBlockLeave+0x24>
 52c:	2e ed       	ldi	r18, 0xDE	; 222
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__ADCBlockLeave+0x16>
 530:	26 ed       	ldi	r18, 0xD6	; 214
 532:	97 b1       	in	r25, 0x07	; 7
 534:	98 27       	eor	r25, r24
 536:	90 7c       	andi	r25, 0xC0	; 192
 538:	09 f0       	breq	.+2      	; 0x53c <__ADCBlockLeave+0x20>
 53a:	16 b8       	out	0x06, r1	; 6
 53c:	87 b9       	out	0x07, r24	; 7
 53e:	01 c0       	rjmp	.+2      	; 0x542 <__ADCBlockLeave+0x26>
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	26 b9       	out	0x06, r18	; 6
 544:	3f bf       	out	0x3f, r19	; 63
 546:	08 95       	ret

00000548 <ADCSelectChannel>:
 548:	97 b1       	in	r25, 0x07	; 7
 54a:	98 27       	eor	r25, r24
 54c:	90 7c       	andi	r25, 0xC0	; 192
 54e:	09 f0       	breq	.+2      	; 0x552 <ADCSelectChannel+0xa>
 550:	16 b8       	out	0x06, r1	; 6
 552:	96 e8       	ldi	r25, 0x86	; 134
 554:	96 b9       	out	0x06, r25	; 6
 556:	87 b9       	out	0x07, r24	; 7
 558:	08 95       	ret

0000055a <ADCMeasure>:
 55a:	36 9a       	sbi	0x06, 6	; 6
 55c:	36 99       	sbic	0x06, 6	; 6
 55e:	fe cf       	rjmp	.-4      	; 0x55c <ADCMeasure+0x2>
 560:	08 95       	ret

00000562 <ADCInterruptEnable>:
 562:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 564:	f8 94       	cli
 566:	96 b1       	in	r25, 0x06	; 6
 568:	97 ff       	sbrs	r25, 7
 56a:	02 c0       	rjmp	.+4      	; 0x570 <ADCInterruptEnable+0xe>
 56c:	93 ff       	sbrs	r25, 3
 56e:	0a c0       	rjmp	.+20     	; 0x584 <ADCInterruptEnable+0x22>
 570:	97 b1       	in	r25, 0x07	; 7
 572:	98 27       	eor	r25, r24
 574:	90 7c       	andi	r25, 0xC0	; 192
 576:	09 f0       	breq	.+2      	; 0x57a <ADCInterruptEnable+0x18>
 578:	16 b8       	out	0x06, r1	; 6
 57a:	36 99       	sbic	0x06, 6	; 6
 57c:	16 b8       	out	0x06, r1	; 6
 57e:	87 b9       	out	0x07, r24	; 7
 580:	9e ed       	ldi	r25, 0xDE	; 222
 582:	96 b9       	out	0x06, r25	; 6
 584:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 588:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 58a:	08 95       	ret

0000058c <__udivmodhi4>:
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	51 e1       	ldi	r21, 0x11	; 17
 592:	07 c0       	rjmp	.+14     	; 0x5a2 <__udivmodhi4_ep>

00000594 <__udivmodhi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	a6 17       	cp	r26, r22
 59a:	b7 07       	cpc	r27, r23
 59c:	10 f0       	brcs	.+4      	; 0x5a2 <__udivmodhi4_ep>
 59e:	a6 1b       	sub	r26, r22
 5a0:	b7 0b       	sbc	r27, r23

000005a2 <__udivmodhi4_ep>:
 5a2:	88 1f       	adc	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	5a 95       	dec	r21
 5a8:	a9 f7       	brne	.-22     	; 0x594 <__udivmodhi4_loop>
 5aa:	80 95       	com	r24
 5ac:	90 95       	com	r25
 5ae:	bc 01       	movw	r22, r24
 5b0:	cd 01       	movw	r24, r26
 5b2:	08 95       	ret

000005b4 <__divmodhi4>:
 5b4:	97 fb       	bst	r25, 7
 5b6:	07 2e       	mov	r0, r23
 5b8:	16 f4       	brtc	.+4      	; 0x5be <__divmodhi4+0xa>
 5ba:	00 94       	com	r0
 5bc:	06 d0       	rcall	.+12     	; 0x5ca <__divmodhi4_neg1>
 5be:	77 fd       	sbrc	r23, 7
 5c0:	08 d0       	rcall	.+16     	; 0x5d2 <__divmodhi4_neg2>
 5c2:	e4 df       	rcall	.-56     	; 0x58c <__udivmodhi4>
 5c4:	07 fc       	sbrc	r0, 7
 5c6:	05 d0       	rcall	.+10     	; 0x5d2 <__divmodhi4_neg2>
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__divmodhi4_exit>

000005ca <__divmodhi4_neg1>:
 5ca:	90 95       	com	r25
 5cc:	81 95       	neg	r24
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__divmodhi4_neg2>:
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255

000005d8 <__divmodhi4_exit>:
 5d8:	08 95       	ret

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
