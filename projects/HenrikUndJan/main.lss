
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000530  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000005c4  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001547  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a70  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000805  00000000  00000000  0000275d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  000038d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00004247  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	d3 c1       	rjmp	.+934    	; 0x3ac <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	f1 c1       	rjmp	.+994    	; 0x3ec <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	36 c1       	rjmp	.+620    	; 0x28a <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	73 c2       	rjmp	.+1254   	; 0x52c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void)		{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    Init();
  54:	a9 d0       	rcall	.+338    	; 0x1a8 <Init>
		LineData(lineData);
		
		char switches = PollSwitch();
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT]+60	)  / 6;
  56:	36 e0       	ldi	r19, 0x06	; 6
  58:	83 2e       	mov	r8, r19
  5a:	91 2c       	mov	r9, r1
	char b_pressed	= 0;
    
	while(1){
		
		
		uint16_t lineData[] = {0,0};
  5c:	1a 82       	std	Y+2, r1	; 0x02
  5e:	19 82       	std	Y+1, r1	; 0x01
  60:	1c 82       	std	Y+4, r1	; 0x04
  62:	1b 82       	std	Y+3, r1	; 0x03
		LineData(lineData);
  64:	ce 01       	movw	r24, r28
  66:	01 96       	adiw	r24, 0x01	; 1
  68:	f7 d0       	rcall	.+494    	; 0x258 <LineData>
		
		char switches = PollSwitch();
  6a:	77 d1       	rcall	.+750    	; 0x35a <PollSwitch>
  6c:	48 2f       	mov	r20, r24
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT]+60	)  / 6;
  6e:	89 81       	ldd	r24, Y+1	; 0x01
  70:	9a 81       	ldd	r25, Y+2	; 0x02
  72:	cc 96       	adiw	r24, 0x3c	; 60
  74:	b4 01       	movw	r22, r8
  76:	47 d2       	rcall	.+1166   	; 0x506 <__divmodhi4>
  78:	6b 01       	movw	r12, r22
  7a:	8b 01       	movw	r16, r22
		right = ((int)lineData[RIGHT]	)  / 6;
  7c:	8b 81       	ldd	r24, Y+3	; 0x03
  7e:	9c 81       	ldd	r25, Y+4	; 0x04
  80:	b4 01       	movw	r22, r8
  82:	41 d2       	rcall	.+1154   	; 0x506 <__divmodhi4>
  84:	5b 01       	movw	r10, r22
  86:	7b 01       	movw	r14, r22
		
		a_pressed = ( switches & SWITCH(1) );
  88:	84 2f       	mov	r24, r20
  8a:	82 70       	andi	r24, 0x02	; 2
  8c:	58 2e       	mov	r5, r24
		b_pressed = ( switches & SWITCH(4) );
  8e:	40 71       	andi	r20, 0x10	; 16
  90:	44 2e       	mov	r4, r20
	
		
		//fahren
		
		MotorDir(FWD,FWD);
  92:	60 e2       	ldi	r22, 0x20	; 32
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	ba d0       	rcall	.+372    	; 0x20c <MotorDir>
		MotorSpeed(right,left);
  98:	6c 2d       	mov	r22, r12
  9a:	8a 2d       	mov	r24, r10
  9c:	c3 d0       	rcall	.+390    	; 0x224 <MotorSpeed>
  9e:	28 e7       	ldi	r18, 0x78	; 120
  a0:	62 2e       	mov	r6, r18
  a2:	71 2c       	mov	r7, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  a4:	84 e2       	ldi	r24, 0x24	; 36
  a6:	b6 d1       	rcall	.+876    	; 0x414 <sleep>
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	68 1a       	sub	r6, r24
  ac:	71 08       	sbc	r7, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  ae:	61 14       	cp	r6, r1
  b0:	71 04       	cpc	r7, r1
  b2:	c1 f7       	brne	.-16     	; 0xa4 <main+0x5c>
		msleep(120);
		
		if (left>255){
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	c8 16       	cp	r12, r24
  b8:	d1 04       	cpc	r13, r1
  ba:	09 f0       	breq	.+2      	; 0xbe <main+0x76>
  bc:	3c f4       	brge	.+14     	; 0xcc <main+0x84>
			left=254;
			}
		else if(left<90){
  be:	8a e5       	ldi	r24, 0x5A	; 90
  c0:	c8 16       	cp	r12, r24
  c2:	d1 04       	cpc	r13, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <main+0x88>
			left=0;
  c6:	00 e0       	ldi	r16, 0x00	; 0
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x88>
		MotorDir(FWD,FWD);
		MotorSpeed(right,left);
		msleep(120);
		
		if (left>255){
			left=254;
  cc:	0e ef       	ldi	r16, 0xFE	; 254
  ce:	10 e0       	ldi	r17, 0x00	; 0
			}
		else if(left<90){
			left=0;
			}	
			
		if (right>255){
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	a8 16       	cp	r10, r24
  d4:	b1 04       	cpc	r11, r1
  d6:	09 f0       	breq	.+2      	; 0xda <main+0x92>
  d8:	3c f4       	brge	.+14     	; 0xe8 <main+0xa0>
			right=254;
			}
		else if(right<90){
  da:	8a e5       	ldi	r24, 0x5A	; 90
  dc:	a8 16       	cp	r10, r24
  de:	b1 04       	cpc	r11, r1
  e0:	34 f4       	brge	.+12     	; 0xee <main+0xa6>
			right=0;
  e2:	e1 2c       	mov	r14, r1
  e4:	f1 2c       	mov	r15, r1
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0xa6>
		else if(left<90){
			left=0;
			}	
			
		if (right>255){
			right=254;
  e8:	9e ef       	ldi	r25, 0xFE	; 254
  ea:	e9 2e       	mov	r14, r25
  ec:	f1 2c       	mov	r15, r1
			}	
					
					
		//LED Steuerung
		
		if(left > right){
  ee:	e0 16       	cp	r14, r16
  f0:	f1 06       	cpc	r15, r17
  f2:	1c f4       	brge	.+6      	; 0xfa <main+0xb2>
			BackLED(OFF,ON);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	7e d0       	rcall	.+252    	; 0x1f6 <BackLED>
		}
		if(right > left){
  fa:	0e 15       	cp	r16, r14
  fc:	1f 05       	cpc	r17, r15
  fe:	1c f4       	brge	.+6      	; 0x106 <main+0xbe>
			BackLED(ON,OFF);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	78 d0       	rcall	.+240    	; 0x1f6 <BackLED>
		}
		if(right == left){
 106:	e0 16       	cp	r14, r16
 108:	f1 06       	cpc	r15, r17
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0xca>
			BackLED(ON,ON);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	72 d0       	rcall	.+228    	; 0x1f6 <BackLED>
		}
		if(right && left < 80){
 112:	e1 14       	cp	r14, r1
 114:	f1 04       	cpc	r15, r1
 116:	99 f0       	breq	.+38     	; 0x13e <main+0xf6>
 118:	00 35       	cpi	r16, 0x50	; 80
 11a:	11 05       	cpc	r17, r1
 11c:	14 f4       	brge	.+4      	; 0x122 <main+0xda>
			StatusLED(RED);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	4a d0       	rcall	.+148    	; 0x1b6 <StatusLED>
		}
		if(80 < right && left < 100){
 122:	81 e5       	ldi	r24, 0x51	; 81
 124:	e8 16       	cp	r14, r24
 126:	f1 04       	cpc	r15, r1
 128:	2c f0       	brlt	.+10     	; 0x134 <main+0xec>
 12a:	04 36       	cpi	r16, 0x64	; 100
 12c:	11 05       	cpc	r17, r1
 12e:	14 f4       	brge	.+4      	; 0x134 <main+0xec>
			StatusLED(YELLOW);
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	41 d0       	rcall	.+130    	; 0x1b6 <StatusLED>
		}
		if(right && left > 100){
 134:	05 36       	cpi	r16, 0x65	; 101
 136:	11 05       	cpc	r17, r1
 138:	14 f0       	brlt	.+4      	; 0x13e <main+0xf6>
			StatusLED(GREEN);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	3c d0       	rcall	.+120    	; 0x1b6 <StatusLED>
		}
		
		//RÃ¼ckfahrt
		
		if (a_pressed | b_pressed > 0) {
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	41 10       	cpse	r4, r1
 144:	02 c0       	rjmp	.+4      	; 0x14a <main+0x102>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	25 29       	or	r18, r5
 14c:	23 2b       	or	r18, r19
 14e:	e9 f0       	breq	.+58     	; 0x18a <main+0x142>
			BackLED(OFF,ON);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	50 d0       	rcall	.+160    	; 0x1f6 <BackLED>
        sleep(36);
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	5d d1       	rcall	.+698    	; 0x414 <sleep>
			msleep(1);
			BackLED(ON,OFF);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	4b d0       	rcall	.+150    	; 0x1f6 <BackLED>
			MotorDir(RWD,RWD);
 160:	60 e1       	ldi	r22, 0x10	; 16
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	53 d0       	rcall	.+166    	; 0x20c <MotorDir>
			MotorSpeed(120,120);
 166:	68 e7       	ldi	r22, 0x78	; 120
 168:	88 e7       	ldi	r24, 0x78	; 120
 16a:	5c d0       	rcall	.+184    	; 0x224 <MotorSpeed>
 16c:	88 e5       	ldi	r24, 0x58	; 88
 16e:	c8 2e       	mov	r12, r24
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	d8 2e       	mov	r13, r24
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	4e d1       	rcall	.+668    	; 0x414 <sleep>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	c8 1a       	sub	r12, r24
 17c:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 17e:	c1 14       	cp	r12, r1
 180:	d1 04       	cpc	r13, r1
 182:	c1 f7       	brne	.-16     	; 0x174 <main+0x12c>
			msleep(600);
			MotorDir(BREAK,BREAK);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	41 d0       	rcall	.+130    	; 0x20c <MotorDir>
			}
			
			
		//Lichtsuche
		
		if(left && right < 80){
 18a:	01 2b       	or	r16, r17
 18c:	09 f4       	brne	.+2      	; 0x190 <main+0x148>
 18e:	66 cf       	rjmp	.-308    	; 0x5c <main+0x14>
 190:	80 e5       	ldi	r24, 0x50	; 80
 192:	e8 16       	cp	r14, r24
 194:	f1 04       	cpc	r15, r1
 196:	0c f0       	brlt	.+2      	; 0x19a <main+0x152>
 198:	61 cf       	rjmp	.-318    	; 0x5c <main+0x14>
			MotorDir(RWD,FWD);
 19a:	60 e2       	ldi	r22, 0x20	; 32
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	36 d0       	rcall	.+108    	; 0x20c <MotorDir>
			MotorSpeed(120,120);
 1a0:	68 e7       	ldi	r22, 0x78	; 120
 1a2:	88 e7       	ldi	r24, 0x78	; 120
 1a4:	3f d0       	rcall	.+126    	; 0x224 <MotorSpeed>
			}
					
}	
 1a6:	5a cf       	rjmp	.-332    	; 0x5c <main+0x14>

000001a8 <Init>:
 1a8:	13 d1       	rcall	.+550    	; 0x3d0 <Timer2Init>
 1aa:	43 d0       	rcall	.+134    	; 0x232 <MotorInit>
 1ac:	18 d0       	rcall	.+48     	; 0x1de <LEDInit>
 1ae:	47 d1       	rcall	.+654    	; 0x43e <ADCInit>
 1b0:	c1 d0       	rcall	.+386    	; 0x334 <SwitchInit>
 1b2:	78 94       	sei
 1b4:	08 95       	ret

000001b6 <StatusLED>:
 1b6:	c0 98       	cbi	0x18, 0	; 24
 1b8:	92 98       	cbi	0x12, 2	; 18
 1ba:	80 fd       	sbrc	r24, 0
 1bc:	c0 9a       	sbi	0x18, 0	; 24
 1be:	81 fd       	sbrc	r24, 1
 1c0:	92 9a       	sbi	0x12, 2	; 18
 1c2:	08 95       	ret

000001c4 <BackLEDFast>:
 1c4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1c6:	f8 94       	cli
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <BackLEDFast+0xe>
 1cc:	97 98       	cbi	0x12, 7	; 18
 1ce:	a1 9a       	sbi	0x14, 1	; 20
 1d0:	a0 9a       	sbi	0x14, 0	; 20
 1d2:	95 b3       	in	r25, 0x15	; 21
 1d4:	9c 7f       	andi	r25, 0xFC	; 252
 1d6:	98 2b       	or	r25, r24
 1d8:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1da:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 1dc:	08 95       	ret

000001de <LEDInit>:
 1de:	b8 9a       	sbi	0x17, 0	; 23
 1e0:	81 b3       	in	r24, 0x11	; 17
 1e2:	84 6c       	ori	r24, 0xC4	; 196
 1e4:	81 bb       	out	0x11, r24	; 17
 1e6:	96 98       	cbi	0x12, 6	; 18
 1e8:	97 98       	cbi	0x12, 7	; 18
 1ea:	a1 9a       	sbi	0x14, 1	; 20
 1ec:	a0 9a       	sbi	0x14, 0	; 20
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	e9 df       	rcall	.-46     	; 0x1c4 <BackLEDFast>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	e0 cf       	rjmp	.-64     	; 0x1b6 <StatusLED>

000001f6 <BackLED>:
 1f6:	88 23       	and	r24, r24
 1f8:	11 f0       	breq	.+4      	; 0x1fe <BackLED+0x8>
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <BackLED+0xa>
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	61 11       	cpse	r22, r1
 204:	01 c0       	rjmp	.+2      	; 0x208 <BackLED+0x12>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	89 2b       	or	r24, r25
 20a:	dc cf       	rjmp	.-72     	; 0x1c4 <BackLEDFast>

0000020c <MotorDir>:
 20c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 20e:	f8 94       	cli
 210:	92 b3       	in	r25, 0x12	; 18
 212:	9f 7c       	andi	r25, 0xCF	; 207
 214:	89 2b       	or	r24, r25
 216:	82 bb       	out	0x12, r24	; 18
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	8f 7c       	andi	r24, 0xCF	; 207
 21c:	68 2b       	or	r22, r24
 21e:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 220:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 222:	08 95       	ret

00000224 <MotorSpeed>:
 224:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 226:	f8 94       	cli
 228:	1b bc       	out	0x2b, r1	; 43
 22a:	8a bd       	out	0x2a, r24	; 42
 22c:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 22e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 230:	08 95       	ret

00000232 <MotorInit>:
 232:	87 b3       	in	r24, 0x17	; 23
 234:	86 63       	ori	r24, 0x36	; 54
 236:	87 bb       	out	0x17, r24	; 23
 238:	81 b3       	in	r24, 0x11	; 17
 23a:	80 63       	ori	r24, 0x30	; 48
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	81 ea       	ldi	r24, 0xA1	; 161
 240:	8f bd       	out	0x2f, r24	; 47
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	8e bd       	out	0x2e, r24	; 46
 246:	89 b7       	in	r24, 0x39	; 57
 248:	83 7c       	andi	r24, 0xC3	; 195
 24a:	89 bf       	out	0x39, r24	; 57
 24c:	60 e2       	ldi	r22, 0x20	; 32
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	dd df       	rcall	.-70     	; 0x20c <MotorDir>
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	e6 cf       	rjmp	.-52     	; 0x224 <MotorSpeed>

00000258 <LineData>:
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	f4 d0       	rcall	.+488    	; 0x44a <__ADCBlockEnter>
 262:	18 2f       	mov	r17, r24
 264:	83 e4       	ldi	r24, 0x43	; 67
 266:	19 d1       	rcall	.+562    	; 0x49a <ADCSelectChannel>
 268:	21 d1       	rcall	.+578    	; 0x4ac <ADCMeasure>
 26a:	24 b1       	in	r18, 0x04	; 4
 26c:	35 b1       	in	r19, 0x05	; 5
 26e:	39 83       	std	Y+1, r19	; 0x01
 270:	28 83       	st	Y, r18
 272:	82 e4       	ldi	r24, 0x42	; 66
 274:	12 d1       	rcall	.+548    	; 0x49a <ADCSelectChannel>
 276:	1a d1       	rcall	.+564    	; 0x4ac <ADCMeasure>
 278:	24 b1       	in	r18, 0x04	; 4
 27a:	35 b1       	in	r19, 0x05	; 5
 27c:	3b 83       	std	Y+3, r19	; 0x03
 27e:	2a 83       	std	Y+2, r18	; 0x02
 280:	81 2f       	mov	r24, r17
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	f2 c0       	rjmp	.+484    	; 0x46e <__ADCBlockLeave>

0000028a <__vector_14>:
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
 2ac:	87 b1       	in	r24, 0x07	; 7
 2ae:	78 94       	sei
 2b0:	81 36       	cpi	r24, 0x61	; 97
 2b2:	19 f0       	breq	.+6      	; 0x2ba <__vector_14+0x30>
 2b4:	83 36       	cpi	r24, 0x63	; 99
 2b6:	a1 f0       	breq	.+40     	; 0x2e0 <__vector_14+0x56>
 2b8:	27 c0       	rjmp	.+78     	; 0x308 <__vector_14+0x7e>
 2ba:	80 91 63 00 	lds	r24, 0x0063
 2be:	82 fd       	sbrc	r24, 2
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__vector_14+0x3c>
 2c2:	80 e6       	ldi	r24, 0x60	; 96
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <__vector_14+0x3e>
 2c6:	82 e6       	ldi	r24, 0x62	; 98
 2c8:	f8 94       	cli
 2ca:	95 b1       	in	r25, 0x05	; 5
 2cc:	90 93 65 00 	sts	0x0065, r25
 2d0:	90 91 60 00 	lds	r25, 0x0060
 2d4:	90 93 64 00 	sts	0x0064, r25
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	90 93 68 00 	sts	0x0068, r25
 2de:	12 c0       	rjmp	.+36     	; 0x304 <__vector_14+0x7a>
 2e0:	80 91 63 00 	lds	r24, 0x0063
 2e4:	80 ff       	sbrs	r24, 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_14+0x62>
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <__vector_14+0x64>
 2ec:	82 e6       	ldi	r24, 0x62	; 98
 2ee:	f8 94       	cli
 2f0:	95 b1       	in	r25, 0x05	; 5
 2f2:	90 93 67 00 	sts	0x0067, r25
 2f6:	90 91 60 00 	lds	r25, 0x0060
 2fa:	90 93 66 00 	sts	0x0066, r25
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	90 93 62 00 	sts	0x0062, r25
 304:	78 94       	sei
 306:	04 c0       	rjmp	.+8      	; 0x310 <__vector_14+0x86>
 308:	95 b1       	in	r25, 0x05	; 5
 30a:	90 93 60 00 	sts	0x0060, r25
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	d1 d0       	rcall	.+418    	; 0x4b4 <ADCInterruptEnable>
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <SwitchInit>:
 334:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 336:	f8 94       	cli
 338:	8b b7       	in	r24, 0x3b	; 59
 33a:	8f 77       	andi	r24, 0x7F	; 127
 33c:	8b bf       	out	0x3b, r24	; 59
 33e:	85 b7       	in	r24, 0x35	; 53
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	84 60       	ori	r24, 0x04	; 4
 344:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 346:	9f bf       	out	0x3f, r25	; 63
 348:	a4 98       	cbi	0x14, 4	; 20
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	80 71       	andi	r24, 0x10	; 16
 34e:	85 bb       	out	0x15, r24	; 21
 350:	8b 98       	cbi	0x11, 3	; 17
 352:	93 98       	cbi	0x12, 3	; 18
 354:	10 92 69 00 	sts	0x0069, r1
 358:	08 95       	ret

0000035a <PollSwitch>:
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	93 9a       	sbi	0x12, 3	; 18
 364:	8b 9a       	sbi	0x11, 3	; 17
 366:	71 d0       	rcall	.+226    	; 0x44a <__ADCBlockEnter>
 368:	08 2f       	mov	r16, r24
 36a:	84 e4       	ldi	r24, 0x44	; 68
 36c:	96 d0       	rcall	.+300    	; 0x49a <ADCSelectChannel>
 36e:	14 e0       	ldi	r17, 0x04	; 4
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	9b d0       	rcall	.+310    	; 0x4ac <ADCMeasure>
 376:	24 b1       	in	r18, 0x04	; 4
 378:	35 b1       	in	r19, 0x05	; 5
 37a:	c2 0f       	add	r28, r18
 37c:	d3 1f       	adc	r29, r19
 37e:	11 50       	subi	r17, 0x01	; 1
 380:	c9 f7       	brne	.-14     	; 0x374 <PollSwitch+0x1a>
 382:	80 2f       	mov	r24, r16
 384:	74 d0       	rcall	.+232    	; 0x46e <__ADCBlockLeave>
 386:	8b 98       	cbi	0x11, 3	; 17
 388:	93 98       	cbi	0x12, 3	; 18
 38a:	be 01       	movw	r22, r28
 38c:	76 95       	lsr	r23
 38e:	67 95       	ror	r22
 390:	76 95       	lsr	r23
 392:	67 95       	ror	r22
 394:	cb 01       	movw	r24, r22
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	98 50       	subi	r25, 0x08	; 8
 39c:	a0 d0       	rcall	.+320    	; 0x4de <__udivmodhi4>
 39e:	82 ec       	ldi	r24, 0xC2	; 194
 3a0:	86 0f       	add	r24, r22
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <__vector_2>:
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 69 00 	sts	0x0069, r24
 3be:	8b b7       	in	r24, 0x3b	; 59
 3c0:	8f 77       	andi	r24, 0x7F	; 127
 3c2:	8b bf       	out	0x3b, r24	; 59
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <Timer2Init>:
 3d0:	12 bc       	out	0x22, r1	; 34
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	85 bd       	out	0x25, r24	; 37
 3d6:	89 b7       	in	r24, 0x39	; 57
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	89 bf       	out	0x39, r24	; 57
 3dc:	81 e9       	ldi	r24, 0x91	; 145
 3de:	83 bd       	out	0x23, r24	; 35
 3e0:	85 b5       	in	r24, 0x25	; 37
 3e2:	87 78       	andi	r24, 0x87	; 135
 3e4:	85 bd       	out	0x25, r24	; 37
 3e6:	bb 9a       	sbi	0x17, 3	; 23
 3e8:	c3 98       	cbi	0x18, 3	; 24
 3ea:	08 95       	ret

000003ec <__vector_4>:
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	84 b5       	in	r24, 0x24	; 36
 3fa:	8b 5d       	subi	r24, 0xDB	; 219
 3fc:	84 bd       	out	0x24, r24	; 36
 3fe:	80 91 6a 00 	lds	r24, 0x006A
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	80 93 6a 00 	sts	0x006A, r24
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <sleep>:
 414:	f8 94       	cli
 416:	95 b7       	in	r25, 0x35	; 53
 418:	9f 70       	andi	r25, 0x0F	; 15
 41a:	90 68       	ori	r25, 0x80	; 128
 41c:	95 bf       	out	0x35, r25	; 53
 41e:	78 94       	sei
 420:	90 91 6a 00 	lds	r25, 0x006A
 424:	89 0f       	add	r24, r25
 426:	90 91 6a 00 	lds	r25, 0x006A
 42a:	98 17       	cp	r25, r24
 42c:	11 f0       	breq	.+4      	; 0x432 <sleep+0x1e>
 42e:	88 95       	sleep
 430:	fa cf       	rjmp	.-12     	; 0x426 <sleep+0x12>
 432:	f8 94       	cli
 434:	85 b7       	in	r24, 0x35	; 53
 436:	8f 77       	andi	r24, 0x7F	; 127
 438:	85 bf       	out	0x35, r24	; 53
 43a:	78 94       	sei
 43c:	08 95       	ret

0000043e <ADCInit>:
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	80 93 61 00 	sts	0x0061, r24
 444:	86 e0       	ldi	r24, 0x06	; 6
 446:	86 b9       	out	0x06, r24	; 6
 448:	08 95       	ret

0000044a <__ADCBlockEnter>:
 44a:	2f b7       	in	r18, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	87 b1       	in	r24, 0x07	; 7
 450:	96 b1       	in	r25, 0x06	; 6
 452:	39 2f       	mov	r19, r25
 454:	38 78       	andi	r19, 0x88	; 136
 456:	31 f0       	breq	.+12     	; 0x464 <__stack+0x5>
 458:	93 ff       	sbrs	r25, 3
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__stack+0x7>
 45c:	80 93 61 00 	sts	0x0061, r24
 460:	86 e8       	ldi	r24, 0x86	; 134
 462:	86 b9       	out	0x06, r24	; 6
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	2f bf       	out	0x3f, r18	; 63
 468:	36 99       	sbic	0x06, 6	; 6
 46a:	fe cf       	rjmp	.-4      	; 0x468 <__stack+0x9>
 46c:	08 95       	ret

0000046e <__ADCBlockLeave>:
 46e:	3f b7       	in	r19, 0x3f	; 63
 470:	f8 94       	cli
 472:	8f 3f       	cpi	r24, 0xFF	; 255
 474:	31 f4       	brne	.+12     	; 0x482 <__ADCBlockLeave+0x14>
 476:	80 91 61 00 	lds	r24, 0x0061
 47a:	8f 3f       	cpi	r24, 0xFF	; 255
 47c:	51 f0       	breq	.+20     	; 0x492 <__ADCBlockLeave+0x24>
 47e:	2e ed       	ldi	r18, 0xDE	; 222
 480:	01 c0       	rjmp	.+2      	; 0x484 <__ADCBlockLeave+0x16>
 482:	26 ed       	ldi	r18, 0xD6	; 214
 484:	97 b1       	in	r25, 0x07	; 7
 486:	98 27       	eor	r25, r24
 488:	90 7c       	andi	r25, 0xC0	; 192
 48a:	09 f0       	breq	.+2      	; 0x48e <__ADCBlockLeave+0x20>
 48c:	16 b8       	out	0x06, r1	; 6
 48e:	87 b9       	out	0x07, r24	; 7
 490:	01 c0       	rjmp	.+2      	; 0x494 <__ADCBlockLeave+0x26>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	26 b9       	out	0x06, r18	; 6
 496:	3f bf       	out	0x3f, r19	; 63
 498:	08 95       	ret

0000049a <ADCSelectChannel>:
 49a:	97 b1       	in	r25, 0x07	; 7
 49c:	98 27       	eor	r25, r24
 49e:	90 7c       	andi	r25, 0xC0	; 192
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <ADCSelectChannel+0xa>
 4a2:	16 b8       	out	0x06, r1	; 6
 4a4:	96 e8       	ldi	r25, 0x86	; 134
 4a6:	96 b9       	out	0x06, r25	; 6
 4a8:	87 b9       	out	0x07, r24	; 7
 4aa:	08 95       	ret

000004ac <ADCMeasure>:
 4ac:	36 9a       	sbi	0x06, 6	; 6
 4ae:	36 99       	sbic	0x06, 6	; 6
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <ADCMeasure+0x2>
 4b2:	08 95       	ret

000004b4 <ADCInterruptEnable>:
 4b4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4b6:	f8 94       	cli
 4b8:	96 b1       	in	r25, 0x06	; 6
 4ba:	97 ff       	sbrs	r25, 7
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <ADCInterruptEnable+0xe>
 4be:	93 ff       	sbrs	r25, 3
 4c0:	0a c0       	rjmp	.+20     	; 0x4d6 <ADCInterruptEnable+0x22>
 4c2:	97 b1       	in	r25, 0x07	; 7
 4c4:	98 27       	eor	r25, r24
 4c6:	90 7c       	andi	r25, 0xC0	; 192
 4c8:	09 f0       	breq	.+2      	; 0x4cc <ADCInterruptEnable+0x18>
 4ca:	16 b8       	out	0x06, r1	; 6
 4cc:	36 99       	sbic	0x06, 6	; 6
 4ce:	16 b8       	out	0x06, r1	; 6
 4d0:	87 b9       	out	0x07, r24	; 7
 4d2:	9e ed       	ldi	r25, 0xDE	; 222
 4d4:	96 b9       	out	0x06, r25	; 6
 4d6:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4da:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 4dc:	08 95       	ret

000004de <__udivmodhi4>:
 4de:	aa 1b       	sub	r26, r26
 4e0:	bb 1b       	sub	r27, r27
 4e2:	51 e1       	ldi	r21, 0x11	; 17
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <__udivmodhi4_ep>

000004e6 <__udivmodhi4_loop>:
 4e6:	aa 1f       	adc	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	a6 17       	cp	r26, r22
 4ec:	b7 07       	cpc	r27, r23
 4ee:	10 f0       	brcs	.+4      	; 0x4f4 <__udivmodhi4_ep>
 4f0:	a6 1b       	sub	r26, r22
 4f2:	b7 0b       	sbc	r27, r23

000004f4 <__udivmodhi4_ep>:
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	5a 95       	dec	r21
 4fa:	a9 f7       	brne	.-22     	; 0x4e6 <__udivmodhi4_loop>
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	bc 01       	movw	r22, r24
 502:	cd 01       	movw	r24, r26
 504:	08 95       	ret

00000506 <__divmodhi4>:
 506:	97 fb       	bst	r25, 7
 508:	07 2e       	mov	r0, r23
 50a:	16 f4       	brtc	.+4      	; 0x510 <__divmodhi4+0xa>
 50c:	00 94       	com	r0
 50e:	06 d0       	rcall	.+12     	; 0x51c <__divmodhi4_neg1>
 510:	77 fd       	sbrc	r23, 7
 512:	08 d0       	rcall	.+16     	; 0x524 <__divmodhi4_neg2>
 514:	e4 df       	rcall	.-56     	; 0x4de <__udivmodhi4>
 516:	07 fc       	sbrc	r0, 7
 518:	05 d0       	rcall	.+10     	; 0x524 <__divmodhi4_neg2>
 51a:	3e f4       	brtc	.+14     	; 0x52a <__divmodhi4_exit>

0000051c <__divmodhi4_neg1>:
 51c:	90 95       	com	r25
 51e:	81 95       	neg	r24
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__divmodhi4_neg2>:
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255

0000052a <__divmodhi4_exit>:
 52a:	08 95       	ret

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>
