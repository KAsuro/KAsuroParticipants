
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005e6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000067a  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000172b  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a70  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000843  00000000  00000000  000029f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000038c  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000611  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ac8  00000000  00000000  00003bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  000046a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	2e c2       	rjmp	.+1116   	; 0x462 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	4c c2       	rjmp	.+1176   	; 0x4a2 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	91 c1       	rjmp	.+802    	; 0x340 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	ce c2       	rjmp	.+1436   	; 0x5e2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define SLOW 1000
#define FAST 100

#include <asuro/asuro.h>

void main(void)		{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <main+0x8>
  50:	00 d0       	rcall	.+0      	; 0x52 <main+0xa>
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
    Init();
  56:	03 d1       	rcall	.+518    	; 0x25e <Init>
		LineData(lineData);
		
		char switches = PollSwitch();
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT]+60	)  / 6;
  58:	56 e0       	ldi	r21, 0x06	; 6
  5a:	85 2e       	mov	r8, r21
  5c:	91 2c       	mov	r9, r1
	char f_pressed	= 0;
    
	while(1){
		
		
		uint16_t lineData[] = {0,0};
  5e:	1a 82       	std	Y+2, r1	; 0x02
  60:	19 82       	std	Y+1, r1	; 0x01
  62:	1c 82       	std	Y+4, r1	; 0x04
  64:	1b 82       	std	Y+3, r1	; 0x03
		LineData(lineData);
  66:	ce 01       	movw	r24, r28
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	51 d1       	rcall	.+674    	; 0x30e <LineData>
		
		char switches = PollSwitch();
  6c:	d1 d1       	rcall	.+930    	; 0x410 <PollSwitch>
  6e:	28 2f       	mov	r18, r24
        switches &= 0b00111111;
		
		left  = ((int)lineData[LEFT]+60	)  / 6;
  70:	89 81       	ldd	r24, Y+1	; 0x01
  72:	9a 81       	ldd	r25, Y+2	; 0x02
  74:	cc 96       	adiw	r24, 0x3c	; 60
  76:	b4 01       	movw	r22, r8
  78:	a1 d2       	rcall	.+1346   	; 0x5bc <__divmodhi4>
  7a:	6b 01       	movw	r12, r22
  7c:	8b 01       	movw	r16, r22
		right = ((int)lineData[RIGHT]	)  / 6;
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	9c 81       	ldd	r25, Y+4	; 0x04
  82:	b4 01       	movw	r22, r8
  84:	9b d2       	rcall	.+1334   	; 0x5bc <__divmodhi4>
  86:	5b 01       	movw	r10, r22
  88:	7b 01       	movw	r14, r22
		
		a_pressed = ( switches & SWITCH(1) );
  8a:	82 2f       	mov	r24, r18
  8c:	82 70       	andi	r24, 0x02	; 2
  8e:	38 2e       	mov	r3, r24
		b_pressed = ( switches & SWITCH(4) );
  90:	82 2f       	mov	r24, r18
  92:	80 71       	andi	r24, 0x10	; 16
  94:	28 2e       	mov	r2, r24
		c_pressed = ( switches & SWITCH(0) );
  96:	82 2f       	mov	r24, r18
  98:	81 70       	andi	r24, 0x01	; 1
  9a:	58 2e       	mov	r5, r24
		d_pressed = ( switches & SWITCH(3) );
  9c:	82 2f       	mov	r24, r18
  9e:	88 70       	andi	r24, 0x08	; 8
  a0:	48 2e       	mov	r4, r24
		e_pressed = ( switches & SWITCH(2) );
  a2:	82 2f       	mov	r24, r18
  a4:	84 70       	andi	r24, 0x04	; 4
  a6:	8d 83       	std	Y+5, r24	; 0x05
		f_pressed = ( switches & SWITCH(5) );
  a8:	20 72       	andi	r18, 0x20	; 32
  aa:	2e 83       	std	Y+6, r18	; 0x06
		
		//fahren
		
		MotorDir(FWD,FWD);
  ac:	60 e2       	ldi	r22, 0x20	; 32
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	08 d1       	rcall	.+528    	; 0x2c2 <MotorDir>
		MotorSpeed(right,left);
  b2:	6c 2d       	mov	r22, r12
  b4:	8a 2d       	mov	r24, r10
  b6:	11 d1       	rcall	.+546    	; 0x2da <MotorSpeed>
  b8:	48 e7       	ldi	r20, 0x78	; 120
  ba:	64 2e       	mov	r6, r20
  bc:	71 2c       	mov	r7, r1
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
        sleep(36);
  be:	84 e2       	ldi	r24, 0x24	; 36
  c0:	04 d2       	rcall	.+1032   	; 0x4ca <sleep>
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	62 1a       	sub	r6, r18
  c6:	71 08       	sbc	r7, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
  c8:	61 14       	cp	r6, r1
  ca:	71 04       	cpc	r7, r1
  cc:	c1 f7       	brne	.-16     	; 0xbe <main+0x76>
		msleep(120);
		
		if (left>255){
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	c8 16       	cp	r12, r24
  d2:	d1 04       	cpc	r13, r1
  d4:	09 f0       	breq	.+2      	; 0xd8 <main+0x90>
  d6:	3c f4       	brge	.+14     	; 0xe6 <main+0x9e>
			left=254;
			}
		else if(left<100){
  d8:	24 e6       	ldi	r18, 0x64	; 100
  da:	c2 16       	cp	r12, r18
  dc:	d1 04       	cpc	r13, r1
  de:	2c f4       	brge	.+10     	; 0xea <main+0xa2>
			left=0;
  e0:	00 e0       	ldi	r16, 0x00	; 0
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0xa2>
		MotorDir(FWD,FWD);
		MotorSpeed(right,left);
		msleep(120);
		
		if (left>255){
			left=254;
  e6:	0e ef       	ldi	r16, 0xFE	; 254
  e8:	10 e0       	ldi	r17, 0x00	; 0
			}
		else if(left<100){
			left=0;
			}	
			
		if (right>255){
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	a8 16       	cp	r10, r24
  ee:	b1 04       	cpc	r11, r1
  f0:	09 f0       	breq	.+2      	; 0xf4 <main+0xac>
  f2:	3c f4       	brge	.+14     	; 0x102 <main+0xba>
			right=254;
			}
		else if(right<100){
  f4:	24 e6       	ldi	r18, 0x64	; 100
  f6:	a2 16       	cp	r10, r18
  f8:	b1 04       	cpc	r11, r1
  fa:	34 f4       	brge	.+12     	; 0x108 <main+0xc0>
			right=0;
  fc:	e1 2c       	mov	r14, r1
  fe:	f1 2c       	mov	r15, r1
 100:	03 c0       	rjmp	.+6      	; 0x108 <main+0xc0>
		else if(left<100){
			left=0;
			}	
			
		if (right>255){
			right=254;
 102:	3e ef       	ldi	r19, 0xFE	; 254
 104:	e3 2e       	mov	r14, r19
 106:	f1 2c       	mov	r15, r1
			}	
					
					
		//LED Steuerung
		
		if(left > right){
 108:	e0 16       	cp	r14, r16
 10a:	f1 06       	cpc	r15, r17
 10c:	1c f4       	brge	.+6      	; 0x114 <main+0xcc>
			BackLED(OFF,ON);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	cc d0       	rcall	.+408    	; 0x2ac <BackLED>
		}
		if(right > left){
 114:	0e 15       	cp	r16, r14
 116:	1f 05       	cpc	r17, r15
 118:	1c f4       	brge	.+6      	; 0x120 <main+0xd8>
			BackLED(ON,OFF);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	c6 d0       	rcall	.+396    	; 0x2ac <BackLED>
		}
		if(right == left){
 120:	e0 16       	cp	r14, r16
 122:	f1 06       	cpc	r15, r17
 124:	19 f4       	brne	.+6      	; 0x12c <main+0xe4>
			BackLED(ON,ON);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	c0 d0       	rcall	.+384    	; 0x2ac <BackLED>
		}
		if(right && left < 80){
 12c:	e1 14       	cp	r14, r1
 12e:	f1 04       	cpc	r15, r1
 130:	99 f0       	breq	.+38     	; 0x158 <main+0x110>
 132:	00 35       	cpi	r16, 0x50	; 80
 134:	11 05       	cpc	r17, r1
 136:	14 f4       	brge	.+4      	; 0x13c <main+0xf4>
			StatusLED(RED);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	98 d0       	rcall	.+304    	; 0x26c <StatusLED>
		}
		if(80 < right && left < 100){
 13c:	81 e5       	ldi	r24, 0x51	; 81
 13e:	e8 16       	cp	r14, r24
 140:	f1 04       	cpc	r15, r1
 142:	2c f0       	brlt	.+10     	; 0x14e <main+0x106>
 144:	04 36       	cpi	r16, 0x64	; 100
 146:	11 05       	cpc	r17, r1
 148:	14 f4       	brge	.+4      	; 0x14e <main+0x106>
			StatusLED(YELLOW);
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	8f d0       	rcall	.+286    	; 0x26c <StatusLED>
		}
		if(right && left > 100){
 14e:	05 36       	cpi	r16, 0x65	; 101
 150:	11 05       	cpc	r17, r1
 152:	14 f0       	brlt	.+4      	; 0x158 <main+0x110>
			StatusLED(GREEN);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	8a d0       	rcall	.+276    	; 0x26c <StatusLED>
		}
		
		//Rückfahrt
		
		if (a_pressed | b_pressed > 0) {
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 10       	cpse	r2, r1
 15e:	02 c0       	rjmp	.+4      	; 0x164 <main+0x11c>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	83 29       	or	r24, r3
 166:	89 2b       	or	r24, r25
 168:	e9 f0       	breq	.+58     	; 0x1a4 <main+0x15c>
			BackLED(OFF,ON);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	9e d0       	rcall	.+316    	; 0x2ac <BackLED>
        sleep(36);
 170:	84 e2       	ldi	r24, 0x24	; 36
 172:	ab d1       	rcall	.+854    	; 0x4ca <sleep>
			msleep(1);
			BackLED(ON,OFF);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	99 d0       	rcall	.+306    	; 0x2ac <BackLED>
			MotorDir(RWD,RWD);
 17a:	60 e1       	ldi	r22, 0x10	; 16
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	a1 d0       	rcall	.+322    	; 0x2c2 <MotorDir>
			MotorSpeed(120,120);
 180:	68 e7       	ldi	r22, 0x78	; 120
 182:	88 e7       	ldi	r24, 0x78	; 120
 184:	aa d0       	rcall	.+340    	; 0x2da <MotorSpeed>
 186:	28 e5       	ldi	r18, 0x58	; 88
 188:	c2 2e       	mov	r12, r18
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	d2 2e       	mov	r13, r18
 18e:	84 e2       	ldi	r24, 0x24	; 36
 190:	9c d1       	rcall	.+824    	; 0x4ca <sleep>
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	c2 1a       	sub	r12, r18
 196:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 198:	c1 14       	cp	r12, r1
 19a:	d1 04       	cpc	r13, r1
 19c:	c1 f7       	brne	.-16     	; 0x18e <main+0x146>
			msleep(600);
			MotorDir(BREAK,BREAK);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	8f d0       	rcall	.+286    	; 0x2c2 <MotorDir>
			}
		
		if (c_pressed | d_pressed > 0) {
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	41 10       	cpse	r4, r1
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0x168>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	85 29       	or	r24, r5
 1b2:	89 2b       	or	r24, r25
 1b4:	e9 f0       	breq	.+58     	; 0x1f0 <main+0x1a8>
			BackLED(OFF,ON);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	78 d0       	rcall	.+240    	; 0x2ac <BackLED>
        sleep(36);
 1bc:	84 e2       	ldi	r24, 0x24	; 36
 1be:	85 d1       	rcall	.+778    	; 0x4ca <sleep>
			msleep(1);
			BackLED(ON,OFF);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	73 d0       	rcall	.+230    	; 0x2ac <BackLED>
			MotorDir(RWD,RWD);
 1c6:	60 e1       	ldi	r22, 0x10	; 16
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	7b d0       	rcall	.+246    	; 0x2c2 <MotorDir>
			MotorSpeed(120,60);
 1cc:	6c e3       	ldi	r22, 0x3C	; 60
 1ce:	88 e7       	ldi	r24, 0x78	; 120
 1d0:	84 d0       	rcall	.+264    	; 0x2da <MotorSpeed>
 1d2:	98 e5       	ldi	r25, 0x58	; 88
 1d4:	c9 2e       	mov	r12, r25
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	d9 2e       	mov	r13, r25
 1da:	84 e2       	ldi	r24, 0x24	; 36
 1dc:	76 d1       	rcall	.+748    	; 0x4ca <sleep>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	c8 1a       	sub	r12, r24
 1e2:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 1e4:	c1 14       	cp	r12, r1
 1e6:	d1 04       	cpc	r13, r1
 1e8:	c1 f7       	brne	.-16     	; 0x1da <main+0x192>
			msleep(600);
			MotorDir(BREAK,BREAK);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	69 d0       	rcall	.+210    	; 0x2c2 <MotorDir>
			}
		
		if (e_pressed | f_pressed > 0) {
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	2e 81       	ldd	r18, Y+6	; 0x06
 1f6:	21 11       	cpse	r18, r1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <main+0x1b6>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	2d 81       	ldd	r18, Y+5	; 0x05
 200:	82 2b       	or	r24, r18
 202:	89 2b       	or	r24, r25
 204:	e9 f0       	breq	.+58     	; 0x240 <main+0x1f8>
			BackLED(OFF,ON);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	50 d0       	rcall	.+160    	; 0x2ac <BackLED>
        sleep(36);
 20c:	84 e2       	ldi	r24, 0x24	; 36
 20e:	5d d1       	rcall	.+698    	; 0x4ca <sleep>
			msleep(1);
			BackLED(ON,OFF);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	4b d0       	rcall	.+150    	; 0x2ac <BackLED>
			MotorDir(RWD,RWD);
 216:	60 e1       	ldi	r22, 0x10	; 16
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	53 d0       	rcall	.+166    	; 0x2c2 <MotorDir>
			MotorSpeed(60,120);
 21c:	68 e7       	ldi	r22, 0x78	; 120
 21e:	8c e3       	ldi	r24, 0x3C	; 60
 220:	5c d0       	rcall	.+184    	; 0x2da <MotorSpeed>
 222:	88 e5       	ldi	r24, 0x58	; 88
 224:	c8 2e       	mov	r12, r24
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	d8 2e       	mov	r13, r24
 22a:	84 e2       	ldi	r24, 0x24	; 36
 22c:	4e d1       	rcall	.+668    	; 0x4ca <sleep>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	c8 1a       	sub	r12, r24
 232:	d1 08       	sbc	r13, r1
#else
static ALWAYS_INLINE void msleep(uint16_t ms);
#endif

void msleep(uint16_t ms) {
    for (; ms > 0; ms--) {
 234:	c1 14       	cp	r12, r1
 236:	d1 04       	cpc	r13, r1
 238:	c1 f7       	brne	.-16     	; 0x22a <main+0x1e2>
			msleep(600);
			MotorDir(BREAK,BREAK);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	41 d0       	rcall	.+130    	; 0x2c2 <MotorDir>
			}
			
			
		//Lichtsuche
		
		if(left && right < 90){
 240:	01 2b       	or	r16, r17
 242:	09 f4       	brne	.+2      	; 0x246 <main+0x1fe>
 244:	0c cf       	rjmp	.-488    	; 0x5e <main+0x16>
 246:	2a e5       	ldi	r18, 0x5A	; 90
 248:	e2 16       	cp	r14, r18
 24a:	f1 04       	cpc	r15, r1
 24c:	0c f0       	brlt	.+2      	; 0x250 <main+0x208>
 24e:	07 cf       	rjmp	.-498    	; 0x5e <main+0x16>
			MotorDir(RWD,FWD);
 250:	60 e2       	ldi	r22, 0x20	; 32
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	36 d0       	rcall	.+108    	; 0x2c2 <MotorDir>
			MotorSpeed(120,120);
 256:	68 e7       	ldi	r22, 0x78	; 120
 258:	88 e7       	ldi	r24, 0x78	; 120
 25a:	3f d0       	rcall	.+126    	; 0x2da <MotorSpeed>
			}
					
}	
 25c:	00 cf       	rjmp	.-512    	; 0x5e <main+0x16>

0000025e <Init>:
 25e:	13 d1       	rcall	.+550    	; 0x486 <Timer2Init>
 260:	43 d0       	rcall	.+134    	; 0x2e8 <MotorInit>
 262:	18 d0       	rcall	.+48     	; 0x294 <LEDInit>
 264:	47 d1       	rcall	.+654    	; 0x4f4 <ADCInit>
 266:	c1 d0       	rcall	.+386    	; 0x3ea <SwitchInit>
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <StatusLED>:
 26c:	c0 98       	cbi	0x18, 0	; 24
 26e:	92 98       	cbi	0x12, 2	; 18
 270:	80 fd       	sbrc	r24, 0
 272:	c0 9a       	sbi	0x18, 0	; 24
 274:	81 fd       	sbrc	r24, 1
 276:	92 9a       	sbi	0x12, 2	; 18
 278:	08 95       	ret

0000027a <BackLEDFast>:
 27a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 27c:	f8 94       	cli
 27e:	88 23       	and	r24, r24
 280:	19 f0       	breq	.+6      	; 0x288 <BackLEDFast+0xe>
 282:	97 98       	cbi	0x12, 7	; 18
 284:	a1 9a       	sbi	0x14, 1	; 20
 286:	a0 9a       	sbi	0x14, 0	; 20
 288:	95 b3       	in	r25, 0x15	; 21
 28a:	9c 7f       	andi	r25, 0xFC	; 252
 28c:	98 2b       	or	r25, r24
 28e:	95 bb       	out	0x15, r25	; 21
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 290:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 292:	08 95       	ret

00000294 <LEDInit>:
 294:	b8 9a       	sbi	0x17, 0	; 23
 296:	81 b3       	in	r24, 0x11	; 17
 298:	84 6c       	ori	r24, 0xC4	; 196
 29a:	81 bb       	out	0x11, r24	; 17
 29c:	96 98       	cbi	0x12, 6	; 18
 29e:	97 98       	cbi	0x12, 7	; 18
 2a0:	a1 9a       	sbi	0x14, 1	; 20
 2a2:	a0 9a       	sbi	0x14, 0	; 20
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	e9 df       	rcall	.-46     	; 0x27a <BackLEDFast>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	e0 cf       	rjmp	.-64     	; 0x26c <StatusLED>

000002ac <BackLED>:
 2ac:	88 23       	and	r24, r24
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <BackLED+0x8>
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <BackLED+0xa>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	61 11       	cpse	r22, r1
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <BackLED+0x12>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	89 2b       	or	r24, r25
 2c0:	dc cf       	rjmp	.-72     	; 0x27a <BackLEDFast>

000002c2 <MotorDir>:
 2c2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2c4:	f8 94       	cli
 2c6:	92 b3       	in	r25, 0x12	; 18
 2c8:	9f 7c       	andi	r25, 0xCF	; 207
 2ca:	89 2b       	or	r24, r25
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	88 b3       	in	r24, 0x18	; 24
 2d0:	8f 7c       	andi	r24, 0xCF	; 207
 2d2:	68 2b       	or	r22, r24
 2d4:	68 bb       	out	0x18, r22	; 24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2d6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 2d8:	08 95       	ret

000002da <MotorSpeed>:
 2da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2dc:	f8 94       	cli
 2de:	1b bc       	out	0x2b, r1	; 43
 2e0:	8a bd       	out	0x2a, r24	; 42
 2e2:	68 bd       	out	0x28, r22	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2e4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 2e6:	08 95       	ret

000002e8 <MotorInit>:
 2e8:	87 b3       	in	r24, 0x17	; 23
 2ea:	86 63       	ori	r24, 0x36	; 54
 2ec:	87 bb       	out	0x17, r24	; 23
 2ee:	81 b3       	in	r24, 0x11	; 17
 2f0:	80 63       	ori	r24, 0x30	; 48
 2f2:	81 bb       	out	0x11, r24	; 17
 2f4:	81 ea       	ldi	r24, 0xA1	; 161
 2f6:	8f bd       	out	0x2f, r24	; 47
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	8e bd       	out	0x2e, r24	; 46
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	83 7c       	andi	r24, 0xC3	; 195
 300:	89 bf       	out	0x39, r24	; 57
 302:	60 e2       	ldi	r22, 0x20	; 32
 304:	80 e2       	ldi	r24, 0x20	; 32
 306:	dd df       	rcall	.-70     	; 0x2c2 <MotorDir>
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	e6 cf       	rjmp	.-52     	; 0x2da <MotorSpeed>

0000030e <LineData>:
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ec 01       	movw	r28, r24
 316:	f4 d0       	rcall	.+488    	; 0x500 <__ADCBlockEnter>
 318:	18 2f       	mov	r17, r24
 31a:	83 e4       	ldi	r24, 0x43	; 67
 31c:	19 d1       	rcall	.+562    	; 0x550 <ADCSelectChannel>
 31e:	21 d1       	rcall	.+578    	; 0x562 <ADCMeasure>
 320:	24 b1       	in	r18, 0x04	; 4
 322:	35 b1       	in	r19, 0x05	; 5
 324:	39 83       	std	Y+1, r19	; 0x01
 326:	28 83       	st	Y, r18
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	12 d1       	rcall	.+548    	; 0x550 <ADCSelectChannel>
 32c:	1a d1       	rcall	.+564    	; 0x562 <ADCMeasure>
 32e:	24 b1       	in	r18, 0x04	; 4
 330:	35 b1       	in	r19, 0x05	; 5
 332:	3b 83       	std	Y+3, r19	; 0x03
 334:	2a 83       	std	Y+2, r18	; 0x02
 336:	81 2f       	mov	r24, r17
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	f2 c0       	rjmp	.+484    	; 0x524 <__ADCBlockLeave>

00000340 <__vector_14>:
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
 362:	87 b1       	in	r24, 0x07	; 7
 364:	78 94       	sei
 366:	81 36       	cpi	r24, 0x61	; 97
 368:	19 f0       	breq	.+6      	; 0x370 <__vector_14+0x30>
 36a:	83 36       	cpi	r24, 0x63	; 99
 36c:	a1 f0       	breq	.+40     	; 0x396 <__vector_14+0x56>
 36e:	27 c0       	rjmp	.+78     	; 0x3be <__vector_14+0x7e>
 370:	80 91 63 00 	lds	r24, 0x0063
 374:	82 fd       	sbrc	r24, 2
 376:	02 c0       	rjmp	.+4      	; 0x37c <__vector_14+0x3c>
 378:	80 e6       	ldi	r24, 0x60	; 96
 37a:	01 c0       	rjmp	.+2      	; 0x37e <__vector_14+0x3e>
 37c:	82 e6       	ldi	r24, 0x62	; 98
 37e:	f8 94       	cli
 380:	95 b1       	in	r25, 0x05	; 5
 382:	90 93 65 00 	sts	0x0065, r25
 386:	90 91 60 00 	lds	r25, 0x0060
 38a:	90 93 64 00 	sts	0x0064, r25
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	90 93 68 00 	sts	0x0068, r25
 394:	12 c0       	rjmp	.+36     	; 0x3ba <__vector_14+0x7a>
 396:	80 91 63 00 	lds	r24, 0x0063
 39a:	80 ff       	sbrs	r24, 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__vector_14+0x62>
 39e:	80 e6       	ldi	r24, 0x60	; 96
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <__vector_14+0x64>
 3a2:	82 e6       	ldi	r24, 0x62	; 98
 3a4:	f8 94       	cli
 3a6:	95 b1       	in	r25, 0x05	; 5
 3a8:	90 93 67 00 	sts	0x0067, r25
 3ac:	90 91 60 00 	lds	r25, 0x0060
 3b0:	90 93 66 00 	sts	0x0066, r25
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	90 93 62 00 	sts	0x0062, r25
 3ba:	78 94       	sei
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__vector_14+0x86>
 3be:	95 b1       	in	r25, 0x05	; 5
 3c0:	90 93 60 00 	sts	0x0060, r25
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	d1 d0       	rcall	.+418    	; 0x56a <ADCInterruptEnable>
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <SwitchInit>:
 3ea:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3ec:	f8 94       	cli
 3ee:	8b b7       	in	r24, 0x3b	; 59
 3f0:	8f 77       	andi	r24, 0x7F	; 127
 3f2:	8b bf       	out	0x3b, r24	; 59
 3f4:	85 b7       	in	r24, 0x35	; 53
 3f6:	87 7f       	andi	r24, 0xF7	; 247
 3f8:	84 60       	ori	r24, 0x04	; 4
 3fa:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3fc:	9f bf       	out	0x3f, r25	; 63
 3fe:	a4 98       	cbi	0x14, 4	; 20
 400:	85 b3       	in	r24, 0x15	; 21
 402:	80 71       	andi	r24, 0x10	; 16
 404:	85 bb       	out	0x15, r24	; 21
 406:	8b 98       	cbi	0x11, 3	; 17
 408:	93 98       	cbi	0x12, 3	; 18
 40a:	10 92 69 00 	sts	0x0069, r1
 40e:	08 95       	ret

00000410 <PollSwitch>:
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	93 9a       	sbi	0x12, 3	; 18
 41a:	8b 9a       	sbi	0x11, 3	; 17
 41c:	71 d0       	rcall	.+226    	; 0x500 <__ADCBlockEnter>
 41e:	08 2f       	mov	r16, r24
 420:	84 e4       	ldi	r24, 0x44	; 68
 422:	96 d0       	rcall	.+300    	; 0x550 <ADCSelectChannel>
 424:	14 e0       	ldi	r17, 0x04	; 4
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	9b d0       	rcall	.+310    	; 0x562 <ADCMeasure>
 42c:	24 b1       	in	r18, 0x04	; 4
 42e:	35 b1       	in	r19, 0x05	; 5
 430:	c2 0f       	add	r28, r18
 432:	d3 1f       	adc	r29, r19
 434:	11 50       	subi	r17, 0x01	; 1
 436:	c9 f7       	brne	.-14     	; 0x42a <PollSwitch+0x1a>
 438:	80 2f       	mov	r24, r16
 43a:	74 d0       	rcall	.+232    	; 0x524 <__ADCBlockLeave>
 43c:	8b 98       	cbi	0x11, 3	; 17
 43e:	93 98       	cbi	0x12, 3	; 18
 440:	be 01       	movw	r22, r28
 442:	76 95       	lsr	r23
 444:	67 95       	ror	r22
 446:	76 95       	lsr	r23
 448:	67 95       	ror	r22
 44a:	cb 01       	movw	r24, r22
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	98 50       	subi	r25, 0x08	; 8
 452:	a0 d0       	rcall	.+320    	; 0x594 <__udivmodhi4>
 454:	82 ec       	ldi	r24, 0xC2	; 194
 456:	86 0f       	add	r24, r22
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <__vector_2>:
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	8f 93       	push	r24
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 69 00 	sts	0x0069, r24
 474:	8b b7       	in	r24, 0x3b	; 59
 476:	8f 77       	andi	r24, 0x7F	; 127
 478:	8b bf       	out	0x3b, r24	; 59
 47a:	8f 91       	pop	r24
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <Timer2Init>:
 486:	12 bc       	out	0x22, r1	; 34
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	85 bd       	out	0x25, r24	; 37
 48c:	89 b7       	in	r24, 0x39	; 57
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	89 bf       	out	0x39, r24	; 57
 492:	81 e9       	ldi	r24, 0x91	; 145
 494:	83 bd       	out	0x23, r24	; 35
 496:	85 b5       	in	r24, 0x25	; 37
 498:	87 78       	andi	r24, 0x87	; 135
 49a:	85 bd       	out	0x25, r24	; 37
 49c:	bb 9a       	sbi	0x17, 3	; 23
 49e:	c3 98       	cbi	0x18, 3	; 24
 4a0:	08 95       	ret

000004a2 <__vector_4>:
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	8f 93       	push	r24
 4ae:	84 b5       	in	r24, 0x24	; 36
 4b0:	8b 5d       	subi	r24, 0xDB	; 219
 4b2:	84 bd       	out	0x24, r24	; 36
 4b4:	80 91 6a 00 	lds	r24, 0x006A
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 6a 00 	sts	0x006A, r24
 4be:	8f 91       	pop	r24
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <sleep>:
 4ca:	f8 94       	cli
 4cc:	95 b7       	in	r25, 0x35	; 53
 4ce:	9f 70       	andi	r25, 0x0F	; 15
 4d0:	90 68       	ori	r25, 0x80	; 128
 4d2:	95 bf       	out	0x35, r25	; 53
 4d4:	78 94       	sei
 4d6:	90 91 6a 00 	lds	r25, 0x006A
 4da:	89 0f       	add	r24, r25
 4dc:	90 91 6a 00 	lds	r25, 0x006A
 4e0:	98 17       	cp	r25, r24
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <sleep+0x1e>
 4e4:	88 95       	sleep
 4e6:	fa cf       	rjmp	.-12     	; 0x4dc <sleep+0x12>
 4e8:	f8 94       	cli
 4ea:	85 b7       	in	r24, 0x35	; 53
 4ec:	8f 77       	andi	r24, 0x7F	; 127
 4ee:	85 bf       	out	0x35, r24	; 53
 4f0:	78 94       	sei
 4f2:	08 95       	ret

000004f4 <ADCInit>:
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	80 93 61 00 	sts	0x0061, r24
 4fa:	86 e0       	ldi	r24, 0x06	; 6
 4fc:	86 b9       	out	0x06, r24	; 6
 4fe:	08 95       	ret

00000500 <__ADCBlockEnter>:
 500:	2f b7       	in	r18, 0x3f	; 63
 502:	f8 94       	cli
 504:	87 b1       	in	r24, 0x07	; 7
 506:	96 b1       	in	r25, 0x06	; 6
 508:	39 2f       	mov	r19, r25
 50a:	38 78       	andi	r19, 0x88	; 136
 50c:	31 f0       	breq	.+12     	; 0x51a <__ADCBlockEnter+0x1a>
 50e:	93 ff       	sbrs	r25, 3
 510:	05 c0       	rjmp	.+10     	; 0x51c <__ADCBlockEnter+0x1c>
 512:	80 93 61 00 	sts	0x0061, r24
 516:	86 e8       	ldi	r24, 0x86	; 134
 518:	86 b9       	out	0x06, r24	; 6
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	2f bf       	out	0x3f, r18	; 63
 51e:	36 99       	sbic	0x06, 6	; 6
 520:	fe cf       	rjmp	.-4      	; 0x51e <__ADCBlockEnter+0x1e>
 522:	08 95       	ret

00000524 <__ADCBlockLeave>:
 524:	3f b7       	in	r19, 0x3f	; 63
 526:	f8 94       	cli
 528:	8f 3f       	cpi	r24, 0xFF	; 255
 52a:	31 f4       	brne	.+12     	; 0x538 <__ADCBlockLeave+0x14>
 52c:	80 91 61 00 	lds	r24, 0x0061
 530:	8f 3f       	cpi	r24, 0xFF	; 255
 532:	51 f0       	breq	.+20     	; 0x548 <__ADCBlockLeave+0x24>
 534:	2e ed       	ldi	r18, 0xDE	; 222
 536:	01 c0       	rjmp	.+2      	; 0x53a <__ADCBlockLeave+0x16>
 538:	26 ed       	ldi	r18, 0xD6	; 214
 53a:	97 b1       	in	r25, 0x07	; 7
 53c:	98 27       	eor	r25, r24
 53e:	90 7c       	andi	r25, 0xC0	; 192
 540:	09 f0       	breq	.+2      	; 0x544 <__ADCBlockLeave+0x20>
 542:	16 b8       	out	0x06, r1	; 6
 544:	87 b9       	out	0x07, r24	; 7
 546:	01 c0       	rjmp	.+2      	; 0x54a <__ADCBlockLeave+0x26>
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	26 b9       	out	0x06, r18	; 6
 54c:	3f bf       	out	0x3f, r19	; 63
 54e:	08 95       	ret

00000550 <ADCSelectChannel>:
 550:	97 b1       	in	r25, 0x07	; 7
 552:	98 27       	eor	r25, r24
 554:	90 7c       	andi	r25, 0xC0	; 192
 556:	09 f0       	breq	.+2      	; 0x55a <ADCSelectChannel+0xa>
 558:	16 b8       	out	0x06, r1	; 6
 55a:	96 e8       	ldi	r25, 0x86	; 134
 55c:	96 b9       	out	0x06, r25	; 6
 55e:	87 b9       	out	0x07, r24	; 7
 560:	08 95       	ret

00000562 <ADCMeasure>:
 562:	36 9a       	sbi	0x06, 6	; 6
 564:	36 99       	sbic	0x06, 6	; 6
 566:	fe cf       	rjmp	.-4      	; 0x564 <ADCMeasure+0x2>
 568:	08 95       	ret

0000056a <ADCInterruptEnable>:
 56a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 56c:	f8 94       	cli
 56e:	96 b1       	in	r25, 0x06	; 6
 570:	97 ff       	sbrs	r25, 7
 572:	02 c0       	rjmp	.+4      	; 0x578 <ADCInterruptEnable+0xe>
 574:	93 ff       	sbrs	r25, 3
 576:	0a c0       	rjmp	.+20     	; 0x58c <ADCInterruptEnable+0x22>
 578:	97 b1       	in	r25, 0x07	; 7
 57a:	98 27       	eor	r25, r24
 57c:	90 7c       	andi	r25, 0xC0	; 192
 57e:	09 f0       	breq	.+2      	; 0x582 <ADCInterruptEnable+0x18>
 580:	16 b8       	out	0x06, r1	; 6
 582:	36 99       	sbic	0x06, 6	; 6
 584:	16 b8       	out	0x06, r1	; 6
 586:	87 b9       	out	0x07, r24	; 7
 588:	9e ed       	ldi	r25, 0xDE	; 222
 58a:	96 b9       	out	0x06, r25	; 6
 58c:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 590:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 592:	08 95       	ret

00000594 <__udivmodhi4>:
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	51 e1       	ldi	r21, 0x11	; 17
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__udivmodhi4_ep>

0000059c <__udivmodhi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	a6 17       	cp	r26, r22
 5a2:	b7 07       	cpc	r27, r23
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <__udivmodhi4_ep>
 5a6:	a6 1b       	sub	r26, r22
 5a8:	b7 0b       	sbc	r27, r23

000005aa <__udivmodhi4_ep>:
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	5a 95       	dec	r21
 5b0:	a9 f7       	brne	.-22     	; 0x59c <__udivmodhi4_loop>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	bc 01       	movw	r22, r24
 5b8:	cd 01       	movw	r24, r26
 5ba:	08 95       	ret

000005bc <__divmodhi4>:
 5bc:	97 fb       	bst	r25, 7
 5be:	07 2e       	mov	r0, r23
 5c0:	16 f4       	brtc	.+4      	; 0x5c6 <__divmodhi4+0xa>
 5c2:	00 94       	com	r0
 5c4:	06 d0       	rcall	.+12     	; 0x5d2 <__divmodhi4_neg1>
 5c6:	77 fd       	sbrc	r23, 7
 5c8:	08 d0       	rcall	.+16     	; 0x5da <__divmodhi4_neg2>
 5ca:	e4 df       	rcall	.-56     	; 0x594 <__udivmodhi4>
 5cc:	07 fc       	sbrc	r0, 7
 5ce:	05 d0       	rcall	.+10     	; 0x5da <__divmodhi4_neg2>
 5d0:	3e f4       	brtc	.+14     	; 0x5e0 <__divmodhi4_exit>

000005d2 <__divmodhi4_neg1>:
 5d2:	90 95       	com	r25
 5d4:	81 95       	neg	r24
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	08 95       	ret

000005da <__divmodhi4_neg2>:
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255

000005e0 <__divmodhi4_exit>:
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
